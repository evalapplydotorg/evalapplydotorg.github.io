<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>howto on eval/apply</title><link>/tags/howto/</link><description>Recent content in howto on eval/apply</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 19 Apr 2022 19:48:41 +0530</lastBuildDate><atom:link href="/tags/howto/index.xml" rel="self" type="application/rss+xml"/><item><title>Which Clojure codebases should I read? How and why?</title><link>/posts/which-clojure-codebases-to-read-how-and-why/</link><pubDate>Tue, 19 Apr 2022 19:48:41 +0530</pubDate><guid>/posts/which-clojure-codebases-to-read-how-and-why/</guid><description>&lt;p>This question is frequently asked by newcomers to Clojure. I struggled a lot
with this too. I still do from time to time, in unfamiliar territory.&lt;/p>
&lt;p>These days, I feel like I&amp;rsquo;m in unfamiliar territory a lot. Various Clojurians
&amp;mdash; individuals and groups &amp;mdash; have been producing so much creative, diverse
work over these last few years, that keeping up is impossible!&lt;/p>
&lt;p>No doubt this surfeit of creativity intimidates newcomers. The strange ideas
and lingo and ways of thinking and writing espoused by Clojurians can seem so
very alien. But despair not, for Clojureland also has a surfeit of friendly,
helpful people. And very many of our codebases are small! You will be able to
read them!&lt;/p>
&lt;p>This post explains what I believe I&amp;rsquo;ve done subconsciously over the years. It
is as much an answer for somewhat experienced me as it is for the relative
newcomer you!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#a-quick-motivating-example">A quick motivating example&lt;/a>&lt;/li>
&lt;li>&lt;a href="#heuristics-to-choose-a-project-to-read">Heuristics to choose a project to read&lt;/a>&lt;/li>
&lt;li>&lt;a href="#effective-way--s--to-read-a-project">Effective way(s) to read a project&lt;/a>&lt;/li>
&lt;li>&lt;a href="#suggested-projects-with-short-reasons-why-to-read">Suggested projects with short reasons why to read&lt;/a>&lt;/li>
&lt;li>&lt;a href="#library-maintainers-would-howtoreadmes-make-sense">Library maintainers: Would HOWTOREADMEs make sense?&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>(Note: This post is likely to be revised a few times. I&amp;rsquo;ve quick-fire published
it to solicit feedback and to use it as a discussion tool for &lt;a href="https://github.com/clojure/clojure-site/issues/586">an ongoing conversation&lt;/a>
about this topic.)&lt;/p></description><content>&lt;p>This question is frequently asked by newcomers to Clojure. I struggled a lot
with this too. I still do from time to time, in unfamiliar territory.&lt;/p>
&lt;p>These days, I feel like I&amp;rsquo;m in unfamiliar territory a lot. Various Clojurians
&amp;mdash; individuals and groups &amp;mdash; have been producing so much creative, diverse
work over these last few years, that keeping up is impossible!&lt;/p>
&lt;p>No doubt this surfeit of creativity intimidates newcomers. The strange ideas
and lingo and ways of thinking and writing espoused by Clojurians can seem so
very alien. But despair not, for Clojureland also has a surfeit of friendly,
helpful people. And very many of our codebases are small! You will be able to
read them!&lt;/p>
&lt;p>This post explains what I believe I&amp;rsquo;ve done subconsciously over the years. It
is as much an answer for somewhat experienced me as it is for the relative
newcomer you!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#a-quick-motivating-example">A quick motivating example&lt;/a>&lt;/li>
&lt;li>&lt;a href="#heuristics-to-choose-a-project-to-read">Heuristics to choose a project to read&lt;/a>&lt;/li>
&lt;li>&lt;a href="#effective-way--s--to-read-a-project">Effective way(s) to read a project&lt;/a>&lt;/li>
&lt;li>&lt;a href="#suggested-projects-with-short-reasons-why-to-read">Suggested projects with short reasons why to read&lt;/a>&lt;/li>
&lt;li>&lt;a href="#library-maintainers-would-howtoreadmes-make-sense">Library maintainers: Would HOWTOREADMEs make sense?&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>(Note: This post is likely to be revised a few times. I&amp;rsquo;ve quick-fire published
it to solicit feedback and to use it as a discussion tool for &lt;a href="https://github.com/clojure/clojure-site/issues/586">an ongoing conversation&lt;/a>
about this topic.)&lt;/p>
&lt;hr>
&lt;h2 id="a-quick-motivating-example">A quick motivating example&lt;/h2>
&lt;p>I haven&amp;rsquo;t done much focused code reading recently, but semi-recently, I went
down the rabbit hole of comparing &amp;ldquo;System&amp;rdquo; libraries. The details are for a
separate blog post. I&amp;rsquo;ve placed it here as reference material to illustrate
some of this post.&lt;/p>
&lt;p>&lt;a href="https://github.com/adityaathalye/slideware/raw/master/Grokking%20Libraries%20in%20Clojureland.pdf">Grokking Libraries in Clojureland&lt;/a> (PDF, slides).&lt;/p>
&lt;h2 id="heuristics-to-choose-a-project-to-read">Heuristics to choose a project to read&lt;/h2>
&lt;p>This kind of code reading is best viewed as applied, directed reading designed
to deeply understand creative (and destructive) ways to use an instrument,
in this case, Clojure the language, its standard library, idioms, patterns,
and style.&lt;/p>
&lt;p>The key problem here is &amp;ldquo;you don&amp;rsquo;t know what you don&amp;rsquo;t know&amp;rdquo;. Coming up with
a set of heuristics can help discover good choices. In fact, one can make a
decision-making matrix of #{libraries} X #{heuristics}, like so:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Heuristic / Library&lt;/th>
&lt;th>Lib A&lt;/th>
&lt;th>Lib B&lt;/th>
&lt;th>Lib C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Code size (LoC)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Code complexity (high/mid/low)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Utility&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stability (high, mid, low)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Docs&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Talks&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tutorials&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>It also helps to decide a domain or area of knowledge (web/HTML, web/HTTP,
algorave, databases etc.), before drawing up the decision-making matrix.&lt;/p>
&lt;p>Here is a set of opinions and heuristics to steal and/or riff off.&lt;/p>
&lt;h3 id="choosing-an-area-of-domain-knowledge">Choosing an area of domain knowledge&lt;/h3>
&lt;p>Knowledge about a domain or problem space is a source of massive cognitive
overhead. It helps a lot to pick an area of knowledge you feel you are most
comfortable with, and narrow your code search and reading to that area.&lt;/p>
&lt;p>For example, web programmers may want to read an HTTP library. Musicians may
want to find a music synthesis codebase. Frontend people many like to read
HTML / CSS parsers or generators. Database nerds may want to know how we do
stuff without fancy ORMs etc.&lt;/p>
&lt;h3 id="project-type">Project type&lt;/h3>
&lt;p>Choose single-purpose libraries. The Clojure world is full of libraries of
various sizes and responsibilities. Most of these tend to focus very sharply
on one single problem, which makes it easier to build and retain complete
context in one&amp;rsquo;s head. These tend to be good place to start.&lt;/p>
&lt;p>Application code, by contrast, tends to be a complex (or complected) mix
of domains, patterns, libraries. This makes it easy to get lost.&lt;/p>
&lt;p>Further, there is no one true way to organise Clojure apps. Often, apps
don&amp;rsquo;t even mirror standard conventions seen elsewhere (e.g. MVC/MVCC etc.).
Clojure apps are assemblies of libraries, where each library choice comes
with some technical and/or design tradeoff. Further, build tools vary. App
configuration systems vary. etc. etc. many tens of moving parts.&lt;/p>
&lt;p>One eventually develops a sense for it all, but most of it is completely not
obvious when one is just starting off. It makes way-finding really hard.
You will spend lots of time just to figure out how some app is wired together.&lt;/p>
&lt;p>So it&amp;rsquo;s better to subtract everything until you are left with a singular
idea and its expression. That is, often, a single-purpose library!&lt;/p>
&lt;h3 id="code-size">Code size&lt;/h3>
&lt;p>Prefer libraries with as few lines of code as possible. The good news is
that Clojure libraries tend to focus on a single well-defined problem,
which tends to result in small &lt;em>and complete&lt;/em> solutions to problems. Many
excellent Clojure libraries weigh in at under 1,000 LoC.&lt;/p>
&lt;p>With some effort, you can hope to hold the entire codebase in your head.
Once that happens, your brain will discover things in diffuse mode in your
shower or on a walk or something. And then you know you&amp;rsquo;ve struck gold!&lt;/p>
&lt;h3 id="code-complexity">Code complexity&lt;/h3>
&lt;p>Even if a library is small, it may be complex, because it address a hard
problem. This is tricky to infer up-front, and that&amp;rsquo;s fine. Getting stuck is
part of the process. One mitigation is to skim-read the source first. If you
see very deeply indented code, or lots of large functions, or lots of macros,
maybe park it for later. Definitely prefer libraries without advanced macrology
(unless your purpose is to understand advanced macrology :).&lt;/p>
&lt;h3 id="utility">Utility&lt;/h3>
&lt;p>How much is the library used? A well-used library may be widely used, or it
may be niche but heavily used. Either way, odds are good that the source has
been vetted. Also it improves your chances of finding help if you get stuck.&lt;/p>
&lt;p>Some proxy measures like github stars, a dedicated channel in Slack or Zulip,
or references in mailing list history can help judge this. If you are still
uncertain, just drop a message in one of the community forums. Helpful people
will help!&lt;/p>
&lt;h3 id="talks-docs-tutorials">Talks, docs, tutorials&lt;/h3>
&lt;p>Are talks, docs, and tutorials available for the library, or at least the space
the library addresses? The code often does not tell the full story of the
&amp;ldquo;why?&amp;rdquo; of the library, the roads not taken or choices unmade. Code also tends
not to convey the author&amp;rsquo;s mental process. This is the highest value learning
that comes from reading; viz. learning a new way to think. So knowing what
knowledgeable people have been saying about the space/code is very useful.&lt;/p>
&lt;h3 id="beware-the-falsehood-of-dead-repos">Beware the falsehood of &amp;ldquo;dead&amp;rdquo; repos&lt;/h3>
&lt;p>Many in-use Clojure libraries don&amp;rsquo;t see frequent (or large) updates. This is
a virtue in our circles. It indicates finished-ness and stability. In fact, if
you find a repo with no commits for months or years, and a &amp;ldquo;liveness advisory&amp;rdquo;
on it, you &lt;em>definitely&lt;/em> want to read that code. That code has proven itself
handsomely!&lt;/p>
&lt;h2 id="effective-way--s--to-read-a-project">Effective way(s) to read a project&lt;/h2>
&lt;p>This is basically a set of ways to &lt;em>engage&lt;/em> with the material. The programmer
equivalent of textbook underlining, marginalia, scribbling notes and diagrams.&lt;/p>
&lt;h3 id="read-the-readme-and-api-docs">Read the README and API docs&lt;/h3>
&lt;p>And keep them handy. Ideally figure out the &lt;em>why&lt;/em> of the project before getting
into the weeds, because weeds there will be.&lt;/p>
&lt;h3 id="use-the-repl">Use the REPL&lt;/h3>
&lt;p>I habitually use &lt;code>clojure.repl/source&lt;/code>, to pull up source code for functions
that are new to me.&lt;/p>
&lt;h3 id="learn-to-navigate-the-code">Learn to navigate the code&lt;/h3>
&lt;p>Find editor functions that let you see an overview of a namespace, jump to
and fro from definitions.&lt;/p>
&lt;h3 id="experiment">&lt;em>Experiment&lt;/em>&lt;/h3>
&lt;p>IMHO it is critical to &lt;em>experiment&lt;/em> with the code. Passive reading gets us
only so far. To truly grok code one must modify and play with it! This is
where one thanks oneself for choosing a focused, concise project :)&lt;/p>
&lt;h3 id="comparitive-literature-approach">&amp;ldquo;Comparitive Literature&amp;rdquo; approach&lt;/h3>
&lt;p>Preferably find a space where multiple libraries exist. As long as one well
used library is present, it is fine if unused ones exist too. Frequently
contemporary libraries aim to overcome walls their classic brethren hit, or
are novel approaches to the same problem that offer a different set of
tradeoffs v/s the classics.&lt;/p>
&lt;p>There is much to learn from bygone classics, but only after one works through
the contemporary stuff, and has several &amp;ldquo;Wait, but why?&amp;rdquo; moments.&lt;/p>
&lt;h3 id="alt-implementation">Alt-implementation&lt;/h3>
&lt;p>The Black Belt move is to combine experimentation and comparative lit. and
try to hack up your own alternate implementation, by purposely taking a
completely different approach to representing the problem space, as compared
to the library under study.&lt;/p>
&lt;h2 id="suggested-projects-with-short-reasons-why-to-read">Suggested projects with short reasons why to read&lt;/h2>
&lt;p>This is a first-cut top-of-mind list, from the top of &lt;em>my&lt;/em> chaotic mind.
Take with a pinch of salt!&lt;/p>
&lt;p>Cross-reference with &lt;a href="https://github.com/clojure/clojure-site/issues/586">this discussion&lt;/a>
where folks are trying to figure out what projects to suggest, how, and why,
as part of an FAQ or a Guide at the official Clojure website.&lt;/p>
&lt;h3 id="web-html-css">web/HTML/CSS&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://github.com/weavejester/hiccup">weavejester/hiccup&lt;/a>&lt;/strong> to understand
a natural translation of one domain (HTML) to Clojure data. Writing HTML as
Clojure data is what we mean when we say &amp;ldquo;well, it&amp;rsquo;s just data&amp;rdquo; or &amp;ldquo;data DSL&amp;rdquo;.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://github.com/noprompt/garden">noprompt/garden&lt;/a>&lt;/strong>
which does unto CSS what Hiccup does unto HTML.&lt;/li>
&lt;/ul>
&lt;h3 id="web-http">web/HTTP&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://github.com/ring-clojure/ring">Ring&lt;/a>&lt;/strong>, to understand one of the
most popular HTTP server abstractions in the Clojureverse.&lt;/li>
&lt;/ul>
&lt;h3 id="clojure-itself">Clojure itself&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://github.com/clojure/clojure/blob/master/src/clj/clojure/test.clj">Clojure.test&lt;/a>&lt;/strong>
which is the built-in testing framework, in a surprisingly small amount of
code. Also, incidentally, to start feeling OK diving into Clojure&amp;rsquo;s own source.&lt;/li>
&lt;/ul>
&lt;h3 id="database-queries">Database queries&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://github.com/seancorfield/honeysql">honeysql&lt;/a>&lt;/strong>
to grok a way to represent the Domain of SQL queries as Clojure data.&lt;/li>
&lt;/ul>
&lt;h3 id="music-maker">Music maker&lt;/h3>
&lt;p>There&amp;rsquo;s lots out there that I don&amp;rsquo;t know of, but&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/overtone/overtone">overtone/overtone&lt;/a>, but it is a big project&lt;/li>
&lt;li>&lt;a href="https://github.com/ssrihari/ragavardhini">ssrihari/ragavardhini&lt;/a> is smaller&lt;/li>
&lt;/ul>
&lt;h3 id="system-start-stop-thingy">&amp;ldquo;System&amp;rdquo; start/stop thingy&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://github.com/stuartsierra/component">stuartsierra/component&lt;/a>&lt;/strong>
&amp;ldquo;Managed lifecycle of stateful objects in Clojure&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;h3 id="app-configuration-thingy">App configuration thingy&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://github.com/juxt/aero">juxt/aero&lt;/a>&lt;/strong>
&amp;ldquo;A small library for explicit, intentful configuration.&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h3 id="applications-designed-for-copy-and-hack">Applications designed for &amp;ldquo;copy-and-hack&amp;rdquo;&lt;/h3>
&lt;p>As &lt;a href="https://github.com/puredanger">@puredanger&lt;/a> and &lt;a href="https://github.com/plexus">@plexus&lt;/a> have &lt;a href="https://github.com/clojure/clojure-site/issues/586">written here&lt;/a>:
If you&amp;rsquo;re wondering &amp;ldquo;what&amp;rsquo;s something similar I can copy and hack on&amp;rdquo; or
&amp;ldquo;what does a real project look like&amp;rdquo;?&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/seancorfield/usermanager-example">seancorfield/usermanager-example&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/clojureverse/clojurians-log-app">clojureverse/clojurians-log-app&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="large-scale-repos">Large-scale repos&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/nasa/Common-Metadata-Repository">NASA&amp;rsquo;s Common Metadata Repository&lt;/a>
project, just to have one&amp;rsquo;s mind blown :D&lt;/li>
&lt;/ul>
&lt;h2 id="library-maintainers-would-howtoreadmes-make-sense">Library maintainers: Would HOWTOREADMEs make sense?&lt;/h2>
&lt;p>Hi! First, thank you for your library work! I&amp;rsquo;m just thinking aloud here&amp;hellip;&lt;/p>
&lt;p>Suppose Clojure library authors write little reading guides for their projects;
&lt;strong>&amp;ldquo;How to read me&amp;quot;s&lt;/strong>? Maybe a paragraph or two that provides context like:&lt;/p>
&lt;ul>
&lt;li>Suggested entry point and Meta-dot pathway&lt;/li>
&lt;li>The most important namespace(s)&lt;/li>
&lt;li>Interesting functions&lt;/li>
&lt;li>Tests or Rich comments to try out on priority&lt;/li>
&lt;li>Any known hairy-scary bits or gotchas&lt;/li>
&lt;li>Perhaps a line or two suggesting &amp;ldquo;compare with Alternate Libs A, B, C&amp;rdquo;&lt;/li>
&lt;li>etc.&lt;/li>
&lt;/ul>
&lt;p>A reader may fruitfully combine this guidance with information about project
purpose, rationale, and any open issues marked &amp;ldquo;beginner&amp;rdquo; etc.&lt;/p></content></item><item><title>Why and How I use "Org Mode" for my writing and more</title><link>/posts/why-and-how-i-use-org-mode/</link><pubDate>Tue, 19 Apr 2022 00:27:40 +0530</pubDate><guid>/posts/why-and-how-i-use-org-mode/</guid><description>&lt;p>You won&amp;rsquo;t know of &lt;a href="https://orgmode.org/">Org Mode&lt;/a> if you live a normal life.
&lt;a href="https://orgmode.org/features.html">This page&lt;/a> has pictures that will help you visualise it.&lt;/p>
&lt;p>It is a decidedly un-sexy under-marketed weirdly niche tool for note taking
(and a lot more). &amp;ldquo;Your life in plain text&amp;rdquo;, they say.&lt;/p>
&lt;p>Yet, I find myself telling people that they will have to pry it from my cold
dead hands. Which befuddles me. Why, as an ingrate software nerd who has
soured on software technology &amp;mdash;talk about biting the hand that feeds&amp;mdash; do
I evince such strong sentiment about a software program?!&lt;/p>
&lt;p>Also, &lt;em>plain text&lt;/em>? In 2022?!&lt;/p>
&lt;p>Well, join the wonder club. I&amp;rsquo;ve been wondering the same thing!&lt;/p>
&lt;p>With further ado, I will:&lt;/p>
&lt;ul>
&lt;li>illustrate my org-mode use with real examples&lt;/li>
&lt;li>describe my &amp;ldquo;what, why, and how&amp;rdquo; in generally applicable terms&lt;/li>
&lt;li>discuss some common objections and concerns&lt;/li>
&lt;li>offer some shiny brain-food for your imagination&lt;/li>
&lt;/ul>
&lt;p>Also nerd alert. I can&amp;rsquo;t remove some technicalities without also dumbing it
down and doing your intelligence a disservice. Email me if you need help.&lt;/p>
&lt;p>Take what is useful and discard the rest!&lt;/p></description><content>&lt;p>You won&amp;rsquo;t know of &lt;a href="https://orgmode.org/">Org Mode&lt;/a> if you live a normal life.
&lt;a href="https://orgmode.org/features.html">This page&lt;/a> has pictures that will help you visualise it.&lt;/p>
&lt;p>It is a decidedly un-sexy under-marketed weirdly niche tool for note taking
(and a lot more). &amp;ldquo;Your life in plain text&amp;rdquo;, they say.&lt;/p>
&lt;p>Yet, I find myself telling people that they will have to pry it from my cold
dead hands. Which befuddles me. Why, as an ingrate software nerd who has
soured on software technology &amp;mdash;talk about biting the hand that feeds&amp;mdash; do
I evince such strong sentiment about a software program?!&lt;/p>
&lt;p>Also, &lt;em>plain text&lt;/em>? In 2022?!&lt;/p>
&lt;p>Well, join the wonder club. I&amp;rsquo;ve been wondering the same thing!&lt;/p>
&lt;p>With further ado, I will:&lt;/p>
&lt;ul>
&lt;li>illustrate my org-mode use with real examples&lt;/li>
&lt;li>describe my &amp;ldquo;what, why, and how&amp;rdquo; in generally applicable terms&lt;/li>
&lt;li>discuss some common objections and concerns&lt;/li>
&lt;li>offer some shiny brain-food for your imagination&lt;/li>
&lt;/ul>
&lt;p>Also nerd alert. I can&amp;rsquo;t remove some technicalities without also dumbing it
down and doing your intelligence a disservice. Email me if you need help.&lt;/p>
&lt;p>Take what is useful and discard the rest!&lt;/p>
&lt;blockquote>
&lt;p>Org is a highly flexible structured plain text file format, composed of a
few simple, yet versatile, structures — constructed to be both simple enough
for the novice and powerful enough for the expert.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://orgmode.org">orgmode.org&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Yes, it&amp;rsquo;s true.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#what-i-use-org-mode-for">What I use Org Mode for&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-pretty-good-example-of-my-usage">A pretty good example of my usage&lt;/a>&lt;/li>
&lt;li>&lt;a href="#how-i-got-into-the-org-life">How I got into the org life&lt;/a>&lt;/li>
&lt;li>&lt;a href="#some-common-objections-and-questions">Some common objections and questions&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#bleh-a-church-of-emacs-evangelist-dot-dot-dot">Bleh! A Church of Emacs evangelist&amp;hellip;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#but-seriously-emacs-winkwink-amirite">But seriously, Emacs winkwink, amirite?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#but-what-if-one-app-is-not-enough">But what if one app is not enough?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#but--sexy-vc-funded-app">But (sexy VC-funded app)?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#but-isn-t-org-mode-a-productivity-app">But isn&amp;rsquo;t org-mode a productivity app?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#but-why-org-instead-of-markdown">But why org instead of markdown?&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#help-where-do-i-even-begin">Help! &lt;em>Where do I even begin&lt;/em>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shiny-brain-food-for-your-imagination">Shiny brain-food for your imagination&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="what-i-use-org-mode-for">What I use Org Mode for&lt;/h2>
&lt;p>Over the last 8-odd years, I have &lt;em>gradually&lt;/em> come to use Org Mode (a.k.a.
&lt;em>org-mode&lt;/em>, &lt;em>orgmode&lt;/em>, or just &lt;em>org&lt;/em>) for all my:&lt;/p>
&lt;ul>
&lt;li>note-taking&lt;/li>
&lt;li>live demo presentations&lt;/li>
&lt;li>slide decks&lt;/li>
&lt;li>diagramming&lt;/li>
&lt;li>interactive polyglot computational notebooks&lt;/li>
&lt;li>blogging. Indeed, this blog post and the surrounding website are written in
org text and &lt;a href="https://www.evalapply.org/#footer">made with&lt;/a> tools that work with orgmode.&lt;/li>
&lt;/ul>
&lt;p>I have &lt;strong>never&lt;/strong> used org for managing TODOs, calendaring, or any &amp;ldquo;productivity&amp;rdquo;
use cases (time tracking, GTD etc.), which it has become popular for. Nor, as
is also popular these days, is it my &amp;ldquo;second brain&amp;rdquo;. (Or maybe it is because
my ~/org directory is a total disaster zone. I just disorganise and use Emacs
to search through the files.).&lt;/p>
&lt;p>Some Emacs-using manager-type friends have built very high-leverage workflows
to help them stay on top of operations, coaching/mentoring, project management,
and more. No other tool in the market comes close to what they can get their
org workflows to do for them. (Also, the pun is deeply satisfying &amp;mdash; to run
one&amp;rsquo;s org with org :)&lt;/p>
&lt;p>I too have yet to find an alternative that lets me do &lt;em>all&lt;/em> my stuff more
seamlessly and capably than org-mode. Granted I use the &lt;em>Emacs&lt;/em> implementation
of org-mode, but I&amp;rsquo;m optimistic that more apps (web, mobile, desktop) are
becoming general enough. I enumerate several of them later.&lt;/p>
&lt;h2 id="a-pretty-good-example-of-my-usage">A pretty good example of my usage&lt;/h2>
&lt;p>I enjoy teaching tutorial-style talks and workshops, and I like to live
dangerously; only doing live demos. I recently did one of those at Functional
Conf 2022. Here is the sequence of events of how things got done, via org-mode.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Development&lt;/strong>:
The talk started off &lt;a href="https://gist.github.com/adityaathalye/1eeb80e407fa937337402b1f15480b24">as prose&lt;/a> in an orgmode file
(click &amp;ldquo;Raw&amp;rdquo; button to see the orgmode text I actually typed out).
Thanks to &lt;a href="https://orgmode.org/worg/org-contrib/babel/">org-babel&lt;/a>,
I was programming and testing the code examples &lt;em>right inside the file&lt;/em>,
as I went along developing and refining my ideas. This facility is known
as &amp;ldquo;live computational notebook&amp;rdquo;. org-babel was separate before, but now
it comes built into the Emacs implementation of Org Mode. Epic win!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Publishing&lt;/strong>:
In fact, this content was a draft blog post in my website directory. Once
it got decently OK, &lt;a href="https://www.evalapply.org/posts/n-ways-to-fizzbuzz-in-clojure/">I published it to my blog&lt;/a>, to solicit feedback
and to maintain as a living document, progressively improving the
prose / examples / explanations.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Slideware&lt;/strong>:
The reviewed and revised blog post rapidly turned into
&lt;a href="https://gist.github.com/adityaathalye/398d6fc4c8ce9d23e2e393425f0b6454">this hastily-made presentation version&lt;/a>
(click &amp;ldquo;Raw&amp;rdquo; button to see the actual text I edited the post down to).
I simply deleted prose, support material and extra-examples until I had
just-right examples I could fit into a screen at a time (at a suitably
large font size).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Live Demo&lt;/strong>:
That in turn enabled &lt;a href="https://www.youtube.com/watch?v=BTouODWov-A">the live demo&lt;/a> (video)
with live code evaluation (with org-babel),
and slide navigation using &lt;a href="https://github.com/takaxp/org-tree-slide">org-tree-slide&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>PDF Handout&lt;/strong>:
Since then I have &lt;a href="https://raw.githubusercontent.com/adityaathalye/slideware/master/n-ways-to-fizz-buzz-clj.org">cleaned up and restructured&lt;/a>
the hastily-done presentation version so it exports neatly via &lt;a href="https://orgmode.org/worg/exporters/beamer/tutorial.html">Beamer&lt;/a>,
into this &lt;a href="https://github.com/adityaathalye/slideware/blob/master/n-ways-to-fizz-buzz-clj.pdf">nifty PDF slide deck&lt;/a>.
The heavily improved and reformatted orgmode version remains eminently
demoscene-able. If I were immune to last-minute prep, this is the version
I would have used for the live demo.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Professor Points&lt;/strong>:
I also get intermediate &lt;a href="https://github.com/adityaathalye/slideware/blob/master/n-ways-to-fizz-buzz-clj.tex">tex output&lt;/a> for free,
which I don&amp;rsquo;t need, but may please you if you are a professor (or said
professor&amp;rsquo;s hopelessly sleep derived grad students).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Version-controlled and Highly Reproducible&lt;/strong>:
I can go back to any saved version of any of the org files above, and
reliably reproduce output for &amp;ldquo;distribution&amp;rdquo; (PDF, tex, HTML etc.).
In other words, it is all
highly reproducible.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="how-i-got-into-the-org-life">How I got into the org life&lt;/h2>
&lt;p>Well, orgmode was created in anger almost 2 decades ago (circa 2003) by a
particularly nerdy astronomer &amp;mdash; &lt;a href="https://staff.science.uva.nl/c.dominik/">Carsten Dominic&lt;/a> &amp;mdash; who was fed up with the
anemic note taking tools du jour. I discovered it about a decade ago (circa
2013), right after I changed careers to &amp;ldquo;tech&amp;rdquo;, because all the gentlenerds
at the little company used Emacs. Told ya. Not normal. (Although, surprisingly,
lots of normies use it too. Hi friends!).&lt;/p>
&lt;p>But, long before I found Emacs org-mode, I had Microsoft OneNote in a past
life as a Suit. In Gen-Z terms, OneNote was (is?) a &amp;ldquo;local-first&amp;rdquo; Personal
Knowledge Management (PKM) app (that sold profitably&amp;mdash;what a concept).
I was a superfan and used it All The Time for All The Things. In hindsight,
I wonder if they didn&amp;rsquo;t pinch their ideas from org-mode &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Anyway, after I fell into the oddball world of Unix and Emacs users, I started
with &amp;ldquo;well, all I really need is a way to write and search copious notes&amp;rdquo;.&lt;/p>
&lt;p>If memory serves, it was m&amp;rsquo;colleague &lt;a href="https://twitter.com/firesofmay">Mayank&lt;/a>, who&amp;rsquo;s Emacs I first saw org in,
and m&amp;rsquo;other colleague &lt;a href="https://twitter.com/vedang">Vedang&lt;/a> who&amp;rsquo;s supercharged org-life provided ample
inspiration as well as opportunities to rib him about his org dependence.
With a little bit of monkey-see-monkey-do and some help, I started dropping
words into .org files.&lt;/p>
&lt;p>Little did I know how it would gradually absorb all my OneNote use cases,
and provide a lot more.&lt;/p>
&lt;p>I started with plain notes and checkboxes. It was just that for many months.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Then I discovered org-babel for code-aware syntax highlighting and editing,
because I wanted to also keep nice-looking code snippets in my documents.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After several more months, I discovered org-babel supports interactive code
evaluation with results capture. WAT??!!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then a year or two in, I started doing little talks. By that time I was
clued-in enough to be pretty sure I&amp;rsquo;d find something to make org-mode do it.
And sure enough there exist things like org-tree-slide and org-present.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then I wanted to give PDF handouts and figured out how to export things.
It was a bit painful to learn, but quite useful overall.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now my website is under org management :D&lt;/p>
&lt;/li>
&lt;li>
&lt;p>And whenever some new requirement comes up, org-mode is my first port of
call, because &lt;em>crucially&lt;/em>, &lt;strong>everything works with everything else&lt;/strong>. In
seamless composability resides the power of the ecosystem that has grown
atop org-mode, both within the world of Emacs, and without it.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Sometimes I have to put in annoyingly extra effort to make some new add-on
requirement play well with my other requirements. But each time I&amp;rsquo;ve come away
knowing that effort was way lower than having to find, shortlist, pick and
learn an entire new tool with its own user interface, opinionated workflow,
inevitable workarounds, and maybe incompatible data format (not plain org text).&lt;/p>
&lt;p>For the small price of occasional annoyance, I get to keep using my exact
same workflow for everything. This has been a surprise win that is hard to
explain in words, especially in today&amp;rsquo;s world where standalone apps have
normalised disconnected silos. In hindsight, I didn&amp;rsquo;t really know exactly how
much I would come to value composability. I do. A lot!&lt;/p>
&lt;p>Which is why, now you will have to pry org-mode from my cold dead hands.&lt;/p>
&lt;h2 id="some-common-objections-and-questions">Some common objections and questions&lt;/h2>
&lt;p>A reader may rightfully complain about several parts of this blog post, as
well as the strangeness of Org Mode.&lt;/p>
&lt;h3 id="bleh-a-church-of-emacs-evangelist-dot-dot-dot">Bleh! A Church of Emacs evangelist&amp;hellip;&lt;/h3>
&lt;p>Sorry, &lt;a href="https://www.emacswiki.org/emacs/ChurchOfEmacs">programmer in-joke&lt;/a> :-)&lt;/p>
&lt;p>Orgmode became culturally easy for me as I was already using the venerable
Emacs editor, but my ardour has little to do with my affiliation with the
Church of Emacs. It has everything to do with &lt;em>utility&lt;/em>. Utility is contextual.
Which, for me, is &amp;ldquo;to write things down such that I can use it all usefully
in (many) other ways&amp;rdquo;.&lt;/p>
&lt;p>Besides, Emacs is no longer the only useful interface to org. Which, in fact,
makes me want to stick with org-mode even more. Growing support is easing
collaboration via org files.&lt;/p>
&lt;h3 id="but-seriously-emacs-winkwink-amirite">But seriously, Emacs winkwink, amirite?&lt;/h3>
&lt;p>Yes, it is a valid question because Emacs contains the canonical, complete
implementation of org-mode. Many people use Emacs &lt;em>just&lt;/em> for org-mode.&lt;/p>
&lt;p>But also, seriously, no.&lt;/p>
&lt;p>Because not even the most hardcore &lt;em>Emacs&lt;/em> org-mode users use all of org-mode.
One has particular requirements, which are likely serviceable by particular
apps and tools enumerated below.&lt;/p>
&lt;p>See, it&amp;rsquo;s just like normal people and spreadsheets. Not even the guru-est of
y&amp;rsquo;all use all of your spreadsheet software. Or like normal people, normal pens,
and normal paper. Even a child can use that stuff, but I&amp;rsquo;ll eat my hat if
you go to bed with my handwriting and wake up an ace calligrapher. BUT, you
will probably be able to wake up with a pretty good idea, scribble it down
and maybe change the world (if you can read my hand).&lt;/p>
&lt;p>Utility is contextual, remember?&lt;/p>
&lt;p>So here are ways to use org-mode without Emacs, for useful-to-you purposes,
without even caring it is orgmode text underneath.&lt;/p>
&lt;p>Mobile, Web, and Desktop apps:&lt;/p>
&lt;ul>
&lt;li>mobile: &lt;a href="https://orgro.org/">Orgro&lt;/a>, a mobile Org Mode file viewer for iOS and Android&lt;/li>
&lt;li>mobile: &lt;a href="https://plainorg.com/">Plain Org&lt;/a>, org text view and editor for iOS&lt;/li>
&lt;li>mobile: &lt;a href="https://www.orgzly.com/">Orgzly&lt;/a>, org text viewer and editor for Android
(I use this on my phone, and sync notes to my PC with Dropbox).&lt;/li>
&lt;li>mobile: &lt;a href="https://beorg.app/">beorg&lt;/a> for iOS (tasks, projects, notes)&lt;/li>
&lt;li>mobile: &lt;a href="https://flathabits.com/">flathabits&lt;/a>, inspired by Atomic Habits, with
all your data stored in org files&lt;/li>
&lt;li>web+desktop: &lt;a href="https://logseq.com/">logseq&lt;/a>, a privacy-first, open-source knowledge base&lt;/li>
&lt;li>web: &lt;a href="https://organice.200ok.ch/">organise&lt;/a>, web-based org text editor and viewer&lt;/li>
&lt;li>web: &lt;a href="https://braintool.org/">braintool.org&lt;/a>, a Chrome plugin &amp;ldquo;to easily
capture and categorize all the information and knowledge you want to keep
track of, right at the point you discover it or create it&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>Text Editors (apart from Emacs):&lt;/p>
&lt;ul>
&lt;li>You can type &lt;a href="https://orgmode.org/quickstart.html">org markup text&lt;/a> (syntax)
in any text editor, even Notepad.&lt;/li>
&lt;li>Vim: &lt;a href="https://github.com/nvim-orgmode/orgmode">https://github.com/nvim-orgmode/orgmode&lt;/a>&lt;/li>
&lt;li>Atom: &lt;a href="https://atom.io/packages/org-mode">https://atom.io/packages/org-mode&lt;/a>&lt;/li>
&lt;li>VSCode: &lt;a href="https://github.com/vscode-org-mode/vscode-org-mode">https://github.com/vscode-org-mode/vscode-org-mode&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>A variety of utilities to:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://orgmode.org/tools.html">Publish, Import, Export, Parse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://orgmode.org/worg/org-tools/index.html">More community-enumerated tools&lt;/a> for the same&lt;/li>
&lt;li>Even Github, Gitlab etc. support org markup these days!&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;m sure more people are making and releasing tools backed by org-mode text.&lt;/p>
&lt;p>The future is bright!&lt;/p>
&lt;h3 id="but-what-if-one-app-is-not-enough">But what if one app is not enough?&lt;/h3>
&lt;p>Having your stuff written in a standard portable format like Org Mode text
can become very useful, if you need / want to transcend your current app.
But, until such time, feel free to use one app for one thing today (say tasks),
and another one for another reason (say note taking), and yet another for,
say, habits.&lt;/p>
&lt;p>As long as those org-mode based apps don&amp;rsquo;t lock in your data (most don&amp;rsquo;t),
then odds are that you will be able to roll all your use cases under one
single app later. Worst case, if no other sufficiently capable app is
available, or if the app you&amp;rsquo;re using shuts down, Emacs will be there to
fall back on!&lt;/p>
&lt;p>Now, Emacs is unfortunately oddball because of half a century of conceptual
baggage. Most commonly, it fetches derision for its notoriously awkward
keyboard shortcuts. That is mainly because Emacs was already old by the time
the PC mouse became mainstream. Keyboards were the only standard method to
talk to computers. Also the key combinations feel strange because they don&amp;rsquo;t
make keyboards like they used to &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>BUT, Emacs accepts you as you are!&lt;/p>
&lt;p>Beneath its curmudgeonly exterior &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, it is perhaps &lt;em>the&lt;/em> most
accessible software application out there &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>!&lt;/p>
&lt;p>Even I, after so many years of using Emacs org-mode, know barely a handful
of very frequently-used keyboard shortcuts (TABTAB to expand tree structures,
Shift-TAB to collapse them, ALT-up/down to move trees etc.). Most of the time
I just search for commands in the Emacs command menu system (ALT-x followed
by a guess for the name of the org command, e.g. &lt;code>ALT-x org export&lt;/code>, and the
system shows me command options with &amp;lsquo;export&amp;rsquo; in the name).&lt;/p>
&lt;p>Emacs will always be a great choice because org-mode is built into Emacs.
So the complete feature set of org-mode is available with zero configuration.
Just install Emacs, mouse-open-create a new &lt;code>.org&lt;/code> file and start typing text.&lt;/p>
&lt;h3 id="but--sexy-vc-funded-app">But (sexy VC-funded app)?&lt;/h3>
&lt;p>Immersed as I was, in a herd of Emacsen, I started to value some things a lot.&lt;/p>
&lt;p>Offline-first being one, which box OneNote checked off handsomely. &lt;em>BUT&lt;/em>
proprietary data formats became deal-breakers too. It pains me that I can&amp;rsquo;t
trivially access my old OneNote dump to snicker at that cocky past-suit-me.&lt;/p>
&lt;p>The cool new tools have also failed to entice me away. Frankly, OneNote&amp;rsquo;s UX
and capability 15 years ago hands-down beats most of them. Which may also be
why da noo cool don&amp;rsquo;t impress. But that&amp;rsquo;s less worse than the fact that that
The Cloud is the new proprietary data format. If my OneNote notes were in The
Cloud, and The Cloud &amp;ldquo;accidentally&amp;rdquo; chose to lock me out, I wouldn&amp;rsquo;t even be
able to dream of snickering at past-suit-me.&lt;/p>
&lt;p>So I now value &lt;em>&lt;strong>local first&lt;/strong>&lt;/em>, which implies &lt;em>full&lt;/em> data ownership, with
content in a highly portable format, without rigid dependence on 3rd parties,
especially not networks or remote services.&lt;/p>
&lt;p>Of course, I now enjoy the specter of losing my backups, but I prefer being
(ir)responsible to myself over being beholden to the mysterious demigods that
reside in The Cloud Computer. Also, I&amp;rsquo;m used to it since my OneNote days.
Suits can be responsible too, you know.&lt;/p>
&lt;p>Now, &lt;em>&amp;ldquo;Your life in plain text&amp;rdquo;&lt;/em>, as the org website says, is an absolute
must-have. Plus, it gives me everything I liked in OneNote and more.&lt;/p>
&lt;p>&amp;ldquo;Win, Win.&amp;rdquo;, as the Suits say.&lt;/p>
&lt;h3 id="but-isn-t-org-mode-a-productivity-app">But isn&amp;rsquo;t org-mode a productivity app?&lt;/h3>
&lt;p>No. It is fundamentally about writing in a structured plain text data format.&lt;/p>
&lt;p>Carsten Dominic created it to be a &amp;ldquo;system of note taking and project planning&amp;rdquo;,
with the insight that we think of tasks in context of projects. So it makes
a lot of sense to unify prose-writing with denoting TODOs and project meta
information directly in context of the prose.&lt;/p>
&lt;p>Now, here&amp;rsquo;s the nuance. While org prescribes a certain &lt;em>syntax&lt;/em> to structure
text and to describe meta-information, it does &lt;em>not&lt;/em> prescribe or force &lt;em>any
one method&lt;/em>, to interpret and use the text; e.g. GTD or Kanban or GANTT or
what have you.&lt;/p>
&lt;p>Besides, &amp;ldquo;productivity&amp;rdquo; means different things to different people. If your
old man who types with two fingers routinely invents large scale industrial
systems (at least one per year), you too would have a rather different view
of what &amp;ldquo;productivity&amp;rdquo; means, and what tools one needs to be productive,
compared to the many Internet subcultures and gurus who are each passionately
vocal about their version of tomato timers.&lt;/p>
&lt;p>Anyway, it turns out that given structured text and maybe associated metadata,
one can build interesting use-cases and workflows that consume the content
as a data structure.&lt;/p>
&lt;p>Lastly, we don&amp;rsquo;t &lt;em>have&lt;/em> to think in &amp;ldquo;productivity&amp;rdquo; terms. The basic &amp;ldquo;outline&amp;rdquo;
way of writing text is &lt;em>absolutely fine and useful&lt;/em> just by itself. Because
writing = thinking. And because structured writing tool can help us easily
structure / restructure our thinking. And because even if we share it as-is,
our text is at least legible to anyone regardless of their text reading tool.&lt;/p>
&lt;p>Like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-org" data-lang="org">*&lt;span style="font-weight:bold"> Top level headline&lt;/span>
some text
&lt;span style="color:#75715e">**&lt;/span> A second level
some other text
&lt;span style="color:#75715e">***&lt;/span> A third level
still other text
&lt;span style="color:#75715e">***&lt;/span> Another Third level
more still other text
*&lt;span style="font-weight:bold"> Another top level headline&lt;/span>
*&lt;span style="font-weight:bold"> Lord of the Rings&lt;/span>
My favorite scenes are (in this order)
&lt;span style="color:#66d9ef">1.&lt;/span> The attack of the Rohirrim
&lt;span style="color:#66d9ef">+ &lt;/span>Eowyn&amp;#39;s fight with the witch king
a. this was already my favorite scene in the book
b. I really like Miranda Otto.
&lt;span style="color:#66d9ef">3.&lt;/span> Peter Jackson being shot by Legolas
&lt;span style="color:#66d9ef">- &lt;/span>on DVD only
He makes a really funny face when it happens.
But in the end, no individual scenes matter but the film as a whole.
Important actors in this film are:
&lt;span style="color:#66d9ef">- &lt;/span>Elijah Wood :: He plays Frodo
&lt;span style="color:#66d9ef">- &lt;/span>Sean Astin :: He plays Sam, Frodo&amp;#39;s friend. I still remember him
very well from his role as Mikey Walsh in &lt;span style="font-style:italic">/The Goonies/&lt;/span>.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="but-why-org-instead-of-markdown">But why org instead of markdown?&lt;/h3>
&lt;p>OK, so I don&amp;rsquo;t dislike markdown, I just like org much better. I&amp;rsquo;m facing off
org v/s md because md is popular and widespread. Org Mode isn&amp;rsquo;t. Naturally,
org &lt;em>looks&lt;/em> odd in comparison, at first glance. But really, they have plenty
in common.&lt;/p>
&lt;p>For one, there are several flavours of markdown, each with their own syntax
for how to describe text. Org Mode syntax is not very different. The general
concepts remain similar. So all one really needs is a &lt;a href="https://orgmode.org/quickstart.html">syntax cheat sheet&lt;/a>
for org.&lt;/p>
&lt;p>Every other benefit of writing in structured plaintext remains available to
me, including fine-grained version control, maximum portability, prose-like
legibility, publishing to any other format (PDF, html, tex, odf, asciidoc,
as well as various markdown variants).&lt;/p>
&lt;p>To me, paying the cost of learning org syntax was well worth it because it
afforded me access to text structured in one standard format, with better
usability, functionality, and historical support than the various markdowns.
I think this article makes a good case for learning org syntax:
&lt;a href="https://karl-voit.at/2017/09/23/orgmode-as-markup-only/">Org Mode Is One of the Most Reasonable Markup Languages to Use for Text&lt;/a>&lt;/p>
&lt;p>Plus, org text is explicitly designed to double as a raw datastructure that
can be used to drive workflows, like showing presentations, or interactive
notebooks, or project management etc. This design choice is explicitly &lt;em>not&lt;/em>
the mandate of most other plaintext document formats.&lt;/p>
&lt;h2 id="help-where-do-i-even-begin">Help! &lt;em>Where do I even begin&lt;/em>?&lt;/h2>
&lt;p>This is a common problem because orgmode has become A Lot!&lt;/p>
&lt;p>Whatever you want to achieve will almost always be possible, if not through
a special-purpose org-mode app, then through &lt;em>Emacs&lt;/em> org-mode. Being free to
do anything is great, but it is also bewildering!&lt;/p>
&lt;p>I&amp;rsquo;d say eat the Elephant one bite at a time, in a problem/solution format,
and that too only as long as you&amp;rsquo;re hungry.&lt;/p>
&lt;p>Method:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Review the intro on the front page of the &lt;a href="https://orgmode.org/quickstart.html">org-mode website&lt;/a>,
see the features, and the quickstart, to get an idea of what it&amp;rsquo;s like.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Consider &lt;em>&amp;ldquo;I want to do X. Can org-mode help me?&amp;quot;&lt;/em> where X is &lt;strong>the most
important&lt;/strong> thing for &lt;strong>you&lt;/strong>. The answer will almost certainly be &lt;em>&amp;ldquo;Yes m&amp;rsquo;lorx,
this way please.&amp;quot;&lt;/em>. See if any of the apps I listed previously, fit your
requirement.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then do &lt;strong>only that X&lt;/strong> and see if it works for you. If you find yourself
reaching for your orgmode app all the time, for X, then you know you have
a winner. This trick keeps things simple, which should give you a strong
sense of utility. It should also keep switching costs low if it fails you
for X. In that case, your data is yours, so you can take it to another app.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you can solve your X admirably, then you can think about your other
Y/Z/PQR requirements and start solving them. Maybe in the same app or maybe
in a second and third app. Many apps is fine because your data format is
the same and you would have an escape hatch from the app. Again, consulting
the org-mode website will help match Y/Z/PQR to org.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="shiny-brain-food-for-your-imagination">Shiny brain-food for your imagination&lt;/h2>
&lt;p>I love to watch/read tutorials, HOWTOs, essays, trick-shots etc. published by
org super-fans and super-users. Lots of inspiration exists out there! I don&amp;rsquo;t
know what I don&amp;rsquo;t know!&lt;/p>
&lt;p>Whenever I am stuck, I go to one of these resources:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://orgmode.org/worg/exporters/beamer/tutorial.html">orgmode.org&lt;/a> is the canonical reference manual.&lt;/li>
&lt;li>&lt;a href="https://orgmode.org/worg/exporters/beamer/tutorial.html">Worg&lt;/a> is full of gold (tips, tricks, tutorials, hacks).&lt;/li>
&lt;/ul>
&lt;p>Whenever I&amp;rsquo;m looking for inspiration, I go to these resources:&lt;/p>
&lt;ul>
&lt;li>Document: norang&amp;rsquo;s &lt;strong>epic&lt;/strong> &lt;a href="http://doc.norang.ca/org-mode.html">life in orgmode&lt;/a> page&lt;/li>
&lt;li>Document: EH Neilsen&amp;rsquo;s &lt;a href="http://ehneilsen.net/notebook/orgExamples/org-examples.html">Emacs org-mode examples and cookbook&lt;/a>
that shows how to make org into a full-bore computing environment.&lt;/li>
&lt;li>Demo: Carsten Dominic&amp;rsquo;s timeless presentation
&amp;ldquo;&lt;a href="https://www.youtube.com/watch?v=oJTwQvgfgMM">Emacs Org-mode - a system for note-taking and project planning&lt;/a>&amp;rdquo;&lt;/li>
&lt;li>Demo: Youtuber Rainer Konig has published a &lt;strong>fantastic&lt;/strong> series of short,
clear tutorials of the many &lt;a href="https://www.youtube.com/playlist?list=PLVtKhBrRV%5FZkPnBtt%5FTD1Cs9PJlU0IIdE">things one can do with Org&lt;/a>.&lt;/li>
&lt;li>Demo: &lt;a href="https://www.youtube.com/watch?v=FtieBc3KptU">Emacs For Writers&lt;/a> by Jay Dixit,
a widely-published science writer who is a non-programmer.&lt;/li>
&lt;li>Demo: &lt;a href="https://www.youtube.com/watch?v=SzA2YODtgK4">Getting Started With Org Mode&lt;/a>, for nerds of all feather.&lt;/li>
&lt;li>Demo: &lt;a href="https://www.youtube.com/watch?v=0g9BcZvQbXU">Consistent Technical Documents Using Emacs and Org Mode&lt;/a>&lt;/li>
&lt;li>Demo: How m&amp;rsquo;colleague &lt;a href="https://twitter.com/suvratapte">Suvrat&lt;/a> uses Emacs org-mode&amp;rsquo;s
&amp;ldquo;Org Capture&amp;rdquo; feature &lt;a href="https://www.youtube.com/watch?v=tFt6plDQm58">to stay in flow&lt;/a> while programming.&lt;/li>
&lt;li>Demo: How m&amp;rsquo;colleague &lt;a href="https://www.youtube.com/watch?v=KZoQ4EkfDPo">Vedang&lt;/a> uses Emacs org-mode
to run his whole life, as a team lead, project manager, and fallible human.&lt;/li>
&lt;li>Search &amp;ldquo;orgmode&amp;rdquo; in YouTube for &lt;em>lots&lt;/em> more!&lt;/li>
&lt;/ul>
&lt;p>And if you need help getting started or getting un-stuck or advancing your
org-life, email me! (&lt;em>weblog&lt;/em> at this site).&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>OneNote came complete with always-on auto-save, outline text, checklists, cross linking, multiple notebooks, categories/tags, search, export, email and calendar integration. Even multimedia embeds, text-to-speech, text extraction from images, audio notes, exports etc. All available on-PC, sans Internet. But, I also used Ray Ozzie&amp;rsquo;s Groove app (Dropbox a decade before Dropbox, and apparently reincarnated as Microsoft OneDrive), so syncing was seamless too. And all this was available for the price of an expensive but lifetime software license plus a piece of your soul. Cheap for me as a Suit, and so I lapped it up. Like I said, it&amp;rsquo;s about utility and it was &lt;em>fantastic&lt;/em>. Absent org-mode, and assuming I were still a suit, and assuming MS did not screw up OneNote, and assuming MS OneNote were the only good enough game in town, you might have even stood a sliver of a chance to convince today-me to turn a blind eye to the horrible inhumane spyware that Windows is today &lt;em>because&lt;/em> it also has OneNote. But of course, I would probably have rather suffered the ignominy of paying Apple an arm a leg and one&amp;rsquo;s personal liberty for access to their increasingly walled-in walled gardens, if their MS Office package had a good enough OneNote. Come on MS! Why undo the wonderful accessibility work y&amp;rsquo;all are doing on the one hand, by allowing customer data to be weaponised for ads or &amp;ldquo;personalisation&amp;rdquo; or whatever? Anyway, I&amp;rsquo;m grateful for Linux. Both those other ships have sailed for me. Now if only NVIDIA stopped being such insufferable asses about those graphics drivers. Yeah, there is no pleasing some people.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>I wish they would take a lesson from the late great &lt;a href="https://en.wikipedia.org/wiki/Space-cadet%5Fkeyboard">Space Cadet&lt;/a> keyboard. Once I saw that, I couldn&amp;rsquo;t un-see it. Ever since I always reconfigure keyboard layouts of my computers, to put CTRL (and META / ALT) under our thumbs, the way the Spirits of the Computer intended.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>The vast majority of Emacs users are gentlenerds. Alas, odds are that the crabby trollish subset will project out of the ether into your browser window schooling you about How You Are Doing It All Wrong By Using The Mouse. Smile and close the browser tab. Allow them to rail into the void. You do you.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>Ref: &lt;a href="https://www.youtube.com/watch?v=oJTwQvgfgMM">Emacs Org-mode - a system for note-taking and project planning&lt;/a> by Carsten Dominik, the inventor of org-mode. The video was curated by TV Raman, a blind-since-childhood programmer, who uses org-mode and who also created &amp;ldquo;Emacspeak&amp;rdquo; - Emacs for the Blind. For the more fortunate of us, though some Emacs default settings are weird, and though much of the language to explain Emacs is annoyingly crufty and old, it may be worth adapting to the oddities. Honestly, one doesn&amp;rsquo;t need to learn much to derive use out of Emacs org-mode. That said, if you want all the familiarity of your Mouse and keyboard shortcuts, then by all means configure Emacs to fit your needs. That is its forte! Many &amp;ldquo;starter kits&amp;rdquo; are available, to remove the burden of figuring out how to do so. &lt;a href="https://github.com/corvideon/mousemacs">mousemacs&lt;/a> seems to be quite nice. Hit me up if you need help setting it up (&lt;em>weblog&lt;/em> at this site)!&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content></item><item><title>n ways to FizzBuzz in Clojure</title><link>/posts/n-ways-to-fizzbuzz-in-clojure/</link><pubDate>Fri, 25 Mar 2022 01:55:51 +0530</pubDate><guid>/posts/n-ways-to-fizzbuzz-in-clojure/</guid><description>&lt;p>FizzBuzz is everywhere. Every programmer passes through its rite of passage,
or at least bears witness to another. Over the years, many gentlenerds have
taken it upon themselves to discover ever new ways to incant those hoary symbols.&lt;/p>
&lt;p>I hereby enjoin these few drops of Clojure to that roiling ocean of FizzBuzzery.&lt;/p>
&lt;p>The brainwave here is to (mis)use the feature set of Clojure and its standard
library to cook up as many ways to encode FizzBuzz as one can muster (or steal).
If all goes well, this post will receive many updates. If it goes &lt;em>really&lt;/em>
well, all sorts of bad ideas and clever foot-guns will be discovered and used.&lt;/p>
&lt;p>The creative constraint is this: any FizzBuzz, however terrible or hilarious,
&lt;em>must also be useful&lt;/em>. It should have reason to exist and should reveal some
real-world Clojure thinking.&lt;/p>
&lt;p>That means no &lt;a href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition">FizzBuzzEnterpriseEdition&lt;/a>
but also no Dylan Beattie&amp;rsquo;s brilliant &lt;a href="https://www.youtube.com/watch?v=6avJHaC3C2U&amp;amp;t=3350s">FizzBuzz in RockStar&lt;/a>.
So sorry!&lt;/p></description><content>&lt;p>FizzBuzz is everywhere. Every programmer passes through its rite of passage,
or at least bears witness to another. Over the years, many gentlenerds have
taken it upon themselves to discover ever new ways to incant those hoary symbols.&lt;/p>
&lt;p>I hereby enjoin these few drops of Clojure to that roiling ocean of FizzBuzzery.&lt;/p>
&lt;p>The brainwave here is to (mis)use the feature set of Clojure and its standard
library to cook up as many ways to encode FizzBuzz as one can muster (or steal).
If all goes well, this post will receive many updates. If it goes &lt;em>really&lt;/em>
well, all sorts of bad ideas and clever foot-guns will be discovered and used.&lt;/p>
&lt;p>The creative constraint is this: any FizzBuzz, however terrible or hilarious,
&lt;em>must also be useful&lt;/em>. It should have reason to exist and should reveal some
real-world Clojure thinking.&lt;/p>
&lt;p>That means no &lt;a href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition">FizzBuzzEnterpriseEdition&lt;/a>
but also no Dylan Beattie&amp;rsquo;s brilliant &lt;a href="https://www.youtube.com/watch?v=6avJHaC3C2U&amp;amp;t=3350s">FizzBuzz in RockStar&lt;/a>.
So sorry!&lt;/p>
&lt;p>Not to be indelicate, but I will state the problem before proceeding.&lt;/p>
&lt;blockquote>
&lt;p>Fizz buzz is a group word game for children to teach them about division.
Players take turns to count incrementally, replacing any number divisible by
three with the word &amp;ldquo;fizz&amp;rdquo;, and any number divisible by five with the word &amp;ldquo;buzz&amp;rdquo;.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Fizz%5Fbuzz">https://en.wikipedia.org/wiki/Fizz%5Fbuzz&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Needless to say, they mean natural numbers starting at 1 when they say &amp;ldquo;numbers&amp;rdquo;.&lt;/p>
&lt;p>Phew that was rough on the ego. Let us compose ourselves for a minute.&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;p>OK, onward.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#usage-guide">Usage guide&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#reading-the-code">Reading the code&lt;/a>&lt;/li>
&lt;li>&lt;a href="#running-the-code">Running the code&lt;/a>&lt;/li>
&lt;li>&lt;a href="#complaining-about-the-code">Complaining about the code&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#le-fizzbuzz-classique">Le FizzBuzz Classique&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#le-fizzbuzz-classique-est-mort-%C3%A0-clojure-dot-d%C3%A9sol%C3%A9">Le FizzBuzz Classique est mort à Clojure. Désolé :(&lt;/a>&lt;/li>
&lt;li>&lt;a href="#le-fizzbuzz-classique-remedied">Le FizzBuzz Classique, remedied&lt;/a>&lt;/li>
&lt;li>&lt;a href="#le-fizzbuzz-classique-dissected">Le FizzBuzz Classique, dissected&lt;/a>&lt;/li>
&lt;li>&lt;a href="#le-fizzbuzz-classique-doseq-d">Le FizzBuzz Classique, doseq&amp;rsquo;d&lt;/a>&lt;/li>
&lt;li>&lt;a href="#le-fizzbuzz-classique-doall-d">Le FizzBuzz Classique, doall&amp;rsquo;d&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#little-functions-are-good">Little functions are good!&lt;/a>&lt;/li>
&lt;li>&lt;a href="#map-reduce-for-fizzbuzz">map reduce for FizzBuzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#domain-driven-design-fizzbuzz">Domain Driven Design FizzBuzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#actually-domain-driven-fizzbuzz">Actually Domain Driven FizzBuzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#fizzbuzz-by-construction">FizzBuzz by construction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#interlude-all-the-fizz-buzzes-so-far">Interlude: all the fizz-buzzes so far&lt;/a>&lt;/li>
&lt;li>&lt;a href="#peano-fizzbuzz">Peano FizzBuzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#dispatch-buzz">Dispatch Buzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#embarrassingly-parallel-fizzbuzz">Embarrassingly Parallel FizzBuzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#oop-buzz">OOP Buzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#non-destructive-fizzbuzz">Non-Destructive FizzBuzz&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#composite-data-buzz">Composite Data Buzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#clojure-spec-d-buzz">Clojure Spec&amp;rsquo;d Buzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#wicked-pprint-buzz">Wicked pprint Buzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#tagged-literal-buzz">Tagged Literal Buzz&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#interlude-what-more-could-we-possibly-decomplect">Interlude: What more could we possibly decomplect?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#transducery-buzz">Transducery Buzz&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#what-are-we-decomplecting">What are we decomplecting?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#demo-one-computation-and-output-format-pulled-apart">Demo One: Computation and &lt;em>Output&lt;/em> format pulled apart&lt;/a>&lt;/li>
&lt;li>&lt;a href="#demo-two-computation-and-input-format-pulled-apart-dot">Demo Two: Computation and &lt;em>Input&lt;/em> format pulled apart.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#demo-three-use-only-the-xform-as-a-calculator">Demo Three: Use &lt;em>only&lt;/em> the xform as a calculator&lt;/a>&lt;/li>
&lt;li>&lt;a href="#further-reading">Further reading&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#buzz">&lt;!-- raw HTML omitted -->TODO&lt;!-- raw HTML omitted --> Buzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#acknowledgments">Acknowledgments&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="usage-guide">Usage guide&lt;/h2>
&lt;h3 id="reading-the-code">Reading the code&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Find the &lt;code>check-all-fizz-buzzers&lt;/code> function below, for usage examples.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We use functions only from Clojure&amp;rsquo;s standard library (clojure.core).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Lookup unfamiliar functions at &lt;a href="https://clojuredocs.org/quickref">https://clojuredocs.org/quickref&lt;/a>, helpfully
illustrated with community-contributed examples.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="running-the-code">Running the code&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>If you don&amp;rsquo;t already have &lt;a href="https://clojure.org/guides/getting%5Fstarted">Clojure installed&lt;/a>,
you can run the code online at &lt;a href="https://tryclojure.org/">https://tryclojure.org/&lt;/a> (fully client-side,
but minimalist), or at &lt;a href="https://repl.it/languages/clojure">https://repl.it/languages/clojure&lt;/a> (feature-rich
web-based IDE, but requires signup).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Preferably, copy over code as you go along. Try it out bit by bit.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you are in a hurry, find the &amp;ldquo;Interlude&amp;rdquo; section and copy over all the
code from there.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Finally, run &lt;code>(check-all-fizz-buzzers)&lt;/code> to see if it all works as expected.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="complaining-about-the-code">Complaining about the code&lt;/h3>
&lt;ul>
&lt;li>If I&amp;rsquo;ve made bugs in the Code or the English (possible) or made egregious
remarks (very possible), please write to &lt;em>weblog&lt;/em> at this website. I&amp;rsquo;ll
fix the bugs.&lt;/li>
&lt;/ul>
&lt;p>Right, then. Shall we begin?&lt;/p>
&lt;h2 id="le-fizzbuzz-classique">Le FizzBuzz Classique&lt;/h2>
&lt;p>In the beginning, one might trawl the Clojure standard library for familiar,
safe-looking words and accidentally discover &lt;code>for&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
Python or Javascript gentlenerds may say &lt;em>&amp;ldquo;Ooh, List Comprehension. Nice!&amp;quot;&lt;/em>,
and bang out &lt;em>Le FizzBuzz Classique&lt;/em>. Java or C# gentlenerds may struggle a
lot more, because Clojure has no &lt;code>Class&lt;/code>. We are sorry for this disappointment.
Please follow the Python for now.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>fizz-buzz-classic
[num-xs]
(for [n num-xs]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(zero? (rem n &lt;span style="color:#ae81ff">15&lt;/span>)) (println &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>)
(zero? (rem n &lt;span style="color:#ae81ff">3&lt;/span>)) (println &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>)
(zero? (rem n &lt;span style="color:#ae81ff">5&lt;/span>)) (println &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>)
&lt;span style="color:#e6db74">:else&lt;/span> (println n))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you will evaluate it &lt;em>in&lt;/em> the &amp;ldquo;REPL&amp;rdquo;, et voilà! Something
très familiar!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">user=&amp;gt; (&lt;span style="color:#a6e22e">fizz-buzz-classic&lt;/span> (list &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>))
&lt;span style="color:#ae81ff">1&lt;/span>
Fizz
Buzz
FizzBuzz
&lt;span style="color:#ae81ff">16&lt;/span>
(&lt;span style="color:#a6e22e">nil&lt;/span> nil nil nil nil)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Except for that pesky last line full of nils. But like, whatever. It worked.).&lt;/p>
&lt;h3 id="le-fizzbuzz-classique-est-mort-à-clojure-dot-désolé">Le FizzBuzz Classique est mort à Clojure. Désolé :(&lt;/h3>
&lt;p>Sadly, the spurious nils are the least of your woes. You just fell prey to
something called &amp;ldquo;Laziness&amp;rdquo;, and the code is dead on arrival, but you don&amp;rsquo;t
know it yet because evaluating &lt;em>in&lt;/em> the &amp;ldquo;REPL&amp;rdquo; obscures this fact.&lt;/p>
&lt;p>Welcome to Functional Programming (FP) with lazy sequences, which is &lt;em>awesome&lt;/em>,
but which is also one of the double edges of Clojure that will cut you if you
come here with set ideas about How Things Ought To Work.&lt;/p>
&lt;p>Saying it in French (however broken) felt gentler, somehow.&lt;/p>
&lt;p>At this point, you might accuse me of setting you up with this strawman &lt;code>for&lt;/code>.
In response, I might simply wait for your production to blow up. Unknowing
mixing of laziness and side effects reliably trips up all programmers new to
Clojure &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Luckily we can avoid going down that rabbit hole &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> entirely, because
there is a more pressing problem that makes &lt;em>Le FizzBuzz Classique&lt;/em> look
severely defective to this Clojurist&amp;rsquo;s FP-addled brain. Fixing that makes the
point of lazy sequences moot, as a nice bonus.&lt;/p>
&lt;h3 id="le-fizzbuzz-classique-remedied">Le FizzBuzz Classique, remedied&lt;/h3>
&lt;p>Behold this cleaned up version.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>lazybuzz
[num-xs]
(for [n num-xs]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(zero? (rem n &lt;span style="color:#ae81ff">15&lt;/span>)) &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
(zero? (rem n &lt;span style="color:#ae81ff">3&lt;/span>)) &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
(zero? (rem n &lt;span style="color:#ae81ff">5&lt;/span>)) &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">:else&lt;/span> n)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yes, &lt;code>println&lt;/code> is no more, and&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">user=&amp;gt; (&lt;span style="color:#a6e22e">lazybuzz&lt;/span> (list &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>))
(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Compare the shape of the collection of nils seen classically, with what we see
now. They are both sequences with the same number of items, &lt;em>but&lt;/em> the new one
contains useful values (insert :trollface: :).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">user=&amp;gt; (&lt;span style="color:#a6e22e">fizz-buzz-classic&lt;/span> (list &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span>))
&lt;span style="color:#ae81ff">1&lt;/span>
Fizz
Buzz
FizzBuzz
&lt;span style="color:#ae81ff">19&lt;/span>
(&lt;span style="color:#a6e22e">nil&lt;/span> nil nil nil nil) &lt;span style="color:#75715e">; 5 prints, 5 nils&lt;/span>
user=&amp;gt; (&lt;span style="color:#a6e22e">lazybuzz&lt;/span> (list &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span>))
(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span>) &lt;span style="color:#75715e">; no prints, 1 value containing 5 values&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Well, that&amp;rsquo;s because all expressions in Clojure return a value. &lt;code>println&lt;/code>
creates a side effect of printing and has a return value of &lt;code>nil&lt;/code>. Thus for
each item in the input range, the &amp;ldquo;impure&amp;rdquo; classic version prints to the REPL,
collects the return value of each println (nil), and returns that collection.&lt;/p>
&lt;p>The &amp;ldquo;purified&amp;rdquo; fizz-buzz simply calculates a result for each branch and the
&lt;code>for&lt;/code> returns the accumulated result. And now the results are printed inside
parentheses, which is, like, sure whatever. At least it &lt;em>looks&lt;/em> like it&amp;rsquo;s
doing the right calculations &lt;em>and&lt;/em> the pesky nils are gone, so we can move on?&lt;/p>
&lt;p>Not so fast.&lt;/p>
&lt;h3 id="le-fizzbuzz-classique-dissected">Le FizzBuzz Classique, dissected&lt;/h3>
&lt;p>To FizzBuzz creatively in Clojure, we must examine &lt;em>and avoid&lt;/em> the defects of
the classic version, which are as follows.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Broken behaviour&lt;/strong>: &lt;code>println&lt;/code> alters the state of the world and thus
injects non-determinism into an otherwise purely functional calculation.
This is anathema &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> to Clojurists (and FP practitioners at large).&lt;/li>
&lt;li>&lt;strong>Broken API contract&lt;/strong>: We get back a useless collection nils, instead of the
result of a calculation that we can use further. We prefer to always write
functions that return useful values.&lt;/li>
&lt;li>&lt;strong>Broken time model&lt;/strong>: Effects want to happen &amp;ldquo;now&amp;rdquo; (here, printing to
some output device), while lazy computations want to happen &amp;ldquo;maybe never&amp;rdquo;
(here, a definition that maps the domain of a collection of countless
numbers to the domain of FizzBuzz). Effects and laziness can be made to
pair well, &lt;em>but only when&lt;/em> we define them separately from the get go, and
have some third way of joining them together safely when needed. For now,
you could do worse than lasering this into your brain: &amp;ldquo;Never mix (side)
effects and laziness.&amp;rdquo;.&lt;/li>
&lt;li>&lt;strong>Broken aesthetic&lt;/strong>: We like our functions to do one job, and do it well.
Printing things is a &lt;em>second&lt;/em> job, and as Messers Hal and Gerry like to
say in SICP &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>, &amp;ldquo;That&amp;rsquo;s George&amp;rsquo;s problem.&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;p>Henceforth, all functions shall be pure calculations, and we will rely on
our metaphorical George &amp;ldquo;the REPL&amp;rdquo; Ableman to handle all our print jobs.&lt;/p>
&lt;p>As an added benefit, writing pure functions makes laziness such a good friend,
that we don&amp;rsquo;t even need to acknowledge its presence.&lt;/p>
&lt;p>Yet another benefit is that we won&amp;rsquo;t have to burn hundreds of words to apologise
for broken code &lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>See? Such passion. I wasn&amp;rsquo;t joking when I said &amp;ldquo;looks severely defective to me&amp;rdquo; &lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>.&lt;/p>
&lt;h3 id="le-fizzbuzz-classique-doseq-d">Le FizzBuzz Classique, doseq&amp;rsquo;d&lt;/h3>
&lt;p>Maybe you still aren&amp;rsquo;t convinced. &lt;code>println&lt;/code> is such a global standard. &lt;em>Easy&lt;/em> &lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>.
So you might dig into the standard library more and come up with &lt;code>doseq&lt;/code> to
eliminate laziness&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>doseq-fizz-buzz
[num-xs]
(doseq [n num-xs]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(zero? (rem n &lt;span style="color:#ae81ff">15&lt;/span>)) (println &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>)
(zero? (rem n &lt;span style="color:#ae81ff">3&lt;/span>)) (println &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>)
(zero? (rem n &lt;span style="color:#ae81ff">5&lt;/span>)) (println &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>)
&lt;span style="color:#e6db74">:else&lt;/span> (println n))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And declare victory&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">user=&amp;gt; (&lt;span style="color:#a6e22e">doseq-fizz-buzz&lt;/span> (list &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span>))
&lt;span style="color:#ae81ff">1&lt;/span>
Fizz
Buzz
FizzBuzz
&lt;span style="color:#ae81ff">19&lt;/span>
nil &lt;span style="color:#75715e">; maybe we can live with just one nil?&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But the code is still fatally broken for the other reasons, and now &lt;em>it is
also worse&lt;/em>, because this implementation cannot say &amp;ldquo;here are &lt;em>all&lt;/em> the
fizzbuzzes&amp;rdquo;. Only a lazy definition can say this &lt;em>and&lt;/em> allow you to carry on
computing. Besides, &lt;code>doseq&lt;/code> is meant for cases when we &lt;em>want to cause&lt;/em> side
effects. And the functional Clojurist almost never &lt;em>wants&lt;/em> to.&lt;/p>
&lt;p>Remember the children&amp;rsquo;s game definition of FizzBuzz? It is beautiful because
it &lt;em>does not&lt;/em> say &amp;ldquo;FizzBuzz only for the first K numbers&amp;rdquo;. Now if you go
DuckDuck search the standard coding interview version of the question, what
do you find? &amp;ldquo;Write a program that prints the numbers from 1 to 100
such that&amp;hellip;&amp;rdquo;.&lt;/p>
&lt;p>Boo.&lt;/p>
&lt;h3 id="le-fizzbuzz-classique-doall-d">Le FizzBuzz Classique, doall&amp;rsquo;d&lt;/h3>
&lt;p>As a famous TV detective would say; &amp;ldquo;Oh, just one other thing.&amp;rdquo;. Here are ways
to break your programs. And if you are feeling suitably adventurous, to also
test the stability of your employment.&lt;/p>
&lt;p>The following invocation of &lt;code>lazybuzz&lt;/code> in your &lt;code>-main&lt;/code> would not be fine,
assuming you wanted to do something useful with it. But would also not
precipitate anything terrible.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>-main
&lt;span style="color:#e6db74">&amp;#34;The entry point to your microservice.&amp;#34;&lt;/span>
[&lt;span style="color:#f92672">&amp;amp;&lt;/span> args]
&lt;span style="color:#75715e">;; Do things ...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m about to do...&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">;; No block, no foul.&lt;/span>
(&lt;span style="color:#a6e22e">lazybuzz&lt;/span> (&lt;span style="color:#a6e22e">range&lt;/span>))
&lt;span style="color:#75715e">;; Sure, why not ...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m done!&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is a good way to break your software &lt;!-- raw HTML omitted -->and&lt;!-- raw HTML omitted --> print FizzBuzzes to the console
indefinitely (or at least as long as your computer can make new numbers).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>-main
&lt;span style="color:#e6db74">&amp;#34;The entry point to your microservice.&amp;#34;&lt;/span>
[&lt;span style="color:#f92672">&amp;amp;&lt;/span> args]
&lt;span style="color:#75715e">;; Do things ...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m about to do...&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">;; Spin wheels until the numbers run out.&lt;/span>
(&lt;span style="color:#a6e22e">doseq-fizz-buzz&lt;/span> (&lt;span style="color:#a6e22e">range&lt;/span>))
&lt;span style="color:#75715e">;; Maybe never ...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m done!&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As a funner party trick, if you make a computer (VM) with a bad output device
(or redirect program output to /dev/full), then you can crash or hang your
program. If you discover it crashes, feel free to daemonise it and make an
infinitely restarting JVM process that does nothing but burn CPU cycles.
Take that, cryptominers!&lt;/p>
&lt;p>To be fair, you can also break programs with lazy evaluation, with the added
benefit of doing it silently. But at least you are forced to say &lt;code>doall&lt;/code>,
which might make you feel at least a tiny bit guilty.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>-main
&lt;span style="color:#e6db74">&amp;#34;The entry point to your microservice.&amp;#34;&lt;/span>
[&lt;span style="color:#f92672">&amp;amp;&lt;/span> args]
&lt;span style="color:#75715e">;; Do things...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m about to do...&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">;; Spin wheels silently, until OOM or no more numbers,&lt;/span>
&lt;span style="color:#75715e">;; whichever happens first.&lt;/span>
(doall (&lt;span style="color:#a6e22e">lazybuzz&lt;/span> (&lt;span style="color:#a6e22e">range&lt;/span>)))
&lt;span style="color:#75715e">;; Maybe not ...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m done!&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To see if you can get &lt;em>fired&lt;/em> by solving fizzbuzz (now that&amp;rsquo;s a concept,
innit?), you can ship to production &lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup> the&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>doseq version, to fill up your log files with fizzbuzz. They will fill
up really fast. Faster than logrotate.&lt;/li>
&lt;li>doall lazybuzz version, to confuse the daylights out of everyone, at
least until your process dies with OOM.&lt;/li>
&lt;li>badly daemonised verison, to enjoy repeated restart cycles through crashes
from number overflows and/or OOMs.&lt;/li>
&lt;li>Or something actually dangerous&amp;hellip;&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>-main
&lt;span style="color:#e6db74">&amp;#34;The entry point to your microservice.&amp;#34;&lt;/span>
[&lt;span style="color:#f92672">&amp;amp;&lt;/span> args]
&lt;span style="color:#75715e">;; Do things...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m about to do...&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">;; Your /thought/ you were going to /do/ something useful here.&lt;/span>
(&lt;span style="color:#a6e22e">fizz-buzz-classic&lt;/span> (&lt;span style="color:#a6e22e">range&lt;/span>))
&lt;span style="color:#75715e">;; You now falsely believe you did something useful ...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m done!&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I assure you, experienced Clojurists are no longer grinning at the tomfoolery.
Many of us have shipped &lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup> (or &lt;em>almost&lt;/em> shipped) this category of
bugs to prod. Not fun.&lt;/p>
&lt;p>OK, now I consider &lt;em>Le Cheval Classique&lt;/em> suitably flogged postmortem, and
yourself suitably &lt;em>Caveat Emptor&lt;/em>-ed.&lt;/p>
&lt;p>Now we will FizzBuzz joyously.&lt;/p>
&lt;h2 id="little-functions-are-good">Little functions are good!&lt;/h2>
&lt;p>Once we remove the &lt;em>ick&lt;/em> of &lt;code>println&lt;/code> from our code, we can see further room
for improvement. &lt;code>(zero? (rem n divisor))&lt;/code> is not only a common pattern,
it is actually a distinct &lt;em>idea&lt;/em>, viz. &amp;ldquo;Is &lt;code>n&lt;/code> &lt;em>divisible&lt;/em> by &lt;code>divisor&lt;/code>?&amp;rdquo;.&lt;/p>
&lt;p>We can name it locally, with &lt;code>let&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>letbuzz
[num-xs]
(for [n num-xs]
(&lt;span style="color:#66d9ef">let &lt;/span>[divisible? (&lt;span style="color:#66d9ef">fn &lt;/span>[n1 n2] (zero? (rem n1 n2)))] &lt;span style="color:#75715e">; locally-bound lambda&lt;/span>
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">15&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">:else&lt;/span> n))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>However&lt;/em>, this definition of divisibility is generally applicable to numbers,
so it makes sense to define a top-level global concept.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>divisible?
&lt;span style="color:#e6db74">&amp;#34;True when the remainder of n1/n2 is zero. e.g. (divisible? 4 2) =&amp;gt; true&amp;#34;&lt;/span>
(&lt;span style="color:#66d9ef">fn &lt;/span>[n1 n2] (zero? (rem n1 n2))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yep, &lt;code>defn&lt;/code> is just &lt;code>def&lt;/code> + &lt;code>fn&lt;/code> under the hood, and we can conveniently
write the same thing as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>divisible?
&lt;span style="color:#e6db74">&amp;#34;True when the remainder of n1/n2 is zero. e.g. (divisible? 4 2) =&amp;gt; true&amp;#34;&lt;/span>
[n1 n2]
(zero? (rem n1 n2)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also use &lt;code>comp&lt;/code> to define divisibility more succinctly.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>divisible?
&lt;span style="color:#e6db74">&amp;#34;True when the remainder of n1/n2 is zero. e.g. (divisible? 4 2) =&amp;gt; true&amp;#34;&lt;/span>
(comp zero? rem))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since the various implementations of &lt;code>divisible?&lt;/code> are all pure functions,
they are drop-in replacements for each other (&amp;ldquo;referentially transparent&amp;rdquo;).
Use whichever version you like best.&lt;/p>
&lt;p>It may seem silly to write such tiny functions, but we earn a lot of firepower
by lifting out named domain concepts, &lt;em>especially&lt;/em> the simple ones, because
we can &lt;em>compose&lt;/em> them flexibly to express other domain concepts as needed.&lt;/p>
&lt;h2 id="map-reduce-for-fizzbuzz">map reduce for FizzBuzz&lt;/h2>
&lt;p>Here&amp;rsquo;s a doozy. By putting FizzBuzz &lt;em>logic&lt;/em> inside &lt;code>for&lt;/code>, we have in fact
deeply intertwined &lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup> two very distinct computations; viz. sequence
generation, and choice-making.&lt;/p>
&lt;p>Suppose we lifted out the decision logic into its own function?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>basic-buzz
&lt;span style="color:#e6db74">&amp;#34;We can also trivially rewrite this with &amp;#39;condp&amp;#39;.
&lt;/span>&lt;span style="color:#e6db74"> ref: https://clojuredocs.org/clojure.core/condp&amp;#34;&lt;/span>
[n]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">15&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">:else&lt;/span> n))
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; Unsurprisingly...&lt;/span>
(&lt;span style="color:#a6e22e">basic-buzz&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) =&amp;gt; &lt;span style="color:#ae81ff">1&lt;/span>
(&lt;span style="color:#a6e22e">basic-buzz&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">basic-buzz&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">basic-buzz&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can bring back &lt;code>for&lt;/code> this way&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>all-fizz-buzzes
(for [n (rest (&lt;span style="color:#a6e22e">range&lt;/span>))]
(&lt;span style="color:#a6e22e">basic-buzz&lt;/span> n)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But our new choice opens up the design space, because we can directly say
&amp;ldquo;this is just a mapping of the domain of numbers to the domain of FizzBuzz&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>all-fizz-buzzes
(map basic-buzz (rest (&lt;span style="color:#a6e22e">range&lt;/span>))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now since &lt;code>map&lt;/code> is conceptually just a special case of &lt;code>reduce&lt;/code>, we could write
the following. &lt;em>However&lt;/em> in Clojure, &lt;code>map&lt;/code> is lazy but &lt;code>reduce&lt;/code> is eager, and
we only use &lt;em>reduce&lt;/em> when we want to force a final calculation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>just-some-fizz-buzzes
(reduce (&lt;span style="color:#66d9ef">fn &lt;/span>[result n]
(conj result
(&lt;span style="color:#a6e22e">basic-buzz&lt;/span> n)))
[]
&lt;span style="color:#75715e">;; the classic programmer&amp;#39;s problem statement&lt;/span>
(range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">101&lt;/span>)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once again, we earned more compositional power by lifting out another small
concept. Let&amp;rsquo;s do some more of that.&lt;/p>
&lt;h2 id="domain-driven-design-fizzbuzz">Domain Driven Design FizzBuzz&lt;/h2>
&lt;p>We can further define concepts specific to the business domain of FizzBuzz.
This opens up our design space even more.&lt;/p>
&lt;p>Before that I&amp;rsquo;ll make one small tweak to help us express ourselves better.
I&amp;rsquo;ll rearrange the argument list of &lt;code>divisible?&lt;/code> so that the &amp;ldquo;more constant&amp;rdquo;
argument is placed first, and successively more variable argument(s) are
placed successively. Also rely on &amp;ldquo;truthiness&amp;rdquo; in Clojure to imply yes/no.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>divisible?
&lt;span style="color:#e6db74">&amp;#34;Given a number &amp;#39;n&amp;#39;, return the given word (truthy) when it is divisible
&lt;/span>&lt;span style="color:#e6db74"> by the divisor, or nil otherwise (falsey).&amp;#34;&lt;/span>
[divisor the-word n]
(when (zero? (rem n divisor))
the-word))
(&lt;span style="color:#66d9ef">def &lt;/span>fizzes?
&lt;span style="color:#e6db74">&amp;#34;Is a given number divisible by 3?&amp;#34;&lt;/span>
(partial divisible? &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>))
(&lt;span style="color:#66d9ef">def &lt;/span>buzzes?
&lt;span style="color:#e6db74">&amp;#34;Is a given number divisible by 5?&amp;#34;&lt;/span>
(partial divisible? &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>))
(&lt;span style="color:#66d9ef">def &lt;/span>fizzbuzzes?
&lt;span style="color:#e6db74">&amp;#34;Is a given number divisible by 3 and 5?&amp;#34;&lt;/span>
(partial divisible? &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can rewrite &lt;code>basic-buzz&lt;/code> using &lt;code>or&lt;/code>, which short-circuits, and
returns the first &lt;em>truthy&lt;/em> value it encounters. You will see this construct
in real-world Clojure code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>or-buzz
&lt;span style="color:#e6db74">&amp;#34;Just like conditional matching, but exploit short-circuit behaviour of &amp;#39;or&amp;#39;.
&lt;/span>&lt;span style="color:#e6db74"> Sadly, order of conditionals still matters.&amp;#34;&lt;/span>
[n]
(or (&lt;span style="color:#a6e22e">fizzbuzzes?&lt;/span> n)
(&lt;span style="color:#a6e22e">buzzes?&lt;/span> n)
(&lt;span style="color:#a6e22e">fizzes?&lt;/span> n)
n))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We argued that we are essentially expressing a choice, and that we can even
do it with &lt;code>juxt&lt;/code>, because once we grok &lt;code>juxt&lt;/code>, we want to use it &lt;em>everywhere&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>juxt-buzz
&lt;span style="color:#e6db74">&amp;#34;juxt for fun:
&lt;/span>&lt;span style="color:#e6db74"> e.g. ((juxt f g h) 42) -&amp;gt; [(f 42) (g 42) (h 42)]
&lt;/span>&lt;span style="color:#e6db74"> cf. https://clojuredocs.org/clojure.core/juxt
&lt;/span>&lt;span style="color:#e6db74"> Sadly, order of conditional checks still matters, which combined with
&lt;/span>&lt;span style="color:#e6db74"> the nil-punning that&amp;#39;s going on here is too subtle for production use.&amp;#34;&lt;/span>
[n]
(some identity ((&lt;span style="color:#a6e22e">juxt&lt;/span> fizzbuzzes? buzzes? fizzes? identity)
n)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yeah, that&amp;rsquo;s a head-scratcher. Best leave it back at home.&lt;/p>
&lt;h2 id="actually-domain-driven-fizzbuzz">Actually Domain Driven FizzBuzz&lt;/h2>
&lt;p>You might protest that well actually the clever little functions, in fact,
express the domain of the &lt;em>solution&lt;/em> (the business of calculating FizzBuzz),
not the domain of the &lt;em>problem&lt;/em> (arithmetic representation of FizzBuzz).&lt;/p>
&lt;p>And even though I flunked maths a lot, I would concur. So here goes nothing&amp;hellip;&lt;/p>
&lt;p>15 is the least common multiple of the prime factors. Suppose we cook up an
encoding scheme based on remainders of 15, and write it down as a lookup table?
We can then find &lt;code>(rem n 15)&lt;/code>, and look up the answer to FizzBuzz in the table.&lt;/p>
&lt;p>Why do a lookup table? Well, what is the simplest possible function? A literal
hard-coded lookup table!&lt;/p>
&lt;p>In Clojure, we can use hash-maps to write down look-up tables.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">&lt;span style="color:#75715e">;; A table of remainders of 15, in a hash-map.&lt;/span>
{&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And here is a very fun and useful fact. Clojure hash-maps are not just inert
data. They also behave as functions of their keys. We can literally call
&lt;code>({:a 42} :a)&lt;/code> and get back 42. Noice!&lt;/p>
&lt;p>So suppose we define a global lookup table?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>rem15-&amp;gt;fizz-buzz
{&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>})
(&lt;span style="color:#a6e22e">comment&lt;/span>
(&lt;span style="color:#a6e22e">rem15-&amp;gt;fizz-buzz&lt;/span> (rem &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>)) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">rem15-&amp;gt;fizz-buzz&lt;/span> (rem &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>)) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">rem15-&amp;gt;fizz-buzz&lt;/span> (rem &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>)) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">rem15-&amp;gt;fizz-buzz&lt;/span> (rem &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>)) =&amp;gt; nil
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See the &lt;code>nil&lt;/code> returned for &amp;ldquo;no result found&amp;rdquo;? If you were paying attention
to the nil punning &lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup>, and the short-circuiting &lt;code>or&lt;/code>, you might get
the following idea. And you would not be wrong.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>or-rem15-buzz
[n]
(or (&lt;span style="color:#a6e22e">rem15-&amp;gt;fizz-buzz&lt;/span> (rem n &lt;span style="color:#ae81ff">15&lt;/span>))
n))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But we can be more right by using the &lt;code>get&lt;/code> function, which is designed for
use with hash-maps, and which allows us to conveniently specify a fallback
value for the &amp;ldquo;not found&amp;rdquo; case.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>get-rem15-buzz
[n]
(get rem15-&amp;gt;fizz-buzz
(rem n &lt;span style="color:#ae81ff">15&lt;/span>)
n))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Not to press the point, but they are referentially transparent.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(= (map or-rem15-buzz (range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>))
(map get-rem15-buzz (range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You may have also astutely noted that, in both the implementations above,
the order of calculation ceases to matter. Now we are doing maths.&lt;/p>
&lt;h2 id="fizzbuzz-by-construction">FizzBuzz by construction&lt;/h2>
&lt;p>Closely related to remainder lookup tables, we can make the observation that
FizzBuzz is cyclical in modulo 3, 5, and 15. So we can directly define the
&lt;em>idea&lt;/em> of FizzBuzz in those terms.&lt;/p>
&lt;p>This FizzBuzz is correctly ordered &lt;em>by definition&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>mod-cycle-buzz
&lt;span style="color:#e6db74">&amp;#34;We can declare a lazy sequence of FizzBuzz as modulo 3, 5, 15.
&lt;/span>&lt;span style="color:#e6db74"> The sequence is ordered by definition.&amp;#34;&lt;/span>
(&lt;span style="color:#66d9ef">let &lt;/span>[n identity
f (constantly &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>)
b (constantly &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>)
fb (constantly &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>)]
(cycle [n n f
n b f
n n f
b n f
n n fb])))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, Clojure&amp;rsquo;s &lt;code>map&lt;/code> is not only lazy, it can also apply a function of &lt;code>n&lt;/code>
arguments over &lt;code>n&lt;/code> collections until any one of the collections is exhausted.
So we can&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>all-fizz-buzzes
(map (&lt;span style="color:#66d9ef">fn &lt;/span>[f n] (&lt;span style="color:#a6e22e">f&lt;/span> n))
mod-cycle-buzz &lt;span style="color:#75715e">; countless modulo pattern&lt;/span>
(rest (&lt;span style="color:#a6e22e">range&lt;/span>)))) &lt;span style="color:#75715e">; countless sequence of numbers&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we think in terms of the prime factors 3 and 5, along with modulo cycles,
it may inspire a generalised version of fizzbuzz, like so.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>any-mod-cycle-buzz
&lt;span style="color:#e6db74">&amp;#34;Given a number and a sequence of words mapping to prime factors,
&lt;/span>&lt;span style="color:#e6db74"> either return the corresponding word-version for the number position,
&lt;/span>&lt;span style="color:#e6db74"> or the number itself, if no prime factor exists.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Basically, the set of words should map to set of prime factors.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> We also don&amp;#39;t make any assumptions about order of words here. It is up
&lt;/span>&lt;span style="color:#e6db74"> to the caller to choose whatever sequence they please.&amp;#34;&lt;/span>
[num &lt;span style="color:#f92672">&amp;amp;&lt;/span> words]
(or (&lt;span style="color:#a6e22e">not-empty&lt;/span> (reduce str words))
num))
(map any-mod-cycle-buzz
(range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>)
(cycle [nil nil &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>])
(cycle [nil nil nil nil &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>]))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And last but not least, this interpretation allows us to express the arithmetic
&lt;em>identity&lt;/em> of the whole category of FizzBuzzes, which is, just the number
sequence itself. (As in, the identity of + is 0 and that of * is 1).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(map any-mod-cycle-buzz
(range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But then again, I&amp;rsquo;ve flunked maths too often to be confident about any of this.
Please complain to me if I&amp;rsquo;m wrong.&lt;/p>
&lt;h2 id="interlude-all-the-fizz-buzzes-so-far">Interlude: all the fizz-buzzes so far&lt;/h2>
&lt;p>I&amp;rsquo;ll drop this mini &lt;em>pièce de résistance&lt;/em> (for now), and pause for a breather.
I&amp;rsquo;ve copied down all the fizz-buzz variants (minus doc strings for brevity).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>all.them.fizz.buzzers)
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz map) &lt;span style="color:#75715e">; now, what `map` can do fizz-buzz can too&lt;/span>
&lt;span style="color:#75715e">;; Le FizzBuzz Classique Functional&lt;/span>
(&lt;span style="color:#66d9ef">defn &lt;/span>basic-buzz
[n]
(&lt;span style="color:#66d9ef">let &lt;/span>[divisible? (comp zero? rem)]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">15&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">:else&lt;/span> n)))
&lt;span style="color:#75715e">;; Branching logic FizzBuzzes&lt;/span>
(&lt;span style="color:#66d9ef">defn &lt;/span>divisible?
[divisor the-word n]
(when (zero? (rem n divisor))
the-word))
(&lt;span style="color:#66d9ef">def &lt;/span>fizzes? (partial divisible? &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>))
(&lt;span style="color:#66d9ef">def &lt;/span>buzzes? (partial divisible? &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>))
(&lt;span style="color:#66d9ef">def &lt;/span>fizzbuzzes? (partial divisible? &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>))
(&lt;span style="color:#66d9ef">defn &lt;/span>or-buzz
[n]
(or (&lt;span style="color:#a6e22e">fizzbuzzes?&lt;/span> n)
(&lt;span style="color:#a6e22e">buzzes?&lt;/span> n)
(&lt;span style="color:#a6e22e">fizzes?&lt;/span> n)
n))
(&lt;span style="color:#66d9ef">defn &lt;/span>juxt-buzz
[n]
(some identity
((&lt;span style="color:#a6e22e">juxt&lt;/span> fizzbuzzes? buzzes? fizzes? identity)
n)))
&lt;span style="color:#75715e">;; More mathematical FizzBuzzes&lt;/span>
(&lt;span style="color:#66d9ef">def &lt;/span>rem15-&amp;gt;fizz-buzz
{&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>})
(&lt;span style="color:#66d9ef">defn &lt;/span>or-rem15-buzz
[n]
(or (&lt;span style="color:#a6e22e">rem15-&amp;gt;fizz-buzz&lt;/span> (rem n &lt;span style="color:#ae81ff">15&lt;/span>))
n))
(&lt;span style="color:#66d9ef">defn &lt;/span>get-rem15-buzz
[n]
(get rem15-&amp;gt;fizz-buzz
(rem n &lt;span style="color:#ae81ff">15&lt;/span>)
n))
(&lt;span style="color:#66d9ef">def &lt;/span>mod-cycle-buzz
(&lt;span style="color:#66d9ef">let &lt;/span>[n identity
f (constantly &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>)
b (constantly &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>)
fb (constantly &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>)]
(cycle [n n f
n b f
n n f
b n f
n n fb])))
(&lt;span style="color:#66d9ef">defn &lt;/span>any-mod-cycle-buzz
[num &lt;span style="color:#f92672">&amp;amp;&lt;/span> words]
(or (&lt;span style="color:#a6e22e">not-empty&lt;/span> (reduce str words))
num))
&lt;span style="color:#75715e">;; Inspect and check the fizz-buzzes&lt;/span>
(&lt;span style="color:#66d9ef">defn &lt;/span>call-all-fizz-buzzers
[range-of-buzzees]
[(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> basic-buzz
range-of-buzzees)
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> or-buzz
range-of-buzzees)
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> juxt-buzz
range-of-buzzees)
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> or-rem15-buzz
range-of-buzzees)
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> get-rem15-buzz
range-of-buzzees)
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> (&lt;span style="color:#66d9ef">fn &lt;/span>[f n] (&lt;span style="color:#a6e22e">f&lt;/span> n))
mod-cycle-buzz
range-of-buzzees)
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> any-mod-cycle-buzz
range-of-buzzees
(cycle [nil nil &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>])
(cycle [nil nil nil nil &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>]))])
(&lt;span style="color:#66d9ef">defn &lt;/span>check-all-fizz-buzzers
&lt;span style="color:#e6db74">&amp;#34;Return true if all known fizz-buzzers produce equal results
&lt;/span>&lt;span style="color:#e6db74"> for the programmer&amp;#39;s FizzBuzz for numbers 1 to 100&amp;#34;&lt;/span>
[]
(apply = (&lt;span style="color:#a6e22e">call-all-fizz-buzzers&lt;/span> (range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">101&lt;/span>))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And lest we forget, let us flog the dead horse one last time.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>severely-broken-buzz
&lt;span style="color:#e6db74">&amp;#34;Please don&amp;#39;t do this in Clojure.&amp;#34;&lt;/span>
[n]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">15&lt;/span>) (println &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>)
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">3&lt;/span>) (println &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>)
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">5&lt;/span>) (println &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>)
&lt;span style="color:#e6db74">:else&lt;/span> (println n)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The mind is abuzz drafting moaaaar variants&amp;hellip; Stay tuned!&lt;/p>
&lt;h2 id="peano-fizzbuzz">Peano FizzBuzz&lt;/h2>
&lt;p>Since we are computing with natural numbers, we can express FizzBuzz in terms
of the &amp;ldquo;Successor&amp;rdquo; operation of Peano arithmetic.&lt;/p>
&lt;p>However, we have to modify our number system a bit to make it work right.
We define a PeanoBuzz number to be a pair of a natural number and its FizzBuzz
counterpart. The &lt;em>PeanoBuzz&lt;/em> number system starts at &lt;code>[0 0]&lt;/code>.&lt;/p>
&lt;p>We can enjoy the fruits of compositionality that we planted earlier.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>all.them.fizz.buzzers)
(&lt;span style="color:#66d9ef">def &lt;/span>rem15-&amp;gt;fizz-buzz
{&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>})
(&lt;span style="color:#66d9ef">defn &lt;/span>get-rem15-buzz
[n]
(get rem15-&amp;gt;fizz-buzz
(rem n &lt;span style="color:#ae81ff">15&lt;/span>)
n))
(&lt;span style="color:#66d9ef">def &lt;/span>S
&lt;span style="color:#e6db74">&amp;#34;The PeanoBuzz number system starting at [0 0] is closed under
&lt;/span>&lt;span style="color:#e6db74"> this definition of Successor.&amp;#34;&lt;/span>
(comp (&lt;span style="color:#a6e22e">juxt&lt;/span> identity get-rem15-buzz)
inc
first))
(&lt;span style="color:#66d9ef">def &lt;/span>all-peano-buzzes
(iterate S [&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>]))
(&lt;span style="color:#a6e22e">comment&lt;/span>
(= (take &lt;span style="color:#ae81ff">16&lt;/span> all-peano-buzzes)
[[&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>] [&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] [&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>]
[&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>] [&lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>]
[&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>]
[&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>] [&lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>] [&lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>]
[&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>]
[&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>] [&lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span>]
[&lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>] [&lt;span style="color:#ae81ff">13&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span>] [&lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span>]
[&lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>]]))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since we have a &lt;code>S&lt;/code> that closes over the &lt;em>PeanoBuzz&lt;/em> number system, I wonder
if we can satisfy all the &lt;a href="https://en.wikipedia.org/wiki/Peano%5Faxioms">Peano Axioms&lt;/a>? Probably another blog post :)&lt;/p>
&lt;p>Incidentally, we can trivially map the domain of PeanoBuzz back into the
domain of FizzBuzz.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>all.them.fizz.buzzers)
(= (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> basic-buzz
(range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">101&lt;/span>))
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> second
(take &lt;span style="color:#ae81ff">100&lt;/span> (rest all-peano-buzzes))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We are already half way to Lambda Calculus / Church Numerals. But going there
will side-track our FizzBuzz expedition way too much. So I&amp;rsquo;ll leave the Church
Numerals version as an exercise to the reader &lt;sup id="fnref:13">&lt;a href="#fn:13" class="footnote-ref" role="doc-noteref">13&lt;/a>&lt;/sup>. Try to make it
so that that we can define an &lt;code>all-church-nums-buzz&lt;/code> and slot it into the
&lt;code>fizz-buzz&lt;/code> checks we already have.&lt;/p>
&lt;h2 id="dispatch-buzz">Dispatch Buzz&lt;/h2>
&lt;p>If you squint at the conditional FizzBuzzes, like &lt;code>basic-buzz&lt;/code>, &lt;code>or-buzz&lt;/code> etc.,
you might re-see them as a &lt;em>dispatch&lt;/em> problem. And why would you be wrong?
They, like any other if-else-y construct are truth tables hard-wired to
&amp;ldquo;finalised&amp;rdquo; values or operations.&lt;/p>
&lt;p>Naturally we will follow the consummate Clojurian&amp;rsquo;s primal instinct of needing
to pry apart two things masquerading as one (&lt;em>&amp;ldquo;decomplecting&amp;rdquo;&lt;/em> &lt;sup id="fnref:14">&lt;a href="#fn:14" class="footnote-ref" role="doc-noteref">14&lt;/a>&lt;/sup>
in Clojurish). But, &lt;em>what exactly&lt;/em> are we, ah, &lt;em>decomplecting&lt;/em>? Now that is
a very interesting rabbit hole.&lt;/p>
&lt;p>In this case we are &lt;em>&amp;ldquo;separating mechanism from policy&amp;rdquo;&lt;/em> &lt;sup id="fnref:15">&lt;a href="#fn:15" class="footnote-ref" role="doc-noteref">15&lt;/a>&lt;/sup>.
Figuring out how to do this delivers a powerful, flexible method of program
design into our eager hands.&lt;/p>
&lt;p>This table shows &amp;ldquo;mechanism&amp;rdquo; and &amp;ldquo;policy&amp;rdquo; hard-wired together.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-org" data-lang="org">&amp;lt;&lt;span style="color:#e6db74">-- ------- MECHANISM -------- --&lt;/span>&amp;gt;|&amp;lt;&lt;span style="color:#e6db74">-- POLICY --&lt;/span>&amp;gt;
&lt;span style="color:#e6db74">| n divisible? 3 | n divisible? 5 | Final value |&lt;/span>
&lt;span style="color:#e6db74">|----------------+----------------+-------------|&lt;/span>
&lt;span style="color:#e6db74">| true | true | FizzBuzz |&lt;/span>
&lt;span style="color:#e6db74">| true | false | Fizz |&lt;/span>
&lt;span style="color:#e6db74">| false | true | Buzz |&lt;/span>
&lt;span style="color:#e6db74">| false | false | n |&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is an attempt to pry the two apart.&lt;/p>
&lt;p>&lt;em>&lt;strong>Mechanism&lt;/strong>&lt;/em>&lt;/p>
&lt;p>The &lt;em>&lt;strong>&amp;ldquo;mechanism&amp;rdquo;&lt;/strong>&lt;/em> here is &lt;em>any&lt;/em> function that translates a number (or more
generally, &lt;em>any&lt;/em> thing) to the two inputs of a 2-value truth table. We can
see it more clearly if we rewrite the input columns of the truth table like
this. Here &lt;code>f&lt;/code> and &lt;code>g&lt;/code> are functions of &lt;code>a&lt;/code> to Boolean.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-org" data-lang="org">&lt;span style="color:#e6db74">| (f a) | (g a) |&lt;/span>
&lt;span style="color:#e6db74">|-------+-------|&lt;/span>
&lt;span style="color:#e6db74">| true | true |&lt;/span>
&lt;span style="color:#e6db74">| true | false |&lt;/span>
&lt;span style="color:#e6db74">| false | true |&lt;/span>
&lt;span style="color:#e6db74">| false | false |&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can express this as a Clojure punction &amp;lsquo;coz (f a) (g a) is ((juxt f g) a).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>dispatch.buzz)
(&lt;span style="color:#66d9ef">defn &lt;/span>mechanism
&lt;span style="color:#e6db74">&amp;#34;Given two functions, presumably of anything -to-&amp;gt; Boolean, return
&lt;/span>&lt;span style="color:#e6db74"> a function that can construct inputs of a 2-input truth table.&amp;#34;&lt;/span>
[f? g?]
(&lt;span style="color:#a6e22e">juxt&lt;/span> f? g?))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See? Such abstract. Much general-purpose. Very decomplect. Wow.&lt;/p>
&lt;p>&lt;em>&lt;strong>Policy&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Here, we define &lt;em>&lt;strong>&amp;ldquo;policy&amp;rdquo;&lt;/strong>&lt;/em> as something having special context of FizzBuzz
that consumes input rows of the truth table and emits corresponding output fields.&lt;/p>
&lt;p>First, we specialise the abstract &lt;code>mechanism&lt;/code> to a FizzBuzz mechanism. You
may smirk &lt;sup id="fnref:16">&lt;a href="#fn:16" class="footnote-ref" role="doc-noteref">16&lt;/a>&lt;/sup>, but just you wait. There is a (multi) method to the
madness&amp;hellip;&lt;/p>
&lt;p>Here is the table we started with, rewritten for our specialisation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-org" data-lang="org">&lt;span style="color:#e6db74">| (fizzes? n) | (buzzes? n) | (mechanism fizzes? buzzes?) -&amp;gt; mfb |&lt;/span>
&lt;span style="color:#e6db74">|-------------+-------------+------------------------------------|&lt;/span>
&lt;span style="color:#e6db74">| true | true | (mfb n) =&amp;gt; &amp;#34;FizzBuzz&amp;#34; |&lt;/span>
&lt;span style="color:#e6db74">| true | false | (mfb n) =&amp;gt; &amp;#34;Fizz&amp;#34; |&lt;/span>
&lt;span style="color:#e6db74">| false | true | (mfb n) =&amp;gt; &amp;#34;Buzz&amp;#34; |&lt;/span>
&lt;span style="color:#e6db74">| false | false | (mfb n) =&amp;gt; n |&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is the intermediate step of the specialisation, viz. &lt;code>(mechanism f g) -&amp;gt; h&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>dispatch.buzz)
(&lt;span style="color:#66d9ef">defn &lt;/span>divisible?
[divisor n]
(zero? (rem n divisor)))
(&lt;span style="color:#66d9ef">def &lt;/span>fizzes? (partial divisible? &lt;span style="color:#ae81ff">3&lt;/span>))
(&lt;span style="color:#66d9ef">def &lt;/span>buzzes? (partial divisible? &lt;span style="color:#ae81ff">5&lt;/span>))
&lt;span style="color:#75715e">;; If we take the abstract mechanism and give it functions&lt;/span>
&lt;span style="color:#75715e">;; that test numbers for fizzery and buzzery, then we can&lt;/span>
&lt;span style="color:#75715e">;; construct a version of the truth table that is /concretely/&lt;/span>
&lt;span style="color:#75715e">;; specific to FizzBuzz.&lt;/span>
(&lt;span style="color:#a6e22e">comment&lt;/span>
(= (map (&lt;span style="color:#a6e22e">mechanism&lt;/span> fizzes? buzzes?)
[&lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>])
[[true true]
[true false]
[false true]
[false false]])
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we hang it all together with Clojure&amp;rsquo;s multimethods &lt;sup id="fnref:17">&lt;a href="#fn:17" class="footnote-ref" role="doc-noteref">17&lt;/a>&lt;/sup>, like so.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>dispatch.buzz)
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz map)
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz-mechanism
(&lt;span style="color:#a6e22e">mechanism&lt;/span> fizzes? buzzes?))
(&lt;span style="color:#66d9ef">defmulti &lt;/span>dispatch-buzz
&lt;span style="color:#e6db74">&amp;#34;It yields the third column of the truth table.&amp;#34;&lt;/span>
fizz-buzz-mechanism)
&lt;span style="color:#75715e">;; The /Policy/, fully realised.&lt;/span>
&lt;span style="color:#75715e">;; ((mechanism fizzes? buzzes?) n) -&amp;gt; final results&lt;/span>
(&lt;span style="color:#66d9ef">defmethod &lt;/span>dispatch-buzz [true true]
[n]
&lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>)
(&lt;span style="color:#66d9ef">defmethod &lt;/span>dispatch-buzz [true false]
[n]
&lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>)
(&lt;span style="color:#66d9ef">defmethod &lt;/span>dispatch-buzz [false true]
[n]
&lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>)
(&lt;span style="color:#66d9ef">defmethod &lt;/span>dispatch-buzz &lt;span style="color:#e6db74">:default&lt;/span>
[n]
n)
&lt;span style="color:#75715e">;; The /Policy/, applied.&lt;/span>
(&lt;span style="color:#a6e22e">comment&lt;/span>
(= (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> dispatch-buzz
[&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>])
[&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>])
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yes, &amp;lsquo;tis a wee FizzBuzz interpreter!&lt;/p>
&lt;p>(Pirouettes off-stage, gracefully.)&lt;/p>
&lt;h2 id="embarrassingly-parallel-fizzbuzz">Embarrassingly Parallel FizzBuzz&lt;/h2>
&lt;p>It turns out FizzBuzz is one of those so-called &lt;a href="https://en.wikipedia.org/wiki/Embarrassingly%5Fparallel">Embarrassingly Parallel&lt;/a> problems.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>all.them.fizz.buzzers)
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz map)
&lt;span style="color:#75715e">;; Add 1 character for parallel map.&lt;/span>
(&lt;span style="color:#66d9ef">def &lt;/span>embarrassingly-parallel-fizz-buzz pmap)
(&lt;span style="color:#a6e22e">comment&lt;/span>
(&lt;span style="color:#66d9ef">let &lt;/span>[range-of-buzzees (range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">101&lt;/span>)]
(= (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> basic-buzz
range-of-buzzees)
(&lt;span style="color:#a6e22e">embarrassingly-parallel-fizz-buzz&lt;/span> basic-buzz
range-of-buzzees)))
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I was almost too embarrassed to write this, but I&amp;rsquo;m glad good sense prevailed,
because the trivial replacement of &lt;code>map&lt;/code> with &lt;code>pmap&lt;/code> teaches a lesson.&lt;/p>
&lt;p>Parallelism is impossibly hard if we don&amp;rsquo;t have pure functions, immutability,
and laziness. When we do, it reduces to merely hard but tractable. The
proverbial single character code modification (in this case, literally so)
gets a free ride on those other constructs.&lt;/p>
&lt;p>We can see it in &lt;code>pmap&lt;/code>&amp;rsquo;s implementation. It is fairly straightforward. Fetch
its source and stare at it for a bit; &lt;code>(clojure.repl/source pmap)&lt;/code>. You will
be able to make sense of it with a bit of cross-referencing ClojureDocs.&lt;/p>
&lt;p>If your favourite language has something similar (parallel version of a
sequential function), and if you choose to compare implementations, I will
be delighted to learn from your analysis!&lt;/p>
&lt;h2 id="oop-buzz">OOP Buzz&lt;/h2>
&lt;p>What is an Object in, say, Java? It is a combination of four distinct things:&lt;/p>
&lt;ul>
&lt;li>Name (Class name / Java type)&lt;/li>
&lt;li>Structure (Class members, methods etc.)&lt;/li>
&lt;li>Behaviour (effects caused by methods)&lt;/li>
&lt;li>State (contained in the run-time instance of the Class)&lt;/li>
&lt;/ul>
&lt;p>In Clojure, &lt;em>all of these are separate&lt;/em> (&amp;ldquo;available a la carte&amp;rdquo;, in Clojurish),
the consequences of which are hard to explain sans a motivating example.&lt;/p>
&lt;p>Clojure&amp;rsquo;s approach to Polymorphism allow us to do things like this.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>oops.fizzbuzz)
(&lt;span style="color:#66d9ef">def &lt;/span>divisible? (comp zero? rem))
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz map)
&lt;span style="color:#75715e">;; Like a Java Interface, but better.&lt;/span>
(&lt;span style="color:#66d9ef">defprotocol &lt;/span>IFizzBuzz
(&lt;span style="color:#a6e22e">proto-buzz&lt;/span> [this]))
&lt;span style="color:#75715e">;; We can add new behaviour to existing types,&lt;/span>
&lt;span style="color:#75715e">;; including /any/ Java built-in type.&lt;/span>
(&lt;span style="color:#a6e22e">extend-protocol&lt;/span> IFizzBuzz
java.lang.Number
(&lt;span style="color:#a6e22e">proto-buzz&lt;/span> [this]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> this &lt;span style="color:#ae81ff">15&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> this &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> this &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">:else&lt;/span> this)))
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; Now we can do this&lt;/span>
(= (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> proto-buzz
[&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>])
[&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>])
&lt;span style="color:#75715e">;; And we can also do this&lt;/span>
(= (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> proto-buzz
[&lt;span style="color:#ae81ff">1.0&lt;/span> &lt;span style="color:#ae81ff">3.0&lt;/span> &lt;span style="color:#ae81ff">5.0&lt;/span> &lt;span style="color:#ae81ff">15.0&lt;/span> &lt;span style="color:#ae81ff">15.9&lt;/span>])
[&lt;span style="color:#ae81ff">1.0&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">15.9&lt;/span>])
&lt;span style="color:#75715e">;; WITHOUT breaking any existing Equality semantics.&lt;/span>
&lt;span style="color:#75715e">;; (= 42 42) =&amp;gt; true (long and long)&lt;/span>
&lt;span style="color:#75715e">;; (= 42 42.0) =&amp;gt; false (long and double)&lt;/span>
&lt;span style="color:#75715e">;; (= 42.0 42.0) =&amp;gt; true (double and double)&lt;/span>
&lt;span style="color:#75715e">;; Thus, this is false, as it should be.&lt;/span>
(= (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> proto-buzz
[&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>])
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> proto-buzz
[&lt;span style="color:#ae81ff">1.0&lt;/span> &lt;span style="color:#ae81ff">3.0&lt;/span> &lt;span style="color:#ae81ff">5.0&lt;/span> &lt;span style="color:#ae81ff">15.0&lt;/span> &lt;span style="color:#ae81ff">15.9&lt;/span>]))
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Not to put too fine a point on it, but Clojure is a &lt;em>far more capable&lt;/em>
Object Oriented Programming System than say Java or Kotlin, a fact which I
have personally profited from handsomely in the past &lt;sup id="fnref:18">&lt;a href="#fn:18" class="footnote-ref" role="doc-noteref">18&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Why?&lt;/p>
&lt;p>In short, Clojure cleanly solves the &amp;ldquo;&lt;a href="https://en.wikipedia.org/wiki/Expression%5Fproblem">Expression Problem&lt;/a>&amp;rdquo;.&lt;/p>
&lt;p>In long, you can&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>Watch &lt;a href="https://www.youtube.com/watch?v=kQhOlWXXl2I">Clojure Protocols Explained&lt;/a>, by Sean Devlin.&lt;/li>
&lt;li>Watch &lt;a href="https://www.infoq.com/presentations/Clojure-Expression-Problem/">Clojure&amp;rsquo;s Solutions to the Expression Problem&lt;/a>, by Chris Houser.&lt;/li>
&lt;li>Listen to &lt;a href="https://www.infoq.com/interviews/hickey-clojure-protocols/">Rich Hickey on Protocols and Clojure 1.3&lt;/a>, by Rich Hickey.&lt;/li>
&lt;li>Read &amp;ldquo;&lt;a href="https://gist.github.com/reborg/dc8b0c96c397a56668905e2767fd697f">Rich Already Answered That!&lt;/a>&amp;rdquo;, curated by reborg.
&lt;em>&amp;ldquo;A list of commonly asked questions, design decisions, reasons why Clojure
is the way it is as they were answered directly by Rich.&amp;quot;&lt;/em>&lt;/li>
&lt;li>Read the parable of &lt;a href="https://people.csail.mit.edu/gregs/ll1-discuss-archive-html/msg03277.html">The venerable master Qc Na and his student Anton&lt;/a>.
This &lt;a href="https://news.ycombinator.com/item?id=14235020">HN thread&lt;/a> also has some interesting links (and diatribes).&lt;/li>
&lt;/ul>
&lt;p>In &lt;em>very&lt;/em> short&amp;hellip; Tweet this, look smart, get paid!&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>If you do Functional Programming right, you get Object Oriented Programming
for free #Clojure. (And vice-versa e.g. #Erlang #Smalltalk #OCaml).&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Yours Truly&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="non-destructive-fizzbuzz">Non-Destructive FizzBuzz&lt;/h2>
&lt;p>&lt;code>proto-buzz&lt;/code> is a great motivating example of what I would like to call the
&lt;em>&lt;strong>Non-Destructive&lt;/strong>&lt;/em> FizzBuzz.&lt;/p>
&lt;p>All the FizzBuzz solutions seen previously, except PeanoBuzz, lose information.
This is almost always bad because its impossible to reverse information loss.
The inverse is also true. It is almost always good to &lt;em>augment&lt;/em> information.
Prefer to enrich information and retain as much as resources permit (organised
neatly, of course). Ask any lawyer or accountant or friendly neighbourhood
Clojurian which alternative would set their hair on fire.&lt;/p>
&lt;p>Here I play with some more ways to FizzBuzz non-destructively.&lt;/p>
&lt;p>As I do, I meditate upon the extra super nice thing about &lt;code>proto-buzz&lt;/code>.
Which is that we did &lt;em>not&lt;/em> have to invent a new number system or box numbers
in some composite FizzBuzz data representation &lt;em>and&lt;/em> we lost no functionality
&amp;mdash; numbers still behave exactly as we expect, with zero added overhead!&lt;/p>
&lt;h3 id="composite-data-buzz">Composite Data Buzz&lt;/h3>
&lt;p>PeanoBuzz was an example of writing FizzBuzz in terms of &amp;ldquo;composite&amp;rdquo; data.
Abstractly, that idea is basically &amp;ldquo;attach some meta-data to my things&amp;rdquo;.&lt;/p>
&lt;p>PeanoBuzz was a tuple &lt;code>[3 &amp;quot;Fizz&amp;quot;]&lt;/code>, but it could very well have been a custom
map representation, say, &lt;code>{:n 3 :fizzbuzz &amp;quot;Fizz&amp;quot;}&lt;/code>.&lt;/p>
&lt;p>We can do one better by using Clojure Records to attach full-blooded Java
types to our numbers &lt;sup id="fnref:19">&lt;a href="#fn:19" class="footnote-ref" role="doc-noteref">19&lt;/a>&lt;/sup> &lt;em>and also&lt;/em> make &amp;ldquo;composite&amp;rdquo; data, because
Records give us all the features of generic hash-maps for free.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>boxed.fizz.buzz)
(&lt;span style="color:#66d9ef">def &lt;/span>divisible? (comp zero? rem))
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz map)
(&lt;span style="color:#66d9ef">defrecord &lt;/span>Fizz [n])
(&lt;span style="color:#66d9ef">defrecord &lt;/span>Buzz [n])
(&lt;span style="color:#66d9ef">defrecord &lt;/span>FizzBuzz [n])
(&lt;span style="color:#66d9ef">defrecord &lt;/span>Identity [n])
(&lt;span style="color:#66d9ef">defn &lt;/span>boxed-buzz
[n]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">15&lt;/span>) (&lt;span style="color:#a6e22e">-&amp;gt;FizzBuzz&lt;/span> n)
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">3&lt;/span>) (&lt;span style="color:#a6e22e">-&amp;gt;Fizz&lt;/span> n)
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">5&lt;/span>) (&lt;span style="color:#a6e22e">-&amp;gt;Buzz&lt;/span> n)
&lt;span style="color:#e6db74">:else&lt;/span> (&lt;span style="color:#a6e22e">-&amp;gt;Identity&lt;/span> n)))
(&lt;span style="color:#66d9ef">def &lt;/span>all-boxed-buzzes
(map boxed-buzz
(rest (&lt;span style="color:#a6e22e">range&lt;/span>))))
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; Composite hash-map-like data!&lt;/span>
(= (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> boxed-buzz
[&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>])
[&lt;span style="color:#f92672">#&lt;/span>boxed.fizz.buzz.Identity{&lt;span style="color:#e6db74">:n&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>}
&lt;span style="color:#f92672">#&lt;/span>boxed.fizz.buzz.Fizz{&lt;span style="color:#e6db74">:n&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>}
&lt;span style="color:#f92672">#&lt;/span>boxed.fizz.buzz.Buzz{&lt;span style="color:#e6db74">:n&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>}
&lt;span style="color:#f92672">#&lt;/span>boxed.fizz.buzz.FizzBuzz{&lt;span style="color:#e6db74">:n&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>}]) &lt;span style="color:#75715e">; =&amp;gt; true&lt;/span>
&lt;span style="color:#75715e">;; Which is nondestructive!&lt;/span>
(= [&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>]
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> (comp &lt;span style="color:#e6db74">:n&lt;/span> boxed-buzz)
[&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>])) &lt;span style="color:#75715e">; =&amp;gt; true&lt;/span>
&lt;span style="color:#75715e">;; And which has real Java types!&lt;/span>
(= (map type (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> boxed-buzz [&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>]))
[boxed.fizz.buzz.Identity
boxed.fizz.buzz.Fizz
boxed.fizz.buzz.Buzz
boxed.fizz.buzz.FizzBuzz]) &lt;span style="color:#75715e">; =&amp;gt; true&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Further exercises for the dear reader!&lt;/p>
&lt;ul>
&lt;li>Re-implement PeanoBuzz using Clojure hash-maps!&lt;/li>
&lt;li>Re-re-implement PeanoBuzz with Records!&lt;/li>
&lt;li>&lt;em>Separately&lt;/em> write something that can return the classic string-or-number
equivalent of your composite types! (Hint: use multimethods and/or protocols
as appropriate).&lt;/li>
&lt;/ul>
&lt;p>Last but not least, ask yourself &amp;ldquo;But what about equality? And the rest of
arithmetic?&amp;rdquo; while comparing these with &lt;code>proto-buzz&lt;/code>.&lt;/p>
&lt;h3 id="clojure-spec-d-buzz">Clojure Spec&amp;rsquo;d Buzz&lt;/h3>
&lt;p>Off-label use of &lt;a href="https://clojure.org/guides/spec">Clojure Spec&lt;/a>&amp;rsquo;s &lt;code>conform&lt;/code> as a parser can be very handy.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>conformer.buzz)
(&lt;span style="color:#a6e22e">require&lt;/span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>[clojure.spec.alpha &lt;span style="color:#e6db74">:as&lt;/span> s])
(&lt;span style="color:#66d9ef">defn &lt;/span>divisible?
[divisor n]
(zero? (rem n divisor)))
(&lt;span style="color:#66d9ef">def &lt;/span>fizzes? (partial divisible? &lt;span style="color:#ae81ff">3&lt;/span>))
(&lt;span style="color:#66d9ef">def &lt;/span>buzzes? (partial divisible? &lt;span style="color:#ae81ff">5&lt;/span>))
(&lt;span style="color:#a6e22e">s/def&lt;/span> &lt;span style="color:#e6db74">::number&lt;/span> number?)
(&lt;span style="color:#a6e22e">s/def&lt;/span> &lt;span style="color:#e6db74">::fizzes&lt;/span> (&lt;span style="color:#a6e22e">s/and&lt;/span> &lt;span style="color:#e6db74">::number&lt;/span> fizzes?))
(&lt;span style="color:#a6e22e">s/def&lt;/span> &lt;span style="color:#e6db74">::buzzes&lt;/span> (&lt;span style="color:#a6e22e">s/and&lt;/span> &lt;span style="color:#e6db74">::number&lt;/span> buzzes?))
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; Now we can parse input data...&lt;/span>
(&lt;span style="color:#a6e22e">s/conform&lt;/span> &lt;span style="color:#e6db74">::fizzes&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e">; =&amp;gt; 3&lt;/span>
(&lt;span style="color:#a6e22e">s/conform&lt;/span> &lt;span style="color:#e6db74">::buzzes&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#75715e">; =&amp;gt; 5&lt;/span>
(&lt;span style="color:#a6e22e">s/conform&lt;/span> &lt;span style="color:#e6db74">::buzzes&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e">; =&amp;gt; :clojure.spec.alpha/invalid&lt;/span>
(&lt;span style="color:#a6e22e">s/conform&lt;/span> (&lt;span style="color:#a6e22e">s/and&lt;/span> &lt;span style="color:#e6db74">::fizzes&lt;/span> &lt;span style="color:#e6db74">::buzzes&lt;/span>) &lt;span style="color:#ae81ff">15&lt;/span>) &lt;span style="color:#75715e">; =&amp;gt; 15&lt;/span>
&lt;span style="color:#75715e">;; And we can handle non-conforming data gracefully,&lt;/span>
&lt;span style="color:#75715e">;; instead of panicking and throwing exceptions.&lt;/span>
(&lt;span style="color:#a6e22e">s/conform&lt;/span> (&lt;span style="color:#a6e22e">s/or&lt;/span> &lt;span style="color:#e6db74">::fizzes&lt;/span> &lt;span style="color:#e6db74">::buzzes&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;lol&amp;#34;&lt;/span>) &lt;span style="color:#75715e">; :clojure.spec.alpha/invalid&lt;/span>
)
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz-specs
&lt;span style="color:#e6db74">&amp;#34;Set of FizzBuzz parsers.&amp;#34;&lt;/span>
&lt;span style="color:#f92672">#&lt;/span>{&lt;span style="color:#e6db74">::fizzes&lt;/span> &lt;span style="color:#e6db74">::buzzes&lt;/span> &lt;span style="color:#e6db74">::number&lt;/span>})
(&lt;span style="color:#66d9ef">defn &lt;/span>spec-parse-buzz
&lt;span style="color:#e6db74">&amp;#34;Conform the given input to the set of specs for fizz-buzz, and return
&lt;/span>&lt;span style="color:#e6db74"> a pair of the input and a map of parsed values keyed by the parser name.&amp;#34;&lt;/span>
[x]
[x (zipmap fizz-buzz-specs
(map &lt;span style="color:#f92672">#&lt;/span>(&lt;span style="color:#a6e22e">s/conform&lt;/span> % x) fizz-buzz-specs))])
(&lt;span style="color:#66d9ef">def &lt;/span>all-spec-buzzes
(map spec-parse-buzz
(rest (&lt;span style="color:#a6e22e">range&lt;/span>))))
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; And we can...&lt;/span>
(take &lt;span style="color:#ae81ff">100&lt;/span> all-spec-buzzes)
&lt;span style="color:#75715e">;; Which gives us enriched data, like this:&lt;/span>
(= (into {} (map spec-parse-buzz [&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#e6db74">&amp;#34;lol&amp;#34;&lt;/span>]))
{&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">#&lt;/span>&lt;span style="color:#e6db74">:conformer.buzz&lt;/span>{&lt;span style="color:#e6db74">:fizzes&lt;/span> &lt;span style="color:#e6db74">:clojure.spec.alpha/invalid&lt;/span>,
&lt;span style="color:#e6db74">:buzzes&lt;/span> &lt;span style="color:#e6db74">:clojure.spec.alpha/invalid&lt;/span>,
&lt;span style="color:#e6db74">:number&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>},
&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">#&lt;/span>&lt;span style="color:#e6db74">:conformer.buzz&lt;/span>{&lt;span style="color:#e6db74">:fizzes&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>,
&lt;span style="color:#e6db74">:buzzes&lt;/span> &lt;span style="color:#e6db74">:clojure.spec.alpha/invalid&lt;/span>,
&lt;span style="color:#e6db74">:number&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>},
&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">#&lt;/span>&lt;span style="color:#e6db74">:conformer.buzz&lt;/span>{&lt;span style="color:#e6db74">:fizzes&lt;/span> &lt;span style="color:#e6db74">:clojure.spec.alpha/invalid&lt;/span>,
&lt;span style="color:#e6db74">:buzzes&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>,
&lt;span style="color:#e6db74">:number&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>},
&lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#f92672">#&lt;/span>&lt;span style="color:#e6db74">:conformer.buzz&lt;/span>{&lt;span style="color:#e6db74">:fizzes&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>,
&lt;span style="color:#e6db74">:buzzes&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>,
&lt;span style="color:#e6db74">:number&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>},
&lt;span style="color:#e6db74">&amp;#34;lol&amp;#34;&lt;/span> &lt;span style="color:#f92672">#&lt;/span>&lt;span style="color:#e6db74">:conformer.buzz&lt;/span>{&lt;span style="color:#e6db74">:fizzes&lt;/span> &lt;span style="color:#e6db74">:clojure.spec.alpha/invalid&lt;/span>,
&lt;span style="color:#e6db74">:buzzes&lt;/span> &lt;span style="color:#e6db74">:clojure.spec.alpha/invalid&lt;/span>,
&lt;span style="color:#e6db74">:number&lt;/span> &lt;span style="color:#e6db74">:clojure.spec.alpha/invalid&lt;/span>}}) &lt;span style="color:#75715e">; =&amp;gt; true&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, like off-label use of anything, this &lt;code>conform&lt;/code>-as-parser trick too
skirts the &amp;ldquo;can be a very bad idea&amp;rdquo; territory.&lt;/p>
&lt;p>YMMV.&lt;/p>
&lt;h3 id="wicked-pprint-buzz">Wicked pprint Buzz&lt;/h3>
&lt;p>&lt;a href="https://twitter.com/rdivyanshu">@rdivyanshu&lt;/a> said to add this extra &lt;a href="https://github.com/clojure/clojure/blob/b1b88dd25373a86e41310a525a21b497799dbbf2/src/clj/clojure/pprint/dispatch.clj#L175">pprint dispatcher&lt;/a>,
&lt;em>&amp;ldquo;and let no number escape fizzbuzzness when showing itself&amp;rdquo;&lt;/em>.&lt;/p>
&lt;p>Why not?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>pprint.buzz)
(&lt;span style="color:#a6e22e">require&lt;/span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>[clojure.pprint &lt;span style="color:#e6db74">:as&lt;/span> pp])
(&lt;span style="color:#66d9ef">defn &lt;/span>pprint-buzz
[n]
(&lt;span style="color:#66d9ef">let &lt;/span>[divisible? (comp zero? rem)
prettyprint (comp prn
(partial format &lt;span style="color:#e6db74">&amp;#34;%d doth %s&amp;#34;&lt;/span>))]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">15&lt;/span>) (&lt;span style="color:#a6e22e">prettyprint&lt;/span> n &lt;span style="color:#e6db74">&amp;#34;FizzBuzzeth&amp;#34;&lt;/span>)
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">3&lt;/span>) (&lt;span style="color:#a6e22e">prettyprint&lt;/span> n &lt;span style="color:#e6db74">&amp;#34;Fizzeth&amp;#34;&lt;/span>)
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">5&lt;/span>) (&lt;span style="color:#a6e22e">prettyprint&lt;/span> n &lt;span style="color:#e6db74">&amp;#34;Buzzeth&amp;#34;&lt;/span>)
&lt;span style="color:#e6db74">:else&lt;/span> (&lt;span style="color:#a6e22e">prettyprint&lt;/span> n &lt;span style="color:#e6db74">&amp;#34;not Fizzeth nor Buzzeth. Alas!&amp;#34;&lt;/span>))))
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; lol&lt;/span>
(&lt;span style="color:#f92672">#&lt;/span>&lt;span style="color:#e6db74">&amp;#39;pp/use-method&lt;/span> pp/simple-dispatch java.lang.Number pprint-buzz)
&lt;span style="color:#75715e">;; nothing to see here... you will have to look at the REPL&lt;/span>
(doseq [n [&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>]]
(&lt;span style="color:#a6e22e">pp/pprint&lt;/span> n)) &lt;span style="color:#75715e">;; lol lol lol lolllll&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You, Sir, are truly a gentlenerd and a scholar.&lt;/p>
&lt;p>Nondestructive, and hilarious to boot!&lt;/p>
&lt;h3 id="tagged-literal-buzz">Tagged Literal Buzz&lt;/h3>
&lt;p>Thinking aloud&amp;hellip;&lt;/p>
&lt;p>Clojure has a concept of &amp;ldquo;tagged literals&amp;rdquo;; plaintext labels that we can
&amp;ldquo;attach&amp;rdquo; to data &lt;em>without&lt;/em> changing the literal value of our data, &lt;em>and&lt;/em>
transmit over wires along with the data.&lt;/p>
&lt;p>Clojure provides built-in support for a small set of some fairly universal
types of literals (instant, UUID etc.). And I have used fancier tagged
literals, but only in context of other people&amp;rsquo;s libraries (&lt;a href="https://github.com/juxt/aero">juxt/aero&lt;/a>).&lt;/p>
&lt;p>How to make this work, I wonder?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>tagged.buzz)
&lt;span style="color:#75715e">;; We can do this, but how to work with it?&lt;/span>
(&lt;span style="color:#a6e22e">set!&lt;/span> *default-data-reader-fn* tagged-literal)
(&lt;span style="color:#66d9ef">def &lt;/span>tagged-buzz
&lt;span style="color:#f92672">#&lt;/span>tagged.buzz/FizzBuzzSequence [&lt;span style="color:#f92672">#&lt;/span>tagged.buzz/Fizz &lt;span style="color:#ae81ff">3&lt;/span>
&lt;span style="color:#f92672">#&lt;/span>tagged.buzz/Buzz &lt;span style="color:#ae81ff">5&lt;/span>
&lt;span style="color:#f92672">#&lt;/span>tagged.buzz/FizzBuzz &lt;span style="color:#ae81ff">15&lt;/span>
&lt;span style="color:#f92672">#&lt;/span>tagged.buzz/Number &lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: Parked for now. I&amp;rsquo;m not sure if this a reasonably real-world FizzBuzz.&lt;/p>
&lt;h2 id="interlude-what-more-could-we-possibly-decomplect">Interlude: What more could we possibly decomplect?&lt;/h2>
&lt;p>Well, in one word, &lt;em>&lt;strong>Transducers&lt;/strong>&lt;/em>.&lt;/p>
&lt;p>Which you can assume is Clojurish for &amp;ldquo;You haven&amp;rsquo;t decomplected your Clojure
quite enough just yet.&amp;rdquo;. But before we go there, a quick survey.&lt;/p>
&lt;p>Thus far, we have pulled apart the FizzBuzz problem space in many dimensions.&lt;/p>
&lt;ul>
&lt;li>Calculation v/s Effects (lifted out &lt;code>println&lt;/code>)&lt;/li>
&lt;li>Calculation v/s Sequence generation (lifted fizzbuzz logic out of &lt;code>for&lt;/code>)&lt;/li>
&lt;li>Definition v/s Realisation (lazy definitions like &lt;code>all-fizz-buzzes&lt;/code>)&lt;/li>
&lt;li>Lifted out concepts in the domain of the &lt;em>solution&lt;/em> (&lt;code>fizzes?&lt;/code> &lt;code>buzzes?&lt;/code> etc.)&lt;/li>
&lt;li>Lifted out concepts in the domain of the &lt;em>problem&lt;/em> (modulo math FizzBuzzes)&lt;/li>
&lt;li>Lifted all fizzbuzzes out of the concrete 3/5 FizzBuzz (&lt;code>any-mod-cycle-buzz&lt;/code>)&lt;/li>
&lt;li>Added Fizzbuzz-meaning to Numbers &lt;em>without&lt;/em> changing existing Number-meaning
(protocols, and maybe also tagged literals if I can make it work sensibly)&lt;/li>
&lt;li>Concrete Numbers v/s abstract representations (PeanoBuzz, &lt;code>mod-cycle-buzz&lt;/code>)&lt;/li>
&lt;li>Calculation v/s Specification (&lt;code>spec-parse-buzz&lt;/code>)&lt;/li>
&lt;li>We even teased apart &lt;em>printing context&lt;/em> (wicked &lt;code>pprint-buzz&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>Note that &lt;em>&lt;strong>all of this belongs in the real-world Clojurian&amp;rsquo;s design toolbox&lt;/strong>.&lt;/em>&lt;/p>
&lt;p>Not only do we do it &amp;ldquo;in the small&amp;rdquo;, in our little namespaces and &lt;del>monoliths&lt;/del>
polyliths, we also do it &amp;ldquo;in the large&amp;rdquo; in our data-center-spanning distributed
systems.&lt;/p>
&lt;p>But you see, in all the teasing apart so far, we &lt;em>implied&lt;/em> FizzBuzz was
in-memory sequence processing. What if we &lt;em>could not make any assumption
whatsoever&lt;/em> about data source, or data size, or data format, or process
control, or the output sink? Can we still describe FizzBuzz in some useful way?&lt;/p>
&lt;p>Well, in one word, &lt;em>&lt;strong>Transducers&lt;/strong>&lt;/em>.&lt;/p>
&lt;p>Savvy Clojurians may appreciate that text above has &lt;a href="https://clojure.org/reference/transducers#%5Fterminology">transducer signature&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>(whatever, input -&amp;gt; whatever) -&amp;gt; (whatever, input -&amp;gt; whatever)&lt;/p>
&lt;p>&amp;ldquo;&lt;a href="https://www.youtube.com/watch?v=6mTbuzafcII&amp;amp;t=1677s">Seems like a good project for the bar, later on.&lt;/a>&amp;rdquo;&lt;/p>
&lt;ul>
&lt;li>Rich Hickey&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="transducery-buzz">Transducery Buzz&lt;/h2>
&lt;p>This is really my feeble attempt to nerdsnipe you into falling into deep
abstraction territory.&lt;/p>
&lt;p>I pray that you give yourself time to &lt;em>absorb&lt;/em> transducers. Peruse the code
below. Then peruse the list of stimulating material that follows, over a
relaxed weekend with several cups of delicious artisanal Oolong to salve
the brain pain.&lt;/p>
&lt;h3 id="what-are-we-decomplecting">What are we decomplecting?&lt;/h3>
&lt;p>Because, with &lt;em>&lt;strong>transducers&lt;/strong>&lt;/em>, we will now &lt;em>also&lt;/em> pull apart:&lt;/p>
&lt;ul>
&lt;li>Data source (sequence, stream, channel, socket etc.)&lt;/li>
&lt;li>Data sink (sequence, stream, channel, socket etc.)&lt;/li>
&lt;li>Data transformer (function of any value -&amp;gt; any other value)&lt;/li>
&lt;li>Data transformation process (mapping, filtering, reducing etc.)&lt;/li>
&lt;li>Some process control (we can transduce finite data (of course) as well as
streams, and also have optional early termination in either case. I&amp;rsquo;m not
sure about first-class support for other methods like backpressure.)&lt;/li>
&lt;/ul>
&lt;p>Of course, for useful computations, we have to compose these back in some
sensible way, appropriate to the context at hand (e.g. read numbers off a
Kafka topic, FizzBuzz them, and send them to another Kafka topic, OR slurp
numbers from file on disk, FizzBuzz them, and push into an in-memory queue).&lt;/p>
&lt;p>A word of caution. As you read, you may think &amp;ldquo;Ew, he peddles oldass Unix
Pipes.&amp;quot; &lt;sup id="fnref:20">&lt;a href="#fn:20" class="footnote-ref" role="doc-noteref">20&lt;/a>&lt;/sup> (or shiny new Monads or Lambda Architecture(TM) or some
familiar-to-you generics). You won&amp;rsquo;t be &lt;em>wrong&lt;/em>. You won&amp;rsquo;t be &lt;em>right&lt;/em> either.&lt;/p>
&lt;p>Because, as is true for all sufficiently abstract abstractions, analogies
are not equivalences. Details differ deeply and your brain will hurt at first.
A lot. For example, it is &lt;em>not&lt;/em> obvious &lt;em>why&lt;/em>, but the transducer&amp;rsquo;s mandate
of &lt;em>a la carte&lt;/em> re-composition &lt;em>demands&lt;/em> that &lt;em>all&lt;/em> the new pulling apart
&lt;em>must be fully compatible&lt;/em> with &lt;em>all&lt;/em> the old pulling apart.&lt;/p>
&lt;p>&amp;lsquo;nuff said. Decomplecting our Clojure &amp;lsquo;smore in 3&amp;hellip; 2&amp;hellip; 1&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>transducery.buzz)
(&lt;span style="color:#66d9ef">def &lt;/span>divisible?
(comp zero? rem))
(&lt;span style="color:#66d9ef">defn &lt;/span>basic-buzz
[n]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">15&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">:else&lt;/span> n))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>zzzzz. snort. Old news. Whatever.&lt;/p>
&lt;h3 id="demo-one-computation-and-output-format-pulled-apart">Demo One: Computation and &lt;em>Output&lt;/em> format pulled apart&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>transducery.buzz)
&lt;span style="color:#75715e">;; Separately define /only/ the transformation &amp;#34;xform&amp;#34;&lt;/span>
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz-xform
(comp (map basic-buzz)
(take &lt;span style="color:#ae81ff">100&lt;/span>))) &lt;span style="color:#75715e">;; early termination&lt;/span>
&lt;span style="color:#75715e">;; Separately define /only/ input data&lt;/span>
(&lt;span style="color:#66d9ef">def &lt;/span>natural-nums
(rest (&lt;span style="color:#a6e22e">range&lt;/span>)))
&lt;span style="color:#75715e">;; Compose to produce a sequence&lt;/span>
(&lt;span style="color:#a6e22e">comment&lt;/span>
(&lt;span style="color:#a6e22e">transduce&lt;/span> fizz-buzz-xform &lt;span style="color:#75715e">;; calculate each step&lt;/span>
conj &lt;span style="color:#75715e">;; and use this output method&lt;/span>
[] &lt;span style="color:#75715e">;; to pour output into this data structure&lt;/span>
natural-nums) &lt;span style="color:#75715e">;; given this input&lt;/span>
)
&lt;span style="color:#75715e">;; Compose differently to produce a string&lt;/span>
(&lt;span style="color:#a6e22e">comment&lt;/span>
(&lt;span style="color:#a6e22e">transduce&lt;/span> fizz-buzz-xform &lt;span style="color:#75715e">;; calculate each step&lt;/span>
str &lt;span style="color:#75715e">;; and use this output method&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#75715e">;; to catenate output into this string&lt;/span>
natural-nums) &lt;span style="color:#75715e">;; given this input&lt;/span>
)
&lt;span style="color:#75715e">;; Compose still differently to produce a CSV string&lt;/span>
(&lt;span style="color:#66d9ef">defn &lt;/span>suffix-comma
[s]
(str s &lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>))
(&lt;span style="color:#a6e22e">comment&lt;/span>
(&lt;span style="color:#a6e22e">transduce&lt;/span> (comp fizz-buzz-xform
(map suffix-comma)) &lt;span style="color:#75715e">;; calculate each step&lt;/span>
str &lt;span style="color:#75715e">;; and use this output method&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#75715e">;; to catenate output into this string&lt;/span>
natural-nums) &lt;span style="color:#75715e">;; given this input&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pause for a bit.&lt;/p>
&lt;ul>
&lt;li>Consider the parts we did &lt;em>not&lt;/em> have to modify &lt;em>at all&lt;/em> even though we
modified &lt;em>everything&lt;/em> about the output and about the xform.&lt;/li>
&lt;li>Consider what it might take to reuse any of the other fizzbuzzers instead
of &lt;code>basic-buzz&lt;/code>.&lt;/li>
&lt;li>Try it!&lt;/li>
&lt;/ul>
&lt;h3 id="demo-two-computation-and-input-format-pulled-apart-dot">Demo Two: Computation and &lt;em>Input&lt;/em> format pulled apart.&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>transducery.buzz)
&lt;span style="color:#75715e">;; Setup&lt;/span>
(&lt;span style="color:#66d9ef">def &lt;/span>numbers-file
&lt;span style="color:#e6db74">&amp;#34;Plaintext file containing numbers in some format.&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;/tmp/deleteme-spat-by-clj-fizz-buzz-demo.txt&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">;; Write 10,000 natural numbers to file, one per line&lt;/span>
&lt;span style="color:#f92672">#&lt;/span>_(&lt;span style="color:#a6e22e">spit&lt;/span> numbers-file
(&lt;span style="color:#a6e22e">clojure.string/join&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span> (range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">10001&lt;/span>)))
&lt;span style="color:#75715e">;; Read back to double-check we got it.&lt;/span>
&lt;span style="color:#f92672">#&lt;/span>_(slurp numbers-file)
&lt;span style="color:#75715e">;; For contrast: This is how we might fizz-buzz traditionally.&lt;/span>
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; Like this, if we don&amp;#39;t know our threading macros.&lt;/span>
&lt;span style="color:#75715e">;; (Don&amp;#39;t fret about it. This is just fine.)&lt;/span>
(&lt;span style="color:#66d9ef">let &lt;/span>[fizz-buzz (&lt;span style="color:#66d9ef">fn &lt;/span>[s] (&lt;span style="color:#a6e22e">basic-buzz&lt;/span> (&lt;span style="color:#a6e22e">Integer/parseInt&lt;/span> s)))]
(take &lt;span style="color:#ae81ff">15&lt;/span>
(map fizz-buzz
(&lt;span style="color:#a6e22e">clojure.string/split-lines&lt;/span> (slurp numbers-file)))))
&lt;span style="color:#75715e">;; Or more Clojurishly, with our nifty threading macros.&lt;/span>
(&lt;span style="color:#a6e22e">-&amp;gt;&amp;gt;&lt;/span> numbers-file
slurp
clojure.string/split-lines
(map &lt;span style="color:#f92672">#&lt;/span>(&lt;span style="color:#a6e22e">basic-buzz&lt;/span> (&lt;span style="color:#a6e22e">Integer/parseInt&lt;/span> %)))
(take &lt;span style="color:#ae81ff">15&lt;/span>))
&lt;span style="color:#75715e">;; I interrupted us with this, because of a pet peeve. People like to&lt;/span>
&lt;span style="color:#75715e">;; describe this form as a &amp;#34;pipeline&amp;#34;. It isn&amp;#39;t. It is a formatting&lt;/span>
&lt;span style="color:#75715e">;; sleight of hand that makes in-process call stacks of functions&lt;/span>
&lt;span style="color:#75715e">;; /appear/ to be straight-line. The resulting shape visually suggests&lt;/span>
&lt;span style="color:#75715e">;; punching data through a pipeline.&lt;/span>
&lt;span style="color:#75715e">;;&lt;/span>
&lt;span style="color:#75715e">;; Whereas pipelines are fundamentally streaming abstractions that&lt;/span>
&lt;span style="color:#75715e">;; cross process boundaries.&lt;/span>
&lt;span style="color:#75715e">;;&lt;/span>
&lt;span style="color:#75715e">;; Transducers + xforms are highly pipeline-like.&lt;/span>
)
&lt;span style="color:#75715e">;; Apart from not really being pipelines, both these traditional versions&lt;/span>
&lt;span style="color:#75715e">;; are also hopelessly complected with sequences, which malady is addressed&lt;/span>
&lt;span style="color:#75715e">;; by this transducer version.&lt;/span>
(&lt;span style="color:#a6e22e">comment&lt;/span>
(&lt;span style="color:#a6e22e">transduce&lt;/span> (comp (map &lt;span style="color:#f92672">#&lt;/span>(&lt;span style="color:#a6e22e">Integer/parseInt&lt;/span> %))
fizz-buzz-xform) &lt;span style="color:#75715e">;; calculate each step&lt;/span>
conj &lt;span style="color:#75715e">;; and use this output method&lt;/span>
[] &lt;span style="color:#75715e">;; to pour output into this data structure&lt;/span>
(&lt;span style="color:#a6e22e">clojure.string/split-lines&lt;/span>
(slurp numbers-file))) &lt;span style="color:#75715e">;; given this input&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A reader may complain that split-lines and file slurpin&amp;rsquo; is still complected.
The reader would be right. Tim Baldridge&amp;rsquo;s video series listed below will
help work out how one might go about transducing over numbers-file directly.&lt;/p>
&lt;h3 id="demo-three-use-only-the-xform-as-a-calculator">Demo Three: Use &lt;em>only&lt;/em> the xform as a calculator&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>transducery.buzz)
&lt;span style="color:#75715e">;; The xform can still calculate just a single item:&lt;/span>
((&lt;span style="color:#a6e22e">fizz-buzz-xform&lt;/span> conj) [] &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e">;; =&amp;gt; [&amp;#34;Fizz&amp;#34;]&lt;/span>
((&lt;span style="color:#a6e22e">fizz-buzz-xform&lt;/span> str) &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e">;; =&amp;gt; &amp;#34;Fizz&amp;#34;&lt;/span>
((&lt;span style="color:#a6e22e">fizz-buzz-xform&lt;/span> str) &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#75715e">;; =&amp;gt; &amp;#34;1&amp;#34;&lt;/span>
((&lt;span style="color:#a6e22e">fizz-buzz-xform&lt;/span> (&lt;span style="color:#66d9ef">fn &lt;/span>[_ out] out)) nil &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e">;; &amp;#34;Fizz&amp;#34;&lt;/span>
((&lt;span style="color:#a6e22e">fizz-buzz-xform&lt;/span> (&lt;span style="color:#66d9ef">fn &lt;/span>[_ out] out)) nil &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#75715e">;; 1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hopefully now it is a little more obvious &lt;em>why&lt;/em> the transducer&amp;rsquo;s mandate
of &lt;em>a la carte&lt;/em> re-composition &lt;em>demands&lt;/em> that &lt;em>all&lt;/em> the new pulling apart
&lt;em>must be fully compatible&lt;/em> with &lt;em>all&lt;/em> the old pulling apart.&lt;/p>
&lt;h3 id="further-reading">Further reading&lt;/h3>
&lt;p>Transducers are very deep conceptually, and literally. Since Clojure 1.7,
they have come to underpin all of Clojure&amp;rsquo;s heavy-lift capability.&lt;/p>
&lt;p>I recommend drilling down this way.&lt;/p>
&lt;p>&lt;em>&lt;strong>Thirty minute quickstart&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Skim-read the official words introducing &lt;a href="https://clojure.org/reference/transducers">Transducers&lt;/a>,
and describing &amp;ldquo;&lt;a href="https://clojure.org/guides/faq#transducers%5Fvs%5Fseqs">What are good use cases for transducers?&lt;/a>&amp;rdquo;.&lt;/li>
&lt;li>Watch &lt;a href="https://twitter.com/timbaldridge">Tim Baldridge&lt;/a> lift the essence of transducers out from
map/filter/reduce in 10 minutes: &lt;a href="https://www.youtube.com/watch?v=WkHdqg%5FDBBs">Transducers - Episode 1 - Introduction to Transducers&lt;/a>&lt;/li>
&lt;li>Compare with &lt;code>(clojure.repl/source map)&lt;/code> (and filter and reduce).&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Half day binge watch&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Watch Rich Hickey &lt;a href="https://www.youtube.com/watch?v=6mTbuzafcII">introduce Transducers&lt;/a>&lt;/li>
&lt;li>Follow Tim Baldridge through &lt;a href="https://tbaldridge.pivotshare.com/categories/transducers/2426/media">9 short video demos&lt;/a>,
where he &amp;ldquo;draws the rest of the Owl&amp;rdquo; so to speak, but actually, with all
the intermediate steps accounted for. IMHO, this is hands-down the best
exploration of transducers out there &lt;sup id="fnref:21">&lt;a href="#fn:21" class="footnote-ref" role="doc-noteref">21&lt;/a>&lt;/sup>.&lt;/li>
&lt;li>Watch Rich Hickey dive &lt;a href="https://www.youtube.com/watch?v=4KqUvG8HPYo">Inside Transducers&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Grok some real-world Transduction&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/bobby/kafka-streams-clojure">Kafkaesquely Streaming Transducery&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.grammarly.com/blog/engineering/building-etl-pipelines-with-clojure-and-transducers/">Grammar Transduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hyPiRion/haskell-transducers">Transducers Haskellized&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=1sC71eb9Ox0">Structure and Interpretation of Clojure Transducers&lt;/a>
re:Clojure 2021 workshop, by Ben Sless&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Exercise your brain&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Write a FizzBuzz in Shell that can compute with any source/sink combination;
in-line seq, mkfifo, files, sockets, URLs.&lt;/li>
&lt;li>Next, replace &lt;em>only&lt;/em> the Shell FizzBuzz function with the &lt;code>basic-buzz&lt;/code>
function we wrote (use babashka).&lt;/li>
&lt;li>Finally, write an all-Clojure version around the &lt;code>basic-buzz&lt;/code> function,
&lt;em>without&lt;/em> losing the the ability to transparently read/write from/to
seq, mkfifo, file, socket, URL.&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">man bash |
tr -cs A-Za-z &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span> |
tr A-Z a-z |
sort | uniq -c | sort -rn |
sed 10q
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://www.evalapply.org/posts/shell-aint-a-bad-place-to-fp-part-1-doug-mcilroys-pipeline/">;-)&lt;/a>&lt;/p>
&lt;h2 id="buzz">&lt;!-- raw HTML omitted -->TODO&lt;!-- raw HTML omitted --> Buzz&lt;/h2>
&lt;p>Ideas on deck, to put self on the hook&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> curried fizzbuzz (like Ring libraries),&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> dispatch-based fizzbuzz (with multimethods),&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> OOP fizzbuzz (with protocols),&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Nondestructive fizzbuzz (several!!!),&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> concurrent fizzbuzz (with agents, but the code in my head is
probably totally wrong),&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> parallel fizzbuzz, (just pmap, quite silly actually, but why not? It&amp;rsquo;s legit!)&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> transducing fizzbuzz, (should be able to transduce all the fizz-buzzes
up to Peano FizzBuzz)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> maaabe also re-do Rich&amp;rsquo;s ants sim with FizzBuzz ants (4 species of, ah,
ConcurrAnts &amp;mdash; IdentiAnt, FizzAnt, BuzzAnt, FizzBuzzAnt).&lt;/li>
&lt;/ul>
&lt;p>Outside of clojure.core, maaaaybe core.async fizzbuzz, but IDK, maybe that
will be too high concept, and too contrived.&lt;/p>
&lt;h2 id="acknowledgments">Acknowledgments&lt;/h2>
&lt;p>Thanks to &lt;a href="https://twitter.com/rdivyanshu">@rdivyanshu&lt;/a> for review and feedback and ideas.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Official and community-curated Clojure API docs &lt;a href="https://clojure.org/api/api">https://clojure.org/api/api&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Official guide: &lt;a href="https://clojure.org/guides/repl/introduction">Programming at the REPL&lt;/a>. The REPL is an &lt;em>eager&lt;/em> beast. Lazy sequences want to never be fully realised, if possible. But, a REPL is typically designed to fully evaluate everything it gets. This is why we didn&amp;rsquo;t feel the bite of mixing printing with lazy sequence generation. If we had this in our code somewhere, nothing would print, and any caller would get back just a useless collection of nils.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Laziness is a form of deferred computation. Clojure has &amp;ldquo;lazy sequences&amp;rdquo;. &lt;code>for&lt;/code> generates a lazy sequence. Several essay-length answers await your eager perusal. Rich Hickey&amp;rsquo;s notes from back in the day: &lt;a href="https://clojure.org/reference/lazy">Making Clojure Lazier&lt;/a>. Ramsharan G.J. muses &lt;em>&amp;quot;&lt;a href="https://www.youtube.com/watch?v=XCYTvZtTetI">Lazy Seqs - Why are they so lazy?&lt;/a>&amp;quot;&lt;/em> (&lt;a href="https://speakerdeck.com/sharangj/lazy-sequences-why-are-they-so-lazy">slides&lt;/a>). Oitihjya Sen muses &lt;a href="https://otee.dev/2022/01/17/lazy-clojure.html">Who Moved My Cheese: Laziness in Clojure&lt;/a>. Debashish Ghose has some thoughts on &lt;a href="https://debasishg.blogspot.com/2010/05/laziness-in-clojure-some-thoughts.html">Laziness in Clojure&lt;/a>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>Watch Rafal Dittwald refactor some Javascript in &lt;a href="https://www.youtube.com/watch?v=vK1DazRK%5Fa0">Solving Problems the Clojure Way&lt;/a>. Basically, we like to &lt;em>prevent&lt;/em> side effecting code as much as humanely possible. When we can&amp;rsquo;t, we do &lt;a href="https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell">Functional Core Imperative Shell&lt;/a>.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>The &lt;a href="https://mitpress.mit.edu/sites/default/files/sicp/index.html">full SICP textbook&lt;/a> is available free, online. The &lt;a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/">video lecture series&lt;/a> from 1986. Further DuckDuck searches will yield various tours of SICP in Clojure. Still further into the deep end, there is now &lt;a href="https://github.com/sicmutils">SICMUtils&lt;/a> in Clojure, built around the Structure and Interpretation of Classical Mechanics.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>To anyone writing Clojure tutorials, please for the love of lambda, &lt;em>&lt;strong>do not&lt;/strong>&lt;/em> use &lt;code>println&lt;/code> to &amp;ldquo;show&amp;rdquo; people results. You may think you are being kind by using a familiar way to &amp;ldquo;show&amp;rdquo; results, but it is far better to rip the bandage off right from the get go. Double down on teaching good REPL habits and quality FP thinking instead.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>Incidentally, the Classic implementation is also sensitive to the ordering of conditions, which is also a defect from a FP point of view, because there is no good reason to write an imperative control-flow-y interpretation of what could be a purely mathematical definition of FizzBuzz.&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>Well, maybe Rich can convince you otherwise: &lt;a href="https://www.infoq.com/presentations/Simple-Made-Easy/">Simple Made Easy&lt;/a>.&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9" role="doc-endnote">
&lt;p>I mean, don&amp;rsquo;t be actively malicious, of course. However, such a &lt;em>category&lt;/em> of error can happen. And if &amp;ldquo;they&amp;rdquo; git-blame-fire you, then I&amp;rsquo;d say celebrate. You inadvertently self-evicted from a place that will destroy your soul with bad systems and bad management.&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10" role="doc-endnote">
&lt;p>One fine day, one of our Clojure services at $FormerEmployer, started to run out of heap space after a fresh deployment. Our service graphs looked like this &lt;code>_/|_/|_/|_&lt;/code>. The sawtooth of heap death. It wasn&amp;rsquo;t super critical, and everybody was busy shipping features. So naturally we did some napkin math and rolled out a Jenkins job that triggered a rolling restart every six hours. Eventually, someone found the time to go debug the crashes. We had &lt;em>memoized&lt;/em> a function that returned an anonymous function (a lambda or &lt;em>thunk&lt;/em>), when we meant to memoize the return value from evaluating said lambda. Clojure creates a &lt;em>new&lt;/em> object every time we ask it to make a lambda. So &lt;a href="https://clojuredocs.org/clojure.core/memoize">memoize&lt;/a> saw new return values every time the original &amp;ldquo;thunkified&amp;rdquo; function was called, dutifully cached them all, and held onto them, thus preventing JVM garbage collector from cleaning them out. The story is relevant here because &lt;em>thunking&lt;/em> (making functions return partially evaluated fuctions) is a form of delayed or &amp;ldquo;lazy&amp;rdquo; evaluation. Also because nobody was fired. Everyone learned a good lesson and had a good laugh. In fact, we continued to use the rolling restart job in at least one other case where the memory leak was very slow, the service was very fault tolerant, and the service owner was really pressed for time with other always-higher priorities in that hyper-growth phase of the company. Slow leak tolerance is very much justified when used carefully. In fact, the friend who owned that service recently told me the periodic restart method worked so well, that they almost forgot about it for several years until they did a whole data center migration, at which point the service crashed for the first time in years, because someone forgot to also switch on the restart job. More good laughs were had and the documentation and automation were improved. You may now like to read &lt;a href="https://devblogs.microsoft.com/oldnewthing/20180228-00/?p=98125">&lt;em>&amp;ldquo;An amusing story about a practical use of the null garbage collector&amp;rdquo;&lt;/em>&lt;/a>.&amp;#160;&lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11" role="doc-endnote">
&lt;p>&amp;ldquo;&lt;a href="https://www.merriam-webster.com/dictionary/complect">Complect&lt;/a>&amp;quot;-ed, if you speak Clojurish. When a Thing is made of lots of Sub-Things that are braided together tightly, we say &amp;ldquo;This Thing is &lt;em>complected&lt;/em>.&amp;rdquo; in Clojurish. After we transform and reconstitute the Thing in terms of sub-things that are &lt;em>no longer&lt;/em> braided together, we smile inwardly and say &amp;ldquo;This Thing is now &lt;em>decomplected&lt;/em>&amp;rdquo;. Clojurish is basically a postmodern revival of the Latin roots of American English.&amp;#160;&lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:12" role="doc-endnote">
&lt;p>Eric Normand on &lt;em>&lt;a href="https://ericnormand.me/podcast/what-is-nil-punning">&amp;ldquo;What is Nil Punning?&amp;quot;&lt;/a>&lt;/em>.&amp;#160;&lt;a href="#fnref:12" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:13" role="doc-endnote">
&lt;p>For reference, &lt;a href="https://github.com/adityaathalye/sicp/blob/master/ex2-06-church-numerals.scm">my attempt&lt;/a> at implementing &lt;a href="https://en.wikipedia.org/wiki/Church%5Fencoding">Church Numerals&lt;/a> in SICP.&amp;#160;&lt;a href="#fnref:13" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:14" role="doc-endnote">
&lt;p>See the footnote for &amp;ldquo;Complect&amp;rdquo;.&amp;#160;&lt;a href="#fnref:14" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:15" role="doc-endnote">
&lt;p>Arne Brasseur on &lt;a href="https://www.lambdaisland.com/blog/2022-03-10-mechanism-vs-policy">Improve your code by separating mechanism from policy&lt;/a>. Don&amp;rsquo;t you just love it when Lots Of Thoughts are rattling around in your brain, and someone drops a sweet one-liner that instantly crystallises it all for you? Thanks &lt;a href="https://twitter.com/robstuttaford">@RobStuttaford&lt;/a> for bringing this back into my consciousness!&amp;#160;&lt;a href="#fnref:15" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:16" role="doc-endnote">
&lt;p>I see you and that &lt;code>AbstractFactoryFactory&lt;/code> joke forming in your brain.&amp;#160;&lt;a href="#fnref:16" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:17" role="doc-endnote">
&lt;p>See &lt;a href="https://clojure.org/reference/multimethods">Multimethods and Hierarchies&lt;/a> page at the official site, and the &lt;a href="https://clojuredocs.org/quickref#multifunctions">Multifunctions&lt;/a> section at ClojureDocs for examples. This stuff may break your brain for a bit, if you are very accustomed to Class-y OO programming. That&amp;rsquo;s absolutely fine. It &lt;em>is&lt;/em> fairly mind bending and takes some getting used to. Stay with it, play with concepts against the REPL. Translate or reduce as many patterns as you can to this kind of open-ended multiple dispatch.&amp;#160;&lt;a href="#fnref:17" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:18" role="doc-endnote">
&lt;p>You can watch me flail about live-demoing a UI test automation DSL I designed using Clojure. &lt;a href="https://www.youtube.com/watch?v=hwoLON80ZzA&amp;amp;t=170s">Video&lt;/a>, &lt;a href="https://github.com/adityaathalye/slideware/blob/master/designing%5Fobject%5Ffunctional%5Fsystem%5FIN-Clojure%5F2016.pdf">Slides&lt;/a>.&amp;#160;&lt;a href="#fnref:18" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:19" role="doc-endnote">
&lt;p>Aside: This is actually double-boxing, because in Java, numbers are already boxed by design. So this approach may carry some performance penalty depending on your context. For example, see this DZone &amp;gt; Java Zone article: &lt;a href="https://dzone.com/articles/whats-wrong-with-java-boxed-numbers">What&amp;rsquo;s Wrong With Java Boxed Numbers?&lt;/a>&amp;#160;&lt;a href="#fnref:19" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:20" role="doc-endnote">
&lt;p>Yes I do: &lt;a href="https://www.evalapply.org/posts/shell-aint-a-bad-place-to-fp-part-1-doug-mcilroys-pipeline/">Shell ain&amp;rsquo;t a bad place to FP&lt;/a> :)&amp;#160;&lt;a href="#fnref:20" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:21" role="doc-endnote">
&lt;p>Later, get all of &lt;a href="https://tbaldridge.pivotshare.com/">Clojure Tutorials - With Tim Baldridge&lt;/a>. It is a joy to watch a master craftsman at work!&amp;#160;&lt;a href="#fnref:21" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content></item><item><title>shite: static sites from shell: part 1/2</title><link>/posts/shite-the-static-sites-from-shell-part-1/</link><pubDate>Tue, 08 Mar 2022 01:29:08 +0530</pubDate><guid>/posts/shite-the-static-sites-from-shell-part-1/</guid><description>&lt;p>This primer is for people like me, who long dreamed of lovingly hand-crafting
our own home on the Internet. We would make it ultramodern yet ultralight,
simple yet beautiful. Something &lt;em>not&lt;/em> WordPress because that&amp;rsquo;s so last century.
(Seriously, just go to WordPress.)&lt;/p>
&lt;p>No. We were committed. We would do it for the sake of craftsmanship and the
environment and World Peace. And that&amp;rsquo;s how we found ourselves awake at 2 A.M.,
having absurd conversations &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> with Distant Internet Strangers&amp;hellip;&lt;/p></description><content>&lt;p>This primer is for people like me, who long dreamed of lovingly hand-crafting
our own home on the Internet. We would make it ultramodern yet ultralight,
simple yet beautiful. Something &lt;em>not&lt;/em> WordPress because that&amp;rsquo;s so last century.
(Seriously, just go to WordPress.)&lt;/p>
&lt;p>No. We were committed. We would do it for the sake of craftsmanship and the
environment and World Peace. And that&amp;rsquo;s how we found ourselves awake at 2 A.M.,
having absurd conversations &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> with Distant Internet Strangers&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>You (loudly): &lt;em>&amp;ldquo;BOOTSTRAP? Yes, I want to bootstrap my website.&amp;quot;&lt;/em>&lt;/p>
&lt;p>D.I.S. (miming): &lt;em>&amp;ldquo;No, no. You. &lt;strong>Need.&lt;/strong> Bootstrap.&amp;quot;&lt;/em>&lt;/p>
&lt;p>You: &amp;ldquo;&lt;em>I whaaat?&lt;/em>&amp;rdquo;&lt;/p>
&lt;p>D.I.S.: &lt;em>&amp;rdquo;&amp;hellip; aaannd NODE JAY ESS too&amp;hellip;&amp;quot;&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>You can&amp;rsquo;t fathom &lt;em>why&lt;/em> there are a jillion &amp;ldquo;CMSes&amp;rdquo;, fifty &amp;ldquo;build tools&amp;rdquo;, and
nine dozen &amp;ldquo;static site generators&amp;rdquo;, each with their own bespoke &amp;ldquo;templating
system&amp;rdquo;.&lt;/p>
&lt;p>You are &lt;em>this close&lt;/em> to DM-ing the first person who green-dots in your
current Slack; &amp;ldquo;&lt;em>Please, can you help me?&lt;/em> I didn&amp;rsquo;t know. I&amp;rsquo;m so sorry. For
&lt;em>everything&lt;/em>. I just wanted a website&amp;hellip; &lt;em>Please???&lt;/em>.&amp;rdquo;.&lt;/p>
&lt;p>Okay, then&amp;hellip;&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#screw-that-gimme-a-site-already">&amp;ldquo;Screw that, gimme a site already&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#what-s-the-plan">What&amp;rsquo;s the plan?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#what-is-a-static-website">What is a static website?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#hello-world-dot">Hello, world.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#peeking-under-the-browser-s-hood">Peeking under the browser&amp;rsquo;s hood&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-hello-world-is-not-enough">The hello-world is not enough&lt;/a>&lt;/li>
&lt;li>&lt;a href="#harness-html-dot-energy-to-model-our-would-be-site">Harness html.energy to model our would-be site&lt;/a>&lt;/li>
&lt;li>&lt;a href="#flip-the-model-into-a-full-website">Flip the model into a full website&lt;/a>&lt;/li>
&lt;li>&lt;a href="#what-next">What next?&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="screw-that-gimme-a-site-already">&amp;ldquo;Screw that, gimme a site already&amp;rdquo;&lt;/h2>
&lt;p>Certainly!&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;em>&lt;strong>&lt;a href="demo-2/index.html">site template&lt;/a>&lt;/strong>, hand-rolled and infused with pure html.energy&lt;/em>.
Just save each page and use any text editor to modify it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>&lt;a href="https://github.com/adityaathalye/shite">shite&lt;/a>&lt;/strong>, the tiny static site builder from shell.&lt;/em>
When the copy-pasta gets too much, a tiny Shell script can go a long way.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>TL;DR? Copy, use, modify at will.&lt;/p>
&lt;p>L;R? Follow me and I&amp;rsquo;ll show you how deep the rabbit hole goes.&lt;/p>
&lt;figure class="left" >
&lt;img src="morpheus-red-blue-pill.jpg" />
&lt;/figure>
&lt;h2 id="what-s-the-plan">What&amp;rsquo;s the plan?&lt;/h2>
&lt;p>To your credit, you will struggle and muddle and slap together a reasonable
site. I know I did. But you may also feel uneasy about the magic you used.
I know I did.&lt;/p>
&lt;p>Not today, though. Today we simplify, demystify, flow effortlessly, and end
up with&amp;hellip;&lt;/p>
&lt;p>Part 1: This blog:&lt;/p>
&lt;ul>
&lt;li>devise a decent, dead-simple HTML page template that you can fully grok,
and copy away to website success&lt;/li>
&lt;/ul>
&lt;p>Part 2: Next blog:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>grasp the problem space of making a static website (or, a website),&lt;/p>
&lt;/li>
&lt;li>
&lt;p>make &lt;em>shite: the website generator from Shell&lt;/em>, to automate the boring parts,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>do nothing that will surprise a Perl/PHP gentleperson hacker from the last
century. &amp;lsquo;twas a far more civilized time &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. I know because I&amp;rsquo;m from
the last century.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;Be water, my friend.&amp;quot;&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Bruce Lee.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="what-is-a-static-website">What is a static website?&lt;/h2>
&lt;p>Static simply means &lt;em>as-is&lt;/em>. Its inverse is &amp;ldquo;dynamic&amp;rdquo;, meaning in-transit.
The &amp;ldquo;static&amp;rdquo; part of &amp;ldquo;static website&amp;rdquo; corresponds to stored information. The
&amp;ldquo;website&amp;rdquo; part corresponds to where from and &lt;em>how&lt;/em>, the information gets to
one&amp;rsquo;s computer. A web-site is literally a place (site) on the World Wide Web,
whence our computer has to fetch the information we want.&lt;/p>
&lt;p>Fetching information, such as a web page, over the Internet is &amp;ldquo;dynamic&amp;rdquo; by
definition. Even just opening a file on your own computer&amp;rsquo;s disk is &amp;ldquo;dynamic&amp;rdquo;.
The very act of reading a digital file, and/or transmitting it, means copying
its bits from one place and showing them in another place &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>The &lt;em>Ultimate Static Site&lt;/em>, is a file that once written never changes. Thus,
once-received we never have to fetch it again (unless we lose it). Reality
is of course not so simple. But we will work with the &amp;ldquo;static means never
changing&amp;rdquo; mental model, because we can go pretty far with just that.&lt;/p>
&lt;p>We explore the &lt;em>making&lt;/em> of the &amp;ldquo;static&amp;rdquo; part; viz. the web pages. What could
these web pages convey? Well, any collection of words. A blog series.
A resume. A single essay. A tutorial. A presentation. A collection of books.
A portfolio. An artist&amp;rsquo;s statement. Or even a simple &amp;ldquo;Hello, world&amp;rdquo; message.
Your site, you choose!&lt;/p>
&lt;h2 id="hello-world-dot">Hello, world.&lt;/h2>
&lt;p>One of the simplest possible &amp;ldquo;static&amp;rdquo; websites is just a plain old text file
with a &lt;code>.html&lt;/code> file extension. Type a little &amp;lsquo;&lt;em>Hello, world&lt;/em>&amp;rsquo; message into
a text file (in Notepad or some other such text editor). Save it as &lt;em>hello.html&lt;/em>.
Open the file in a browser. Sure enough, we&amp;rsquo;ll see our little piece of text.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">Hello, world! I am @random on Twitter, Insta, FB, and LinkedIn. Look me up!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we put hello.html on a web server and have it serve the file as-is, well,
we just published a static website on the Internet.&lt;/p>
&lt;p>Some people enjoy these simple joys of life.&lt;/p>
&lt;p>For example, Adam Kelly &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>, m&amp;rsquo;colleague from the &lt;a href="./#footer">Recurse Center&lt;/a>
community, thinks their website &lt;a href="https://www.cthulahoops.org/">cthulahoops.org&lt;/a>
is just fine.&lt;/p>
&lt;p>And it is.&lt;/p>
&lt;figure class="left" >
&lt;img src="plain-static-website-cthulahoops.png" />
&lt;figcaption class="center" >Figure 1: Adam "Cthulahoops" Kelly makes you grin with just one line. (Retrieved Thu, 03 March, 2022).&lt;/figcaption>
&lt;/figure>
&lt;p>But you and I want more.&lt;/p>
&lt;h2 id="peeking-under-the-browser-s-hood">Peeking under the browser&amp;rsquo;s hood&lt;/h2>
&lt;p>Right now, let&amp;rsquo;s ignore this &amp;ldquo;server&amp;rdquo; business entirely. The &lt;em>Ultimate Static
Site&lt;/em> is usable from our computer, as-is. So let&amp;rsquo;s focus on the contents of
the site, and a general approach to assembling one.&lt;/p>
&lt;p>Our browser&amp;rsquo;s &amp;ldquo;View source&amp;rdquo; feature provides the first little clue. We see
something more than the plain text we typed into hello.html.&lt;/p>
&lt;p>The text of the &amp;lsquo;&lt;em>Hello, world&lt;/em>&amp;rsquo; message renders as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
Hello, world! I am @random on Twitter, Insta, FB, and LinkedIn. Look me up!
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;figure class="left" >
&lt;img src="plain-static-website-cthulahoops-view-source.png" />
&lt;figcaption class="center" >Figure 2: Inside Adam's website.&lt;/figcaption>
&lt;/figure>
&lt;p>This immediately suggests a lesson, viz&amp;hellip;&lt;/p>
&lt;h2 id="the-hello-world-is-not-enough">The hello-world is not enough&lt;/h2>
&lt;p>The browser actually needs well-formed Hyper-Text Markup Language (HTML), to
correctly interpret and display content. But browsers also guess at content
type and apply rules to show content as sensibly as possible. In our dead-simple
case, the browser chose to wrap the plain text in the appropriate HTML tags.&lt;/p>
&lt;p>Unfortunately, typing plain text paragraphs into our hello.html file doesn&amp;rsquo;t
cut it because, to a browser, the whole thing is just one text node. It will
flatten the entire text file into single line. Browsers are clever in a very
narrow sense. Also there&amp;rsquo;s the small matter that a web server may refuse to
send HTML that it thinks is incomplete (malformed). So we&amp;rsquo;ll fix that first.&lt;/p>
&lt;p>So the next-simplest evolution of our static site would be to put appropriate
HTML around our text. &lt;code>&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/code> (paragraph) tags for instance, like a civilized
person from the last century would do.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">&amp;lt;p&amp;gt;Hello, world.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I am @random on Twitter, Insta, FB, and LinkedIn.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Look me up!&amp;lt;/p&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As before, the browser helpfully enclosed our incomplete html in the document
level tags (html, body).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Hello, world.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;I am @random on Twitter, Insta, FB, and LinkedIn.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Look me up!&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The browser somehow renders our text as neat paragraphs. That&amp;rsquo;s because it
automatically applies default style information to HTML elements it recognizes.
We can see this in the &amp;ldquo;Styles&amp;rdquo; tab when we &amp;ldquo;view source&amp;rdquo; (in Firefox).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#f92672">p&lt;/span> {
&lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">block&lt;/span>;
margin-block-start: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
margin-block-end: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
margin-inline-start: &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
margin-inline-end: &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s not magic. Have a look at the default style sheets to render HTML &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>:&lt;/p>
&lt;ul>
&lt;li>in the Chromium project: &lt;a href="https://chromium.googlesource.com/chromium/blink/+/master/Source/core/css/html.css">core/css/html.css&lt;/a>&lt;/li>
&lt;li>in the Firefox project: &lt;a href="https://searchfox.org/mozilla-central/source/layout/style/res/html.css">layout/style/res/html.css&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>So there it is. In the simplest case, we need only worry about the bare
essential content and HTML formatting, and rely on the browser to supply the
rest; wrapper HTML, and CSS style information.&lt;/p>
&lt;p>Further, even in this crude form, the browser has already planted the seed of
an idea in our minds. If &lt;em>we&lt;/em> supply just the content, &lt;em>something else&lt;/em> could
mechanically add in the boilerplate/repetitive HTML + CSS. A templating system.&lt;/p>
&lt;p>But we&amp;rsquo;re getting ahead of ourselves. If we want browsers to show our content
the way we intended, then we must remove guesswork by wrapping the content in
well-formed HTML syntax.&lt;/p>
&lt;h2 id="harness-html-dot-energy-to-model-our-would-be-site">Harness html.energy to model our would-be site&lt;/h2>
&lt;p>The web is meant to be a publishing medium. HTML, its lingua franca, has become
a highly standardized, feature-rich, and expressive language.&lt;/p>
&lt;p>Modern HTML aims to be &amp;ldquo;semantic&amp;rdquo;, i.e. it allows us to organize and describe
various parts of our website in HTML tags that are well-accepted &lt;strong>and&lt;/strong> machine-
friendly &lt;strong>and&lt;/strong> meaningful to humans. A lot can be done with very little &lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>CSS too has evolved a lot. But we will focus more on the HTML bits, because
that&amp;rsquo;s at the heart of all web layouts and we can rely on browsers to supply
reasonable styling information automatically.&lt;/p>
&lt;p>So, we may rifle through the HTML reference page and come up with some sort
of a model of our would-be site.
See the &lt;a href="demo/index.html">live demo&lt;/a> and compare with the markup anatomy
described below.&lt;/p>
&lt;figure class="left" >
&lt;img src="shite-demo-1.png" />
&lt;figcaption class="center" >Figure 3: a model page for the shite&lt;/figcaption>
&lt;/figure>
&lt;p>Note: I used the HTML and CSS I did simply because I picked up a few tricks
after reading half a book. You may do it differently. The important thing is
to construct a &lt;em>good enough model&lt;/em> to help us think.&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="829563147" type="checkbox" checked />
&lt;label for="829563147">
&lt;span class="collapsable-code__language">html&lt;/span>
&lt;span class="collapsable-code__title">Anatomy of the markup&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-html" >&lt;code>
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;!-- Some basic hygiene meta-data --&amp;gt;
&amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt;
&amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt;
&amp;lt;title&amp;gt;A Shtatic Shite&amp;lt;/title&amp;gt;
&amp;lt;meta name=&amp;#34;author&amp;#34; content=&amp;#34;Yours Truly&amp;#34;&amp;gt;
&amp;lt;meta name=&amp;#34;description&amp;#34; content=&amp;#34;In which we work our way to world domination the hard way.&amp;#34;&amp;gt;
&amp;lt;!-- Some bare bones style information. Ignore details, it&amp;#39;s just for show. --&amp;gt;
&amp;lt;!-- Read &amp;lt;https://every-layout.dev&amp;gt; for true CSS enlightenment. --&amp;gt;
&amp;lt;style&amp;gt;
:root {
color: #1a2639;
background-color: #f0ece2;
font-family: sans-serif;
}
,\* {
background-color: lightyellow;
}
a {
color: darkred;
}
body {
_\* Constrain body width. \*_
max-width: 72ch;
_\* Prevent content from sticking to inside edges of body. \*_
padding: 1.5rem;
_\* Position body in the middle of the screen. \*_
margin-top: 1.5rem;
margin-left: auto;
margin-right: auto;
}
nav {
display: flex;
gap: 1rem;
margin-top: 1rem;
margin-bottom: 1rem;
}
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;header id=&amp;#34;site-header&amp;#34;&amp;gt;
&amp;lt;h1&amp;gt;A &amp;#34;Hello, World&amp;#34; website by Yours Truly.&amp;lt;/h1&amp;gt;
&amp;lt;nav&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;a href=&amp;#34;index.html&amp;#34;&amp;gt;Blog&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;a href=&amp;#34;about.html&amp;#34;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;a href=&amp;#34;resume.html&amp;#34;&amp;gt;Resume&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/nav&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;main&amp;gt;
&amp;lt;h1&amp;gt;Blog posts&amp;lt;/h1&amp;gt;
&amp;lt;article id=&amp;#34;article-hello-world&amp;#34;&amp;gt;
&amp;lt;h2&amp;gt;Hello, world.&amp;lt;/h2&amp;gt;
&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;
In which we greet the world.
&amp;lt;/summary&amp;gt;
&amp;lt;p&amp;gt;Hello, world.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I&amp;#39;m here.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;And I&amp;#39;m going to take you head-on...&amp;lt;/p&amp;gt;
&amp;lt;nav&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;sub&amp;gt;^ &amp;lt;a href=&amp;#34;#article-hello-world&amp;#34;&amp;gt;title&amp;lt;/a&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;sub&amp;gt;^ &amp;lt;a href=&amp;#34;#site-header&amp;#34;&amp;gt;menu&amp;lt;/a&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/nav&amp;gt;
&amp;lt;/details&amp;gt;
&amp;lt;/article&amp;gt;
&amp;lt;article id=&amp;#34;article-wtf-world&amp;#34;&amp;gt;
&amp;lt;h2&amp;gt;Wtf, world?!&amp;lt;/h2&amp;gt;
&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;
In which we marvel at the various insanties of life and the living.
&amp;lt;/summary&amp;gt;
&amp;lt;p&amp;gt;Wtf, world.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I&amp;#39;m here.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;And I&amp;#39;m just... How do you even work?&amp;lt;/p&amp;gt;
&amp;lt;nav&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;sub&amp;gt;^ &amp;lt;a href=&amp;#34;#article-hello-world&amp;#34;&amp;gt;title&amp;lt;/a&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;sub&amp;gt;^ &amp;lt;a href=&amp;#34;#site-header&amp;#34;&amp;gt;menu&amp;lt;/a&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/nav&amp;gt;
&amp;lt;/details&amp;gt;
&amp;lt;/article&amp;gt;
&amp;lt;article id=&amp;#34;article-goodbye-world&amp;#34;&amp;gt;
&amp;lt;h2&amp;gt;Goodybe, world.&amp;lt;/h2&amp;gt;
&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;
In which we bid adieu to the world.
&amp;lt;/summary&amp;gt;
&amp;lt;p&amp;gt;Goodbye, world.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;It was nice being here.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I hope we meet again...&amp;lt;/p&amp;gt;
&amp;lt;nav&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;sub&amp;gt;^ &amp;lt;a href=&amp;#34;#article-goodbye-world&amp;#34;&amp;gt;title&amp;lt;/a&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;sub&amp;gt;^ &amp;lt;a href=&amp;#34;#site-header&amp;#34;&amp;gt;menu&amp;lt;/a&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/nav&amp;gt;
&amp;lt;/details&amp;gt;
&amp;lt;/article&amp;gt;
&amp;lt;/main&amp;gt;
&amp;lt;footer&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;p&amp;gt;Copyright, Yours Truly.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;All content is MIT licensed, except where specified otherwise.&amp;lt;/p&amp;gt;
&amp;lt;/footer&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Our model already contains much html.energy. We&amp;rsquo;re almost done.&lt;/p>
&lt;h2 id="flip-the-model-into-a-full-website">Flip the model into a full website&lt;/h2>
&lt;p>In all honesty, the above structure could serve you well for many blog posts
and pages. You can just copy-paste the HTML and modify the content, styles,
meta &amp;mdash;anything, really&amp;mdash; to create new pages.&lt;/p>
&lt;p>Like this &lt;a href="demo-2/index.html">other live demo&lt;/a>.&lt;/p>
&lt;p>See? Cute, right? (Fine, I also made &lt;em>just one&lt;/em> little tweak for colour effect.
I couldn&amp;rsquo;t help it, OK?).&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="shite-demo-2-index.png" alt="">&lt;/td>
&lt;td>&lt;img src="shite-demo-2-about.png" alt="">&lt;/td>
&lt;td>&lt;img src="shite-demo-2-resume.png" alt="">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="what-next">What next?&lt;/h2>
&lt;p>Well, you can&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>write a pleasantly styled private diary that lives just on your computer, or&lt;/li>
&lt;li>email any page, or the whole thing to anyone you like, or&lt;/li>
&lt;li>share the site via dropbox or suchlike, with close friends and family, or&lt;/li>
&lt;li>publish it to the WWW &lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup> for all to behold&lt;/li>
&lt;/ul>
&lt;p>But why stop here? I wish you and your site grow ever richer. And why stop
at one? I wish your ambition grows to make many sites of all shapes and sizes.&lt;/p>
&lt;p>Either way, may the copy pasta stop being cute very fast. May it cause you
to seek ways to automate away the tedious bits of site-building. Because it&amp;rsquo;s
too much fun!&lt;/p>
&lt;p>In next and concluding part, I draw a blueprint you could crib from, should
you choose this virtuous adventure in artisanal automation. Something dead-simple.
That you &lt;em>fully&lt;/em> grok. That you can change at will. That is therefore timeless.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Even Joe Armstrong &lt;a href="https://www.youtube.com/watch?v=lKXe3HUG2l4">gave up after &amp;ldquo;the local Grunt&amp;rdquo; wouldn&amp;rsquo;t work&lt;/a>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Recently, a friend told me matter-of-fact-ly that they know people who were spinning up a Kubernetes cluster for their static website. For scale and all, you know. (If you don&amp;rsquo;t know what any of that means, it&amp;rsquo;s fine. I don&amp;rsquo;t either.)&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://wesleyac.com/">Wesley A-C.&lt;/a>, m&amp;rsquo;colleague from the Recurse Center community, has more to say about the &lt;a href="https://blog.wesleyac.com/posts/no-static-websites">static/dynamic divide&lt;/a>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>Thanks to &lt;a href="https://github.com/cthulahoops">Adam Kelly&lt;/a>, for permission to use their site as example.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>Someone on the html.energy discord pointed to this truth buried in The Source.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>Visit &lt;a href="https://html.energy/home.html">html.energy&lt;/a> to learn the truth, &lt;a href="https://gossipsweb.net/">gossipsweb&lt;/a> to experience it, and the &lt;a href="https://512kb.club/">512KB Club&lt;/a> to meet the lightweight elite.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>This blog post &lt;a href="https://alignedleft.com/resources/cheap-web-hosting">Cheap or Free Static Website Hosting&lt;/a> suggests several options. The neocities.org way seems easiest for a simple website like ours. You&amp;rsquo;ll also find plenty of help for &lt;a href="https://pages.github.com/">publishing with github pages&lt;/a>. Alternatively, there seems to be a way to publish direct from your Google Drive or Dropbox etc. &lt;a href="https://www.freecodecamp.org/news/how-to-deploy-a-static-website-for-free-in-only-3-minutes-with-google-drive/">using Fast.io&lt;/a>.&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content></item><item><title>In the beginning, was the domain name</title><link>/posts/hello-world/</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0530</pubDate><guid>/posts/hello-world/</guid><description>&lt;p>How this blog came to be is a minor miracle. Long story short, I conned myself
into believing nobody will find &lt;em>and&lt;/em> read it. But you&amp;rsquo;re here, aren&amp;rsquo;t you?
And you&amp;rsquo;re reading this. Aren&amp;rsquo;t You?&lt;/p>
&lt;p>Confucamus.&lt;/p>
&lt;p>Well, here&amp;rsquo;s how you got here.&lt;/p></description><content>&lt;p>How this blog came to be is a minor miracle. Long story short, I conned myself
into believing nobody will find &lt;em>and&lt;/em> read it. But you&amp;rsquo;re here, aren&amp;rsquo;t you?
And you&amp;rsquo;re reading this. Aren&amp;rsquo;t You?&lt;/p>
&lt;p>Confucamus.&lt;/p>
&lt;p>Well, here&amp;rsquo;s how you got here.&lt;/p>
&lt;hr>
&lt;p>You see, I&amp;rsquo;ve been&amp;hellip; was&amp;hellip; e-sober for a measurable fraction of the
Internet era.&lt;/p>
&lt;p>It&amp;rsquo;s been over ten years since I took down my last (and first) blog. Eight
since I nuked my FB with extreme prejudice, discovering in the bargain a fine
capacity for smug satisfaction, when the chagrin of aghast friends and sundry
affected me not one whit. Nary a tweet-song has erupted, five years and
counting.&lt;/p>
&lt;p>The WWW had gotten A Bit Too Much. I wanted to say nothin' to nobody on it.
I was content writing the occasional long email to friends and randoms.
I was &lt;em>fine&lt;/em>. &lt;em>Everything was.&lt;/em>&lt;/p>
&lt;p>Mother nature, though. She tests us.&lt;/p>
&lt;p>Predictably, she sprung A Rather Big Surprise at the least-convenient moment
in the least-convenient century (for me, at any rate).
That-which-shall-not-be-named imposed a period of involuntary house arrest.&lt;/p>
&lt;p>It was then, in that long dark tea time of the soul, will weakened, that I
snagged a domain on impulse.&lt;/p>
&lt;p>This very domain. Just for my email, mind you. To de-google myself. Or something.&lt;/p>
&lt;p>Oh, how little did I know. &lt;a href="http://garann.com/dev/2013/how-to-blog-about-code-and-give-zero-fucks/">Insidious&lt;/a> &lt;a href="https://sites.google.com/site/steveyegge2/you-should-write-blogs">thoughts&lt;/a> &lt;a href="https://applieddivinitystudies.com/2020/09/09/journaling/">started&lt;/a> invading my consciousness
through my soothingly red-shifted displays. The Feature Creep crept up slowly,
subtly erecting neon hoardings to subvert the fog my mind had gladly embraced.
&lt;em>&amp;ldquo;Does your domain apologetically redirect to your github?&amp;rdquo;.&lt;/em>
&lt;em>&amp;ldquo;Your site can be more. Do more. So much more.&amp;rdquo;.&lt;/em>
&lt;em>&amp;ldquo;If a reader fell upon this site and no form was around to comment in,
did they make a sound?&amp;rdquo;.&lt;/em>
Foggy the mind was, yes.&lt;/p>
&lt;p>That&amp;rsquo;s when it gripped me. The desire to write. And it started gnawing away
inside. It was all The Feature Creep&amp;rsquo;s doing, of course, but I didn&amp;rsquo;t know
it then.&lt;/p>
&lt;p>Luckily, my terror of looking like an idiot&amp;ndash;nay, an &lt;em>impostor&lt;/em>&amp;ndash;was far more
potent than The FC&amp;rsquo;s gnawing at my anemic will. I narrowly avoided working up
the nerve to just point the damn domain to Wordpress and slam publish like it
was 2005 again.&lt;/p>
&lt;p>Days turned to weeks. Weeks glommed into months. Some uncalled for hair loss
occurred and a year passed. Meanwhile, the domain redirected reliably,
unaware of the mayhem within and without.&lt;/p>
&lt;p>Still The FC gnawed on. The Feature Creep never tires, never lies down, and
never dies, you see.&lt;/p>
&lt;p>Slyly (or so I thought), I fooled it by quietly typing into my Emacs. More
days turned to weeks turned to months. Words accreted in my org-mode files.
Wee notes. Snippets. Factoids squirreled away. Mostly harmless bits and bobs.
Someone paying attention might have smelled trouble brewing and stopped right
there. But, oh how little did I know.&lt;/p>
&lt;p>Unwittingly, I started penning lofty thoughts too. I caught on soon enough,
but I kept doing it, despite now being acutely aware that I&amp;rsquo;d wake up feeling
dirty the morning after. My confidence, though. My, did it grow supreme. It
took perverse delight in jotting down opinions way above my pay grade because,
after all, nobody would find out. It was all on my computer. Even if I
didn&amp;rsquo;t &lt;em>shred&lt;/em> it all, bitrot would certainly destroy every last trace of
my misadventures. And I&amp;rsquo;d safely take my little secret life to my grave.
Yes, I&amp;rsquo;d get away with it.&lt;/p>
&lt;p>But then my partner found out and started telling me things, whispering words
of encouragement (somehow, &lt;em>&amp;ldquo;egged on&amp;rdquo;&lt;/em> seems more apt).
The fault is all mine though; why we&amp;rsquo;re here. For shortly after, in a
momentary lapse of judgment, I also told a friend.
And then, fatally, I failed to continue keeping mum before other friends.
Now they want to read it all, and not privately, but &amp;ldquo;on your bloody blog,
dummy&amp;rdquo;. That&amp;rsquo;s when I &lt;em>knew&lt;/em>. The Feature Creep had me dead to rights
from the get go.&lt;/p>
&lt;p>The obvious moral here is if you want to continue &lt;em>not&lt;/em> writing on the WWW,
don&amp;rsquo;t under &lt;em>any&lt;/em> circumstance impulse-purchase that domain, and if you do,
don&amp;rsquo;t secretly type in your computer, and if you do, for the love of your Gods,
don&amp;rsquo;t wed or befriend anyone.&lt;/p>
&lt;p>Anyhow, it was too late for me. Feeling suitably cornered and wretched,
much moping around ensued, until it hit me; &amp;ldquo;Wait a minute, I &lt;em>am&lt;/em> an idiot,
but I also &lt;em>want&lt;/em> to be &lt;a href="https://danluu.com/look-stupid/">less of one&lt;/a>.&amp;rdquo;
So this is&amp;hellip; also fine. Maybe they will even tell me HowTo Not Idiot, if
they&amp;rsquo;re still here, reading.&lt;/p>
&lt;p>So I submitted. That domain I impulse-bought stopped redirecting, pointing
to this instead. Then with infinite improbability, your browser pointed to
that and served this up. And now you know exactly how you got here. And&amp;hellip;&lt;/p>
&lt;p>You&amp;rsquo;re still reading, aren&amp;rsquo;t you?&lt;/p>
&lt;p>Your readership graces this site. To me, writing was thinking. Apparently it
can also be a process of becoming. So thank you for being here (bows deeply).
Several word collections are in progress. Please stay as long as you wish.&lt;/p>
&lt;p>I&amp;rsquo;ll pause here to doff my hat to some heroes that I draw inspiration from;
&lt;a href="https://bellmar.medium.com/">bellmar&lt;/a> &amp;amp; &lt;a href="https://danluu.com">danluu&lt;/a> &amp;amp; &lt;a href="https://jvns.ca/">b0rk&lt;/a> &amp;amp; &lt;a href="https://www.gwern.net/index">gwern&lt;/a> &amp;amp; &lt;a href="https://aphyr.com/tags/writing">aphyr&lt;/a> &amp;amp; &lt;a href="https://www.kitchensoap.com/">allspaw&lt;/a> &amp;amp; &lt;a href="https://xkcd.com/">randall&lt;/a> &amp;amp; &lt;a href="https://twitter.com/foone">foone&lt;/a>,
and a hundred more&amp;hellip; Much to learn, have I.
But we here now, an' we gon' try. We gon' try, to eval/apply.&lt;/p>
&lt;p>There will be some technical words, some code play, some HowTos, some WhyTos,
pondering-upons of some real doozies like &amp;ldquo;Systems, Scale, Value&amp;rdquo;,
&amp;ldquo;Technical Debt is a CDO&amp;rdquo;, &amp;ldquo;Envelope of control&amp;rdquo;, &amp;ldquo;Why was the misbehaving
system behaving itself?&amp;rdquo; and so forth. No pundering at all, if you&amp;rsquo;re
wondering.&lt;/p>
&lt;p>Enroute, maybe your eye catches something iffy and twitches. Perhaps a whiff
of bull causes your nostrils to flare slightly. Maybe something really gets
your goose and your brain screams &amp;ldquo;NO. Don&amp;rsquo;t. Type. You &lt;strong>promised&lt;/strong> you&amp;rsquo;re
done with these Internet randos who are SO BLOODY WRONG.&amp;rdquo;.&lt;/p>
&lt;p>That&amp;rsquo;s why I&amp;rsquo;m helping you by not having a comment form.&lt;/p>
&lt;p>But I&amp;rsquo;ll be delighted to hear from you at &lt;em>weblog (at) evalapply (dot) org&lt;/em>
if it strikes your fancy! (Or &lt;em>youresobloodywrong (at) evalapply (dot) org&lt;/em>
if it&amp;rsquo;s just &lt;em>that&lt;/em> kind of a day and you can&amp;rsquo;t stand it any more.
I know the feeling. I&amp;rsquo;m here, listening :).&lt;/p>
&lt;p>Thank you for swinging by!&lt;/p>
&lt;p>&lt;a href="https://xkcd.com/386/">&lt;img src="https://imgs.xkcd.com/comics/duty%5Fcalls.png" alt="What do you want me to do? LEAVE? Then they&amp;rsquo;ll keep being wrong!">&lt;/a>
&lt;a href="https://xkcd.com/386/">xkcd: Duty Calls&lt;/a>&lt;/p></content></item></channel></rss>