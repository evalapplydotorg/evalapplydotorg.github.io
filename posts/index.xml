<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on eval/apply</title><link>/posts/</link><description>Recent content in Posts on eval/apply</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 27 Apr 2022 21:43:19 +0530</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Shell ain't a bad place to FP: part 2/N: Functions as Unix Tools</title><link>/posts/shell-aint-a-bad-place-to-fp-part-2-functions-as-unix-tools/</link><pubDate>Wed, 27 Apr 2022 21:43:19 +0530</pubDate><guid>/posts/shell-aint-a-bad-place-to-fp-part-2-functions-as-unix-tools/</guid><description>&lt;p>Or, &lt;em>&lt;strong>the one in which we hand-craft nano Unix tools using Bash functions.&lt;/strong>&lt;/em>&lt;/p>
&lt;p>As we saw in the &lt;a href="https://evalapply.org/posts/shell-aint-a-bad-place-to-fp-part-1-doug-mcilroys-pipeline">previous post&lt;/a>,
functions obey stdio and we can mix and match them with built-ins (grep, sed,
cat etc.) and other installed tools (like jq, pandoc, babashka etc.). We used
functions to name parts of Douglas McIlroy&amp;rsquo;s pipeline and mess around a bit.&lt;/p>
&lt;p>I tend to make libraries of pure functions that I can source in shell sessions
and use just like any other shell tool, complete with tab-completion. e.g.
&lt;a href="https://github.com/adityaathalye/bash-toolkit">bash-toolkit&lt;/a> and &lt;a href="https://github.com/adityaathalye/shite">shite&lt;/a>.&lt;/p>
&lt;p>Now we step back and try to build good intuitions about&lt;/p>
&lt;ul>
&lt;li>what functions are&lt;/li>
&lt;li>how to design good functions&lt;/li>
&lt;li>how to design programs with functions&lt;/li>
&lt;li>how to name them :)&lt;/li>
&lt;/ul></description><content>&lt;p>Or, &lt;em>&lt;strong>the one in which we hand-craft nano Unix tools using Bash functions.&lt;/strong>&lt;/em>&lt;/p>
&lt;p>As we saw in the &lt;a href="https://evalapply.org/posts/shell-aint-a-bad-place-to-fp-part-1-doug-mcilroys-pipeline">previous post&lt;/a>,
functions obey stdio and we can mix and match them with built-ins (grep, sed,
cat etc.) and other installed tools (like jq, pandoc, babashka etc.). We used
functions to name parts of Douglas McIlroy&amp;rsquo;s pipeline and mess around a bit.&lt;/p>
&lt;p>I tend to make libraries of pure functions that I can source in shell sessions
and use just like any other shell tool, complete with tab-completion. e.g.
&lt;a href="https://github.com/adityaathalye/bash-toolkit">bash-toolkit&lt;/a> and &lt;a href="https://github.com/adityaathalye/shite">shite&lt;/a>.&lt;/p>
&lt;p>Now we step back and try to build good intuitions about&lt;/p>
&lt;ul>
&lt;li>what functions are&lt;/li>
&lt;li>how to design good functions&lt;/li>
&lt;li>how to design programs with functions&lt;/li>
&lt;li>how to name them :)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#previously-in-this-series-dot-dot-dot">Previously in this series&amp;hellip;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#what-bash-functions-are">What Bash functions are&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#bash-functions-are-compound-commands">Bash functions are compound commands&lt;/a>&lt;/li>
&lt;li>&lt;a href="#function-definitions-live-in-a-global-namespace">Function definitions live in a global namespace&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#how-to-design-good-functions">How to design good functions&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#wrap-domain-concepts-in-single-purpose-functions">Wrap domain concepts in single-purpose functions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#use-parameter-substitutions-and-local-scope-variables">Use parameter substitutions and local scope variables&lt;/a>&lt;/li>
&lt;li>&lt;a href="#partial-application-of-functions">Partial application of functions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#dependency-injection-with-functions">Dependency injection with functions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#keeping-functions-pure">Keeping Functions pure&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#program-design-with-functions">Program design with functions&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#writing-pipeline-friendly-functions">Writing Pipeline-friendly Functions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#separating-return-values-and-non-values">Separating return values and non-values&lt;/a>&lt;/li>
&lt;li>&lt;a href="#functions-to-delay-evaluation">Functions to delay evaluation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#functional-core-imperative-shell">Functional core, imperative shell&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#naming-conventions">Naming conventions&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;h2 id="previously-in-this-series-dot-dot-dot">Previously in this series&amp;hellip;&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://evalapply.org/posts/shell-aint-a-bad-place-to-fp-part-1-doug-mcilroys-pipeline">Part 1/N&lt;/a>:
Exploring McIlroy&amp;rsquo;s pipeline to motivate the series. And an unexpected
masterclass from the Master himself (see appendix)!&lt;/li>
&lt;li>&lt;a href="https://evalapply.org/posts/shell-aint-a-bad-place-to-fp-part-0-intro/">Part 0/N&lt;/a>:
intro, caveats, preamble&lt;/li>
&lt;/ul>
&lt;h2 id="what-bash-functions-are">What Bash functions are&lt;/h2>
&lt;p>Last time, we wrote functions like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">flatten_paragraphs&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
tr -cs A-Za-z &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The syntax may look familiar, but their behaviour and semantics differ in
many ways from functions in the more modern languages like Python or JS etc.&lt;/p>
&lt;h3 id="bash-functions-are-compound-commands">Bash functions are compound commands&lt;/h3>
&lt;p>&lt;code>man bash&lt;/code> describes functions as follows (online manpage: &lt;a href="https://www.gnu.org/software/bash/manual/html%5Fnode/Shell-Functions.html">shell functions&lt;/a>).&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Shell Function Definitions&lt;/strong>&lt;/p>
&lt;p>A shell function is an object that is called like a simple command and
executes a compound command with a new set of positional parameters.
Shell functions are declared as follows:&lt;/p>
&lt;p>&lt;code>name () compound-command [redirection]&lt;/code>&lt;/p>
&lt;p>&amp;hellip; and more stuff &amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>We will do names last, because names are hard :) Let&amp;rsquo;s start with the
&amp;ldquo;compound command&amp;rdquo; part.&lt;/p>
&lt;p>There are several ways to write &lt;em>compound commands&lt;/em>, each serving a different
purpose. To define functions, we only need the &lt;code>{ list; }&lt;/code> form. So we will
ignore the others. Some context from the Bash manpage.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Compound Commands&lt;/strong>&lt;/p>
&lt;p>A compound command is one of the following. In most cases a list in a
command&amp;rsquo;s description may be separated from the rest of the command by
one or more newlines, and may be followed by a newline in place of a semicolon.&lt;/p>
&lt;p>&lt;code>(list)&lt;/code>
list is executed in a subshell environment &amp;hellip;&lt;/p>
&lt;p>&lt;code>{ list; }&lt;/code>
list is simply executed in the current shell environment. list
must be terminated with a newline or semicolon. This is known as
a group command. The return status is the exit status of list.
Note that unlike the metacharacters ( and ), { and } are reserved
words and must occur where a reserved word is permitted to be
recognized. Since they do not cause a word break, they must be
separated from list by whitespace or another shell metacharacter.&lt;/p>
&lt;p>&lt;code>((expression))&lt;/code>
Arithmetic expressions &amp;hellip;&lt;/p>
&lt;p>&lt;code>[[ expression ]]&lt;/code>
Compound conditional expression &amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;p>The Bash manual page can feel a little obtuse at times. Hopefully the examples
and discussion in this post will serve as useful illustrations.&lt;/p>
&lt;h3 id="function-definitions-live-in-a-global-namespace">Function definitions live in a global namespace&lt;/h3>
&lt;p>This means function definitions are isolated, and don&amp;rsquo;t override any alias,
builtin, variable, or reserved keyword of the same name.&lt;/p>
&lt;p>To see what that means, let&amp;rsquo;s bind the same name to different things.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ sed&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span> echo lol; &lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e"># will the function override the sed built-in?&lt;/span>
$ sed&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;phew!&amp;#34;&lt;/span> &lt;span style="color:#75715e"># will the variable override the function we defined?&lt;/span>
$ alias sed&lt;span style="color:#f92672">=&lt;/span>cat &lt;span style="color:#75715e"># will the alias override everything?&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can query all objects that the name &lt;code>sed&lt;/code> is bound to. (Note: the variable
meaning won&amp;rsquo;t show up in this listing.)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ type -a sed
sed is aliased to &lt;span style="color:#e6db74">&amp;#39;cat&amp;#39;&lt;/span>
sed is a &lt;span style="color:#66d9ef">function&lt;/span>
sed &lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
echo lol
&lt;span style="color:#f92672">}&lt;/span>
sed is /bin/sed
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And we can invoke or evaluate each meaning of the word &lt;code>sed&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ man bash | sed &lt;span style="color:#75715e"># Oops. Boy, are we in trouble now.&lt;/span>
&lt;span style="color:#75715e"># Bash interprets the unquoted word as an alias, which is &amp;#39;cat&amp;#39;.&lt;/span>
$ man bash | command sed 1q &lt;span style="color:#75715e"># execute as a command (not function, or alias)&lt;/span>
BASH&lt;span style="color:#f92672">(&lt;/span>1&lt;span style="color:#f92672">)&lt;/span> General Commands Manual BASH&lt;span style="color:#f92672">(&lt;/span>1&lt;span style="color:#f92672">)&lt;/span>
$ &lt;span style="color:#e6db74">&amp;#39;sed&amp;#39;&lt;/span> &lt;span style="color:#75715e"># quoting prevents interpretation as alias. Function meaning gets used.&lt;/span>
lol
$ echo foo | &lt;span style="color:#e6db74">&amp;#39;sed&amp;#39;&lt;/span> &lt;span style="color:#75715e"># works fine in pipes too&lt;/span>
lol
$ echo $sed &lt;span style="color:#75715e"># the variable remains intact too&lt;/span>
phew!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This namespacing is certainly merciful, but it is not quite enough. As you
may have guessed, it can get very confusing if we reuse names willy-nilly.
If there was one thing I could improve about Bash, it would be adding &amp;ldquo;real&amp;rdquo;
namespaces. That would help write modular code. Alas, that ship sailed long ago.&lt;/p>
&lt;p>Anyway, I drop Bash after the code starts getting too involved; beyond about
1,000 LoC (of clean FP-style Bash). In large scripts, the sharp corners of Ye
Olde Shell start poking holes and forcing bugs (quoting, expansion, trap/error
handling etc.).&lt;/p>
&lt;p>That said (or um, sed), under 1K LoC clean FP-style Bash can do a crazy amount
of work sufficiently fast &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. That sweet spot is what this series
is all about. Like &lt;a href="https://github.com/adityaathalye/shite">shite&lt;/a> and &lt;a href="https://github.com/adityaathalye/oxo">oxo&lt;/a>.&lt;/p>
&lt;h2 id="how-to-design-good-functions">How to design good functions&lt;/h2>
&lt;p>Bash functions provide certain highly functional features like obeying stdio,
thus being streaming-friendly units of program design. Several other creature
comforts of functional style are not automatic. &lt;em>However&lt;/em> we can get plenty
functional with &lt;em>some&lt;/em> care and manual effort.&lt;/p>
&lt;p>Here are things I do to keep my functions, well, functional.&lt;/p>
&lt;h3 id="wrap-domain-concepts-in-single-purpose-functions">Wrap domain concepts in single-purpose functions&lt;/h3>
&lt;p>Previously, we wrapped invocations of Unix tools and pipelines in functions,
gave them domain-specific names, to achieve domain-specific compositional power.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sort_dictionary&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
sort -b -d -k2
&lt;span style="color:#f92672">}&lt;/span>
sort_rhyme&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
rev | sort -b -d | rev
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Small functions are absolutely fine! In fact, we prefer our functions be small,
single-purpose, and as general as possible, just like any other Unix tool.&lt;/p>
&lt;h3 id="use-parameter-substitutions-and-local-scope-variables">Use parameter substitutions and local scope variables&lt;/h3>
&lt;p>Functions only accept positional parameters, like regular shell scripts. And
like regular scripts, we can send input for evaluation as well as to control
behaviour of the function, as well will see later in this post.&lt;/p>
&lt;p>Unfortunately, positional-only params make optionality hard. The following
techniques help mitigate this limitation. Compare them with the example below.&lt;/p>
&lt;ul>
&lt;li>I tend to keep my functions small and avoid API design that requires more
than 3 parameters. This is just a nonscientific thumb rule.&lt;/li>
&lt;li>Next, I use Bash parameter substitution to provide sane fallbacks, and/or
enforce API contracts (fail and die if param not provided).&lt;/li>
&lt;li>I always assign positional params to local variables inside the function
body, which is a bit verbose, but improves readability and traceability.
And it makes any parameter substitution explicit.&lt;/li>
&lt;li>I also declare all named params as &lt;code>local&lt;/code>, which ensures variable scope
and mutation is local to the function.&lt;/li>
&lt;/ul>
&lt;p>Most of my parameter-accepting functions are designed with just one optional
parameter. Here is a motivating example from my little &lt;a href="https://github.com/adityaathalye/bash-toolkit">bash-toolkit&lt;/a> library.
The ones copied here help with ad-hoc log analysis tasks.&lt;/p>
&lt;p>Accept optional parameter, with a sane default.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">drop_first_n&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local lines&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#66d9ef">:-&lt;/span>0&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local offset&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$((&lt;/span> lines &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">))&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
tail -n +&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>offset&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
drop_last_n&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local lines&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#66d9ef">:-&lt;/span>0&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
head -n -&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>lines&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Enforce all parameters, as these functions are meaningless without them.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">drop_header_footer&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local header_lines&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1:?&lt;span style="color:#e6db74">&amp;#39;FAIL. Header line count required, 1-indexed.&amp;#39;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local footer_lines&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>2:?&lt;span style="color:#e6db74">&amp;#39;FAIL. Footer line count required, 1-indexed.&amp;#39;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
drop_first_n &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>header_lines&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> |
drop_last_n &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>footer_lines&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
window_from_to_lines&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local from_line&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1:?&lt;span style="color:#e6db74">&amp;#39;FAIL. \&amp;#34;FROM\&amp;#34; line number required, 1-indexed.&amp;#39;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local to_line&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>2:?&lt;span style="color:#e6db74">&amp;#39;FAIL. \&amp;#34;TO\&amp;#34; line number required, 1-indexed.&amp;#39;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
drop_first_n &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>from_line&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> |
head -n &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>to_line&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice how the latter two functions reuse the earlier functions to create
completely different log processing tools, yet retain flexibility to deal with
arbitrary parts of log files, as well as compose together any way we please
(not all of which will be sensible, but that&amp;rsquo;s besides the point :).&lt;/p>
&lt;p>There are many ways to do &lt;a href="https://wiki.bash-hackers.org/scripting/posparams">parameter handling&lt;/a>; a whole topic of its own.
Play around to get a sense for it, but keep your actual usage simple.&lt;/p>
&lt;h3 id="partial-application-of-functions">Partial application of functions&lt;/h3>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Partial%5Fapplication">Partial application&lt;/a> is not automatic in Bash,
but that does not mean we can&amp;rsquo;t do it.&lt;/p>
&lt;p>In the example below, a utility function &lt;code>__with_git_dir&lt;/code> knows something
about a git directory, but nothing about a git subcommand that we wish to run.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">__with_git_dir&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local repo_dir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
shift
git --git-dir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>repo_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/.git&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$@&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
git_fetch&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local repo_dir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
__with_git_dir &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>repo_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> fetch -q
&lt;span style="color:#f92672">}&lt;/span>
git_status&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
__with_git_dir &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> status
&lt;span style="color:#f92672">}&lt;/span>
git_branch_current&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local repo_dir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
__with_git_dir &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>repo_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> rev-parse --abbrev-ref&lt;span style="color:#f92672">=&lt;/span>strict HEAD
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>These functions &lt;a href="https://github.com/adityaathalye/bash-toolkit/blob/7cbac8bd6a7970481f6f62e5a2a604afcaf804ea/bulk-git-ops.sh#L99">belong to some git utilities&lt;/a> &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> that
help me conveniently run git commands against any repo on my file system,
without cd-ing to the repo.&lt;/p>
&lt;p>See? Functions can be dead-simple yet super useful. If you accumulate wee
functions for your git needs, you get executable documentation. You can &lt;code>source&lt;/code>
them in your Bash terminal on any computer and be on your way. Likewise, any
other command-line-y need of yours.&lt;/p>
&lt;h3 id="dependency-injection-with-functions">Dependency injection with functions&lt;/h3>
&lt;p>The previous section brought us close to dependency injection. We passed in
git subcommands as argument to the &lt;code>__with_git_dir&lt;/code> utility. &lt;em>&lt;strong>We can do the
same with our own functions.&lt;/strong>&lt;/em> This is a form of &amp;ldquo;higher order&amp;rdquo; Functional
Programming; viz. making functions that accept functions as arguments.&lt;/p>
&lt;p>For example, &lt;a href="https://github.com/adityaathalye/bash-toolkit/blob/7cbac8bd6a7970481f6f62e5a2a604afcaf804ea/bulk-git-ops.sh">see the same git utilities file&lt;/a> for usages such as these:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Use the &lt;code>xgit&lt;/code> utility fn to apply simple git commands to the given repos.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ls_git_projects ~/src/bitbucket | xgit fetch &lt;span style="color:#75715e"># bitbucket-hosted repos&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Use &lt;code>proc_repos&lt;/code> to apply custom functions to the given repos.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ls_git_projects ~/src/bitbucket |
proc_repos git_fetch &lt;span style="color:#75715e"># all repos&lt;/span>
ls_git_projects ~/src/bitbucket |
take_stale |
proc_repos git_fetch &lt;span style="color:#75715e"># only stale repos&lt;/span>
ls_git_projects ~/src/bitbucket |
take_active |
proc_repos git_fetch &lt;span style="color:#75715e"># only active repos&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>What&amp;rsquo;s the current branch?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ls_git_projects ~/src/bitbucket |
proc_repos git_branch_current
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;ve also used this design technique in &lt;a href="https://github.com/adityaathalye/shite">shite&lt;/a>
(the little static site generator from shell :).
This is baaasically what its &lt;a href="https://github.com/adityaathalye/shite/blob/f8d2d22316a8c2fc04c92c1390abb77c69377f6f/shite%5Futils.sh#L237">&amp;ldquo;main&amp;rdquo; function&lt;/a> does.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#75715e"># Build page and tee it into the public directory, namespaced by the slug&lt;/span>
cat &lt;span style="color:#e6db74">${&lt;/span>body_content_file&lt;span style="color:#e6db74">}&lt;/span> |
&lt;span style="color:#e6db74">${&lt;/span>content_proc_fn&lt;span style="color:#e6db74">}&lt;/span> |
&lt;span style="color:#75715e"># We have only one page builder today, but&lt;/span>
&lt;span style="color:#75715e"># we could have a variable number tomorrow.&lt;/span>
shite_build_page |
&lt;span style="color:#e6db74">${&lt;/span>html_formatter_fn&lt;span style="color:#e6db74">}&lt;/span> |
tee &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>shite_global_data[publish_dir]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>html_output_file_name&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>All the &lt;code>_fn&lt;/code>-suffixed variables are locals in the &amp;ldquo;main&amp;rdquo; fn, that are
assigned to function names we pass from the outside. Also notice the use of
sane fallbacks for the positional params in this case.&lt;/p>
&lt;h3 id="keeping-functions-pure">Keeping Functions pure&lt;/h3>
&lt;p>The &lt;code>return&lt;/code> statement in Bash returns exit codes, not values. So we have to
pause a bit to figure out how to &amp;ldquo;return&amp;rdquo; values. Well, we have to rely on
stdio, and the fact that the Unix tools philosophy encourages us to emit data
in the same format as we receive it.&lt;/p>
&lt;p>The &lt;code>identity&lt;/code> function is the simplest example. By definition, it returns
its input unchanged. That&amp;rsquo;s just &lt;code>cat&lt;/code>! Thus we can write this streaming
&lt;em>identity&lt;/em> function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">identity&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
cat -
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This definition of &lt;em>identity&lt;/em> is surprisingly useful, as we will see below.&lt;/p>
&lt;p>Note that I strongly favour pipeline-friendly domain modeling and functional
programming, to profit from the naturally streaming nature of Unix.&lt;/p>
&lt;p>Under such architecture, &lt;em>map&lt;/em>, &lt;em>filter&lt;/em>, and &lt;em>reduce&lt;/em> are automatic, and I
only need to write a pure &amp;ldquo;step&amp;rdquo; or single-item processing function.&lt;/p>
&lt;p>My &amp;ldquo;step&amp;rdquo; functions are simply transforms of input text (or data structure)
to output text (or data structure). This can be anything; in case of plain
text lines I do line transforms with &lt;code>sed&lt;/code> or &lt;code>printf&lt;/code>, or line selects
with &lt;code>grep&lt;/code>, or line-munging with &lt;code>tr&lt;/code> etc. I do the equivalent with &lt;code>jq&lt;/code>
for JSON-formatted lines. &lt;a href="http://evalapply.org/posts/shell-aint-a-bad-place-to-fp-part-1-doug-mcilroys-pipeline/">The previous post&lt;/a> featured such &amp;ldquo;step&amp;rdquo; functions
for &lt;em>map&lt;/em> (&lt;code>tokenise_lowercase&lt;/code>, &lt;code>bigram&lt;/code>), &lt;em>filter&lt;/em> (&lt;code>drop_stopwords&lt;/code>), and
&lt;em>reduce&lt;/em> (&lt;code>frequencies&lt;/code>, &lt;code>sort_dictionary&lt;/code>).&lt;/p>
&lt;p>&lt;em>shite&lt;/em> has a &lt;a href="https://github.com/adityaathalye/shite/blob/f8d2d22316a8c2fc04c92c1390abb77c69377f6f/shite%5Futils.sh#L89">more interesting example&lt;/a>.&lt;/p>
&lt;p>Suppose we want to make a blog site. For each blog post, only the content
changes. The surrounding HTML wrapper remains constant (head, body, header,
footer etc.). If we tease apart wrapper HTML construction and body HTML
construction, then we can write a &amp;ldquo;page builder&amp;rdquo; function like this. Note
the &lt;code>cat -&lt;/code> in the middle. Our identity function appears!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">shite_build_page&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
cat &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;span style="color:#e6db74">&amp;lt;!DOCTYPE html&amp;gt;
&lt;/span>&lt;span style="color:#e6db74">&amp;lt;html&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;head&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;!-- Some basic hygiene meta-data --&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;title&amp;gt;My Blog&amp;lt;/title&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;css/style.css&amp;#34;&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;/head&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;body&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;header id=&amp;#34;site-header&amp;#34;&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;h1&amp;gt;My Blog&amp;lt;/h1&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;hr&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;/header&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;main&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> $(cat -)
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;/main&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;footer&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;hr&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;p&amp;gt;All content is MIT licensed, except where specified otherwise.&amp;lt;/p&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;/footer&amp;gt;
&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;/body&amp;gt;
&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/html&amp;gt;
&lt;/span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Observe that &lt;code>$(cat -)&lt;/code> blindly injects content in the &lt;code>&amp;lt;main&amp;gt;&amp;lt;/main&amp;gt;&lt;/code> block,
received via stdin of the &lt;em>function&lt;/em> &lt;code>shite_build_page&lt;/code>. Thus, for the same
input it will always produce the same output, making it a pure function.
This choice also makes the caller responsible for passing it HTML, because
the output is HTML.&lt;/p>
&lt;p>Further, by the single responsibility principle, our function&amp;rsquo;s job is simply
to punch HTML content into an HTML wrapper and return the composite. So it is
vital that this function &lt;em>not know or care&lt;/em> how the HTML it receives is made.&lt;/p>
&lt;p>And here&amp;rsquo;s the cherry&amp;hellip; By making this design choice, we have in fact made
a step function that we can &lt;em>map&lt;/em> over many blog posts.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">gen_html_posts_from_md&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">while&lt;/span> read blog_post_md_file
&lt;span style="color:#66d9ef">do&lt;/span> local html_file_name&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>basename -s.md &lt;span style="color:#e6db74">${&lt;/span>blog_post_md_file&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">.html&amp;#34;&lt;/span>
pandoc -f markdown -t html &lt;span style="color:#e6db74">${&lt;/span>html_file_name&lt;span style="color:#e6db74">}&lt;/span> |
shite_build_page &amp;gt; ./public/posts/&lt;span style="color:#e6db74">${&lt;/span>html_file_name&lt;span style="color:#e6db74">}&lt;/span>
&lt;span style="color:#66d9ef">done&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Thus, if our blog posts are &lt;code>markdown&lt;/code> files in some folder (let&amp;rsquo;s say under
a &lt;code>content&lt;/code> directory). We can do this.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">find ./content/posts/ -type f -name *.md |
gen_html_posts_from_md
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A reader may complain that our HTML posts generator function is too specific
to the markdown format, and knows too much about how to transform markdown
to HTML, as well as where to put it. Its job ought to be just to describe
the transform process.&lt;/p>
&lt;p>The reader would be right, and may like to solve the problem at home &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> :)&lt;/p>
&lt;h2 id="program-design-with-functions">Program design with functions&lt;/h2>
&lt;p>Now, how do we apply functional programming principles to the next level up,
viz. to design our programs?&lt;/p>
&lt;p>If you&amp;rsquo;ve seen shell scripts in the wild, you&amp;rsquo;d have observed they are often
written as sequences of statements and imperative control flow that evaluates
top to bottom. I think that practice is a bit tragic, because it produces
needlessly complex code, because people reach for flags and global variables
and traps and suchlike.&lt;/p>
&lt;p>Functions obviate a lot of that icky stuff. We still need the ick, but we can
constrain it to very specific tightly controlled bits of our program, and only
when the ick makes absolute sense.&lt;/p>
&lt;p>I will also say that if we can make programs that are themselves functional
compositions, then we can chain entire programs together into still larger
scale functional structures. Further, since stdio includes named pipes, and
sockets, we can compose multi-process as well as multi-machine pipelines,
with a great economy of code. And this is &lt;em>not&lt;/em> insane at all. Seriously.&lt;/p>
&lt;p>But I&amp;rsquo;m getting ahead of myself. Here is how I try to keep my programs functional.&lt;/p>
&lt;h3 id="writing-pipeline-friendly-functions">Writing Pipeline-friendly Functions&lt;/h3>
&lt;p>Frequently, an imperative algorithm can also be expressed in data-flow terms.
That is, instead of if-else-y code, think in terms of map/filter/reduce.&lt;/p>
&lt;p>Once again, recalling the git utility functions referenced above. Suppose you
had to return a list of &amp;ldquo;stale&amp;rdquo; repositories from a given directory, you may
be tempted to write something like this. (Here &amp;ldquo;stale&amp;rdquo; means &amp;ldquo;not worked on
for the last N hours&amp;rdquo;).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">get_stale_repos&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local repos_root_dir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local stale_hrs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>2&lt;span style="color:#66d9ef">:-&lt;/span>12&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local hrs_ago&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$((&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>date +%s&lt;span style="color:#66d9ef">)&lt;/span>
&lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>stat -c %Y &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>repo_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/.git&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">3600&lt;/span> &lt;span style="color:#66d9ef">))&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> repo_dir in &lt;span style="color:#66d9ef">$(&lt;/span>ls &lt;span style="color:#e6db74">${&lt;/span>repos_root_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> $hrs_ago -le $stale_hrs &lt;span style="color:#f92672">]]&lt;/span>
&lt;span style="color:#66d9ef">then&lt;/span> printf &lt;span style="color:#e6db74">&amp;#34;%s\n&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;active: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>repo_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span> printf &lt;span style="color:#e6db74">&amp;#34;%s\n&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;stale: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>repo_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#66d9ef">done&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However this kind of implementation combines (&amp;ldquo;complects&amp;rdquo;) many different things.&lt;/p>
&lt;p>Given the fact that functions respect &lt;code>stdio&lt;/code>, we can pull apart our imperative
attempt. The insight is to combine &lt;code>while&lt;/code> and &lt;code>read&lt;/code> as follows. I use this
idiom a lot because it helps me drastically simplify my code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">__is_repo_active&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local repo_dir&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local stale_hrs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>2&lt;span style="color:#66d9ef">:-&lt;/span>12&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local hrs_ago&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$((&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>date +%s&lt;span style="color:#66d9ef">)&lt;/span>
&lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>stat -c %Y &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>repo_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/.git&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">3600&lt;/span> &lt;span style="color:#66d9ef">))&lt;/span>
&lt;span style="color:#f92672">[[&lt;/span> $hrs_ago -le $stale_hrs &lt;span style="color:#f92672">]]&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
take_stale&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local repo_dir
&lt;span style="color:#66d9ef">while&lt;/span> read repo_dir
&lt;span style="color:#66d9ef">do&lt;/span> __is_repo_active &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>repo_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> printf &lt;span style="color:#e6db74">&amp;#34;%s\n&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>repo_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">done&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can do this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ls ~/src/github/adityaathalye |
take_stale
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And we get bonus reuse, because we may also want to do the inverse.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">take_active&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local repo_dir
&lt;span style="color:#66d9ef">while&lt;/span> read repo_dir
&lt;span style="color:#66d9ef">do&lt;/span> __is_repo_active &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>repo_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> printf &lt;span style="color:#e6db74">&amp;#34;%s\n&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>repo_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">done&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With a little bit more thinking, we can pull apart this logic even further,
usefully. Hint: these functions have a &lt;code>filter&lt;/code> embedded inside them.&lt;/p>
&lt;p>As another fun example, one @rsms &lt;a href="https://twitter.com/rsms/status/1508900257324666882">tweeted this&lt;/a> recently:&lt;/p>
&lt;blockquote>
&lt;p>Was curious about source code-line length so wrote a horribly hacky bash
script that draws a histogram. &lt;a href="https://gist.github.com/rsms/36bda3b5c8ab83d951e45ed788a184f4">https://gist.github.com/rsms/36bda3b5c8ab83d951e45ed788a184f4&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>I saw the script and my habitual thought kicked in, &amp;ldquo;Well, why can&amp;rsquo;t that be
a pipeline?&amp;rdquo;. A short while later, this emerged.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#75715e"># get some lines of text&lt;/span>
man bash |
&lt;span style="color:#75715e"># remove blank lines (extensible to any non-code lines)&lt;/span>
grep -v &lt;span style="color:#e6db74">&amp;#39;^$&amp;#39;&lt;/span> |
&lt;span style="color:#75715e"># count chars for each line&lt;/span>
&lt;span style="color:#66d9ef">while&lt;/span> read line; &lt;span style="color:#66d9ef">do&lt;/span> echo &lt;span style="color:#e6db74">${&lt;/span>line&lt;span style="color:#e6db74">}&lt;/span> | wc -c - | cut -d&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> -f1; &lt;span style="color:#66d9ef">done&lt;/span> |
&lt;span style="color:#75715e"># calculate the frequency distribution&lt;/span>
sort -nr | uniq -c |
&lt;span style="color:#75715e"># add a histogram graph to the frequency distribution&lt;/span>
&lt;span style="color:#66d9ef">while&lt;/span> read lines cols;
&lt;span style="color:#66d9ef">do&lt;/span> printf &lt;span style="color:#e6db74">&amp;#34;%s\t%s\t%s\n&amp;#34;&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>lines&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>cols&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>printf &lt;span style="color:#e6db74">&amp;#34;%0.s|&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>seq &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>cols&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#66d9ef">))&lt;/span>;
&lt;span style="color:#66d9ef">done&lt;/span> |
&lt;span style="color:#75715e"># add labels to the histogram&lt;/span>
cat &amp;lt;&lt;span style="color:#f92672">(&lt;/span>printf &lt;span style="color:#e6db74">&amp;#34;%s\t%s\t%s\n&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;LN&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;COL&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;HIST(|=8COL)&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> -
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note the similarities to McIlroy&amp;rsquo;s pipeline from the last post. Also, like
that program, mine too fits in a tweet and I wasn&amp;rsquo;t even trying.&lt;/p>
&lt;h3 id="separating-return-values-and-non-values">Separating return values and non-values&lt;/h3>
&lt;p>&amp;ldquo;Don&amp;rsquo;t be chatty&amp;rdquo; is an important design principle. This means don&amp;rsquo;t pollute
your stdout values with non-values. Sometimes though, we want to emit process
information (like logs) &lt;em>along&lt;/em> with emitting process output. For example,
a structured process log becomes handy when we want to design idempotent jobs.&lt;/p>
&lt;p>Going back to my &lt;a href="https://github.com/adityaathalye/bash-toolkit/blob/7cbac8bd6a7970481f6f62e5a2a604afcaf804ea/bulk-git-ops.sh#L49">bulk-git-ops example&lt;/a>,
suppose I want to process a whole bunch of git repos. This may fail any time
if my network flakes, or laptop battery dies, or some weird condition occurs.
Sh*t happens when processes run for a long time &lt;em>and&lt;/em> need networks. So I
usually want to log each repo as it is being processed.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">identity&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
printf &lt;span style="color:#e6db74">&amp;#34;%s\n&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$@&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
proc_repos&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e"># Apply any given operation on the given repos. Use in a pipeline.&lt;/span>
&lt;span style="color:#75715e"># Presumably, the supplied function emits values expected by stdin&lt;/span>
&lt;span style="color:#75715e"># of the downstream function.&lt;/span>
local func&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#66d9ef">:-&lt;/span>identity&lt;span style="color:#e6db74">}&lt;/span>
local repo_dir
&lt;span style="color:#66d9ef">while&lt;/span> read repo_dir
&lt;span style="color:#66d9ef">do&lt;/span> $func &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>repo_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
log_info &lt;span style="color:#e6db74">&amp;#34;Applied &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>func&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> to &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>repo_dir&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">done&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This way a downstream consumer can rely on always receiving a legal value at
stdin, and &lt;em>optionally&lt;/em> access non-values (like logs), if it wants to, via
stderr &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>I casually name-dropped &lt;em>idempotence&lt;/em>. It needs its own blog post. Maybe the
next one!&lt;/p>
&lt;h3 id="functions-to-delay-evaluation">Functions to delay evaluation&lt;/h3>
&lt;p>I like to write my code in groups and sequences that help a reader acquire
context easily, and I call it in sequences that make sense from a process
point of view. Functions help me do this, because they group statements in
the scope of the script, &lt;em>without&lt;/em> causing the interpreter to evaluate them.&lt;/p>
&lt;p>For example, scripts I wrote:&lt;/p>
&lt;ul>
&lt;li>to &lt;a href="https://gitlab.com/nilenso/cats/-/blob/c26bcd7e6618843690070b8bf38cf7adb553a0d2/bin/cicd-deployment.sh#L122">perform build/deploy steps&lt;/a> for a study project&lt;/li>
&lt;li>to help me &lt;a href="https://github.com/adityaathalye/bash-toolkit/blob/7cbac8bd6a7970481f6f62e5a2a604afcaf804ea/machine-setup.sh#L274">set up my machine&lt;/a> (or at least remember what I have use for :)&lt;/li>
&lt;/ul>
&lt;h3 id="functional-core-imperative-shell">Functional core, imperative shell&lt;/h3>
&lt;p>Pun intended. This is &lt;a href="https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell">a very useful design technique&lt;/a>.&lt;/p>
&lt;p>We lift out as much work as possible into lots of small, pure, single purpose
functions, and compose these separately to do composite work and/or to cause
effects (perform I/O, set/reset globals, mutate in-process state etc.).&lt;/p>
&lt;p>You may observe it applied in all my code:&lt;/p>
&lt;ul>
&lt;li>My &lt;a href="https://github.com/adityaathalye/bash-toolkit/blob/7cbac8bd6a7970481f6f62e5a2a604afcaf804ea/usage-trap.sh#L109">usage-trap file&lt;/a>
is a template for how I tend to go about that for single-file scripts.&lt;/li>
&lt;li>The whole game design of &lt;a href="https://github.com/adityaathalye/oxo">oxo&lt;/a>:
&lt;ul>
&lt;li>The &lt;code>oxo_logic.sh&lt;/code> file is the &amp;ldquo;functional core&amp;rdquo;.&lt;/li>
&lt;li>The &lt;code>oxo&lt;/code> file is the &amp;ldquo;imperative shell&amp;rdquo; (and is the game&amp;rsquo;s entry point).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/adityaathalye/shite">shite&lt;/a> is being developed exactly this way.&lt;/li>
&lt;/ul>
&lt;p>This technique helps me develop scripts incrementally, in terms of highly
reusable, testable, composable functional &amp;ldquo;lego blocks&amp;rdquo;.&lt;/p>
&lt;h2 id="naming-conventions">Naming conventions&lt;/h2>
&lt;p>Now the really hard part&amp;hellip;&lt;/p>
&lt;p>I write all my function names as follows, because it is the most portable
syntax. Bash accepts several ways to define functions, but POSIX sh strictly
expects this syntax, and I prefer to maintain as much compatibility as I can.
Also I find it is the neatest of the alternatives.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">namespace_func_name&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
statement &lt;span style="color:#ae81ff">1&lt;/span>
statement &lt;span style="color:#ae81ff">2&lt;/span>
statement &lt;span style="color:#ae81ff">3&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sometimes I write short one-liners as follows. The semicolon is essential
for one-liners. So is the space between the braces and the statement.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">namespace_func_name&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span> statement ; &lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is no such thing as a &amp;ldquo;private&amp;rdquo; or locally-scoped function, so I resort
to marking these &amp;ldquo;private&amp;rdquo; by convention with a &lt;code>__&lt;/code> (double underscore) prefix.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">__namespace_private_func_name&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
statement1
statement2
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following syntax is legal Bash, but I do not use it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#66d9ef">function&lt;/span> namespace_func_name &lt;span style="color:#f92672">{&lt;/span>
statement1
statement2
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> namespace_func_name&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
statement1
statement2
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e"># OR one-liner variants&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> namespace_func_name &lt;span style="color:#f92672">{&lt;/span> statement ; &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> namespace_func_name&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span> statement ; &lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Bash accepts &lt;code>.&lt;/code> and &lt;code>-&lt;/code> in function names, but that is also a no-no for me.
A linter like Shellcheck will complain in strict mode.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">namespace.funcname&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
statement &lt;span style="color:#ae81ff">1&lt;/span>
statement &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
namespace-funcname&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
statement &lt;span style="color:#ae81ff">1&lt;/span>
statement &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ok, we covered a lot of ground, so I&amp;rsquo;ll stop for now. There are more aspects
of FP in bash (idempotence, declarative programming etc.), for future posts.
But even this much will elevate your shell-fu, and let you write nontrivial
scripts incrementally, safely, and maintainably.&lt;/p>
&lt;p>Happy Bash-ing!&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>And if you use awk, I hear that it is known to outperform hand optimized C for a variety of data processing problems. Apparently genomics people awk a lot.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>You may particularly enjoy those if you sometimes (or often) have to do bulk maintenance on many repos. Fetch and update them, or at least identify stale repos before deciding what to do etc.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Hint: Partial application and/or dependency injection may be appropriate.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>Monads. There, I said it.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content></item><item><title>Which Clojure codebases should I read? How and why?</title><link>/posts/which-clojure-codebases-to-read-how-and-why/</link><pubDate>Tue, 19 Apr 2022 19:48:41 +0530</pubDate><guid>/posts/which-clojure-codebases-to-read-how-and-why/</guid><description>&lt;p>This question is frequently asked by newcomers to Clojure. I struggled a lot
with this too. I still do from time to time, in unfamiliar territory.&lt;/p>
&lt;p>These days, I feel like I&amp;rsquo;m in unfamiliar territory a lot. Various Clojurians
&amp;mdash; individuals and groups &amp;mdash; have been producing so much creative, diverse
work over these last few years, that keeping up is impossible!&lt;/p>
&lt;p>No doubt this surfeit of creativity intimidates newcomers. The strange ideas
and lingo and ways of thinking and writing espoused by Clojurians can seem so
very alien. But despair not, for Clojureland also has a surfeit of friendly,
helpful people. And very many of our codebases are small! You will be able to
read them!&lt;/p>
&lt;p>This post explains what I believe I&amp;rsquo;ve done subconsciously over the years. It
is as much an answer for somewhat experienced me as it is for the relative
newcomer you!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#a-quick-motivating-example">A quick motivating example&lt;/a>&lt;/li>
&lt;li>&lt;a href="#heuristics-to-choose-a-project-to-read">Heuristics to choose a project to read&lt;/a>&lt;/li>
&lt;li>&lt;a href="#effective-way--s--to-read-a-project">Effective way(s) to read a project&lt;/a>&lt;/li>
&lt;li>&lt;a href="#suggested-projects-with-short-reasons-why-to-read">Suggested projects with short reasons why to read&lt;/a>&lt;/li>
&lt;li>&lt;a href="#library-maintainers-would-howtoreadmes-make-sense">Library maintainers: Would HOWTOREADMEs make sense?&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>(Note: This post is likely to be revised a few times. I&amp;rsquo;ve quick-fire published
it to solicit feedback and to use it as a discussion tool for &lt;a href="https://github.com/clojure/clojure-site/issues/586">an ongoing conversation&lt;/a>
about this topic.)&lt;/p></description><content>&lt;p>This question is frequently asked by newcomers to Clojure. I struggled a lot
with this too. I still do from time to time, in unfamiliar territory.&lt;/p>
&lt;p>These days, I feel like I&amp;rsquo;m in unfamiliar territory a lot. Various Clojurians
&amp;mdash; individuals and groups &amp;mdash; have been producing so much creative, diverse
work over these last few years, that keeping up is impossible!&lt;/p>
&lt;p>No doubt this surfeit of creativity intimidates newcomers. The strange ideas
and lingo and ways of thinking and writing espoused by Clojurians can seem so
very alien. But despair not, for Clojureland also has a surfeit of friendly,
helpful people. And very many of our codebases are small! You will be able to
read them!&lt;/p>
&lt;p>This post explains what I believe I&amp;rsquo;ve done subconsciously over the years. It
is as much an answer for somewhat experienced me as it is for the relative
newcomer you!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#a-quick-motivating-example">A quick motivating example&lt;/a>&lt;/li>
&lt;li>&lt;a href="#heuristics-to-choose-a-project-to-read">Heuristics to choose a project to read&lt;/a>&lt;/li>
&lt;li>&lt;a href="#effective-way--s--to-read-a-project">Effective way(s) to read a project&lt;/a>&lt;/li>
&lt;li>&lt;a href="#suggested-projects-with-short-reasons-why-to-read">Suggested projects with short reasons why to read&lt;/a>&lt;/li>
&lt;li>&lt;a href="#library-maintainers-would-howtoreadmes-make-sense">Library maintainers: Would HOWTOREADMEs make sense?&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>(Note: This post is likely to be revised a few times. I&amp;rsquo;ve quick-fire published
it to solicit feedback and to use it as a discussion tool for &lt;a href="https://github.com/clojure/clojure-site/issues/586">an ongoing conversation&lt;/a>
about this topic.)&lt;/p>
&lt;hr>
&lt;h2 id="a-quick-motivating-example">A quick motivating example&lt;/h2>
&lt;p>I haven&amp;rsquo;t done much focused code reading recently, but semi-recently, I went
down the rabbit hole of comparing &amp;ldquo;System&amp;rdquo; libraries. The details are for a
separate blog post. I&amp;rsquo;ve placed it here as reference material to illustrate
some of this post.&lt;/p>
&lt;p>&lt;a href="https://github.com/adityaathalye/slideware/raw/master/Grokking%20Libraries%20in%20Clojureland.pdf">Grokking Libraries in Clojureland&lt;/a> (PDF, slides).&lt;/p>
&lt;h2 id="heuristics-to-choose-a-project-to-read">Heuristics to choose a project to read&lt;/h2>
&lt;p>This kind of code reading is best viewed as applied, directed reading designed
to deeply understand creative (and destructive) ways to use an instrument,
in this case, Clojure the language, its standard library, idioms, patterns,
and style.&lt;/p>
&lt;p>The key problem here is &amp;ldquo;you don&amp;rsquo;t know what you don&amp;rsquo;t know&amp;rdquo;. Coming up with
a set of heuristics can help discover good choices. In fact, one can make a
decision-making matrix of #{libraries} X #{heuristics}, like so:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Heuristic / Library&lt;/th>
&lt;th>Lib A&lt;/th>
&lt;th>Lib B&lt;/th>
&lt;th>Lib C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Code size (LoC)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Code complexity (high/mid/low)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Utility&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stability (high, mid, low)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Docs&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Talks&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tutorials&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>It also helps to decide a domain or area of knowledge (web/HTML, web/HTTP,
algorave, databases etc.), before drawing up the decision-making matrix.&lt;/p>
&lt;p>Here is a set of opinions and heuristics to steal and/or riff off.&lt;/p>
&lt;h3 id="choosing-an-area-of-domain-knowledge">Choosing an area of domain knowledge&lt;/h3>
&lt;p>Knowledge about a domain or problem space is a source of massive cognitive
overhead. It helps a lot to pick an area of knowledge you feel you are most
comfortable with, and narrow your code search and reading to that area.&lt;/p>
&lt;p>For example, web programmers may want to read an HTTP library. Musicians may
want to find a music synthesis codebase. Frontend people many like to read
HTML / CSS parsers or generators. Database nerds may want to know how we do
stuff without fancy ORMs etc.&lt;/p>
&lt;h3 id="project-type">Project type&lt;/h3>
&lt;p>Choose single-purpose libraries. The Clojure world is full of libraries of
various sizes and responsibilities. Most of these tend to focus very sharply
on one single problem, which makes it easier to build and retain complete
context in one&amp;rsquo;s head. These tend to be good place to start.&lt;/p>
&lt;p>Application code, by contrast, tends to be a complex (or complected) mix
of domains, patterns, libraries. This makes it easy to get lost.&lt;/p>
&lt;p>Further, there is no one true way to organise Clojure apps. Often, apps
don&amp;rsquo;t even mirror standard conventions seen elsewhere (e.g. MVC/MVCC etc.).
Clojure apps are assemblies of libraries, where each library choice comes
with some technical and/or design tradeoff. Further, build tools vary. App
configuration systems vary. etc. etc. many tens of moving parts.&lt;/p>
&lt;p>One eventually develops a sense for it all, but most of it is completely not
obvious when one is just starting off. It makes way-finding really hard.
You will spend lots of time just to figure out how some app is wired together.&lt;/p>
&lt;p>So it&amp;rsquo;s better to subtract everything until you are left with a singular
idea and its expression. That is, often, a single-purpose library!&lt;/p>
&lt;h3 id="code-size">Code size&lt;/h3>
&lt;p>Prefer libraries with as few lines of code as possible. The good news is
that Clojure libraries tend to focus on a single well-defined problem,
which tends to result in small &lt;em>and complete&lt;/em> solutions to problems. Many
excellent Clojure libraries weigh in at under 1,000 LoC.&lt;/p>
&lt;p>With some effort, you can hope to hold the entire codebase in your head.
Once that happens, your brain will discover things in diffuse mode in your
shower or on a walk or something. And then you know you&amp;rsquo;ve struck gold!&lt;/p>
&lt;h3 id="code-complexity">Code complexity&lt;/h3>
&lt;p>Even if a library is small, it may be complex, because it address a hard
problem. This is tricky to infer up-front, and that&amp;rsquo;s fine. Getting stuck is
part of the process. One mitigation is to skim-read the source first. If you
see very deeply indented code, or lots of large functions, or lots of macros,
maybe park it for later. Definitely prefer libraries without advanced macrology
(unless your purpose is to understand advanced macrology :).&lt;/p>
&lt;h3 id="utility">Utility&lt;/h3>
&lt;p>How much is the library used? A well-used library may be widely used, or it
may be niche but heavily used. Either way, odds are good that the source has
been vetted. Also it improves your chances of finding help if you get stuck.&lt;/p>
&lt;p>Some proxy measures like github stars, a dedicated channel in Slack or Zulip,
or references in mailing list history can help judge this. If you are still
uncertain, just drop a message in one of the community forums. Helpful people
will help!&lt;/p>
&lt;h3 id="talks-docs-tutorials">Talks, docs, tutorials&lt;/h3>
&lt;p>Are talks, docs, and tutorials available for the library, or at least the space
the library addresses? The code often does not tell the full story of the
&amp;ldquo;why?&amp;rdquo; of the library, the roads not taken or choices unmade. Code also tends
not to convey the author&amp;rsquo;s mental process. This is the highest value learning
that comes from reading; viz. learning a new way to think. So knowing what
knowledgeable people have been saying about the space/code is very useful.&lt;/p>
&lt;h3 id="beware-the-falsehood-of-dead-repos">Beware the falsehood of &amp;ldquo;dead&amp;rdquo; repos&lt;/h3>
&lt;p>Many in-use Clojure libraries don&amp;rsquo;t see frequent (or large) updates. This is
a virtue in our circles. It indicates finished-ness and stability. In fact, if
you find a repo with no commits for months or years, and a &amp;ldquo;liveness advisory&amp;rdquo;
on it, you &lt;em>definitely&lt;/em> want to read that code. That code has proven itself
handsomely!&lt;/p>
&lt;h2 id="effective-way--s--to-read-a-project">Effective way(s) to read a project&lt;/h2>
&lt;p>This is basically a set of ways to &lt;em>engage&lt;/em> with the material. The programmer
equivalent of textbook underlining, marginalia, scribbling notes and diagrams.&lt;/p>
&lt;h3 id="read-the-readme-and-api-docs">Read the README and API docs&lt;/h3>
&lt;p>And keep them handy. Ideally figure out the &lt;em>why&lt;/em> of the project before getting
into the weeds, because weeds there will be.&lt;/p>
&lt;h3 id="use-the-repl">Use the REPL&lt;/h3>
&lt;p>I habitually use &lt;code>clojure.repl/source&lt;/code>, to pull up source code for functions
that are new to me.&lt;/p>
&lt;h3 id="learn-to-navigate-the-code">Learn to navigate the code&lt;/h3>
&lt;p>Find editor functions that let you see an overview of a namespace, jump to
and fro from definitions.&lt;/p>
&lt;h3 id="experiment">&lt;em>Experiment&lt;/em>&lt;/h3>
&lt;p>IMHO it is critical to &lt;em>experiment&lt;/em> with the code. Passive reading gets us
only so far. To truly grok code one must modify and play with it! This is
where one thanks oneself for choosing a focused, concise project :)&lt;/p>
&lt;h3 id="comparitive-literature-approach">&amp;ldquo;Comparitive Literature&amp;rdquo; approach&lt;/h3>
&lt;p>Preferably find a space where multiple libraries exist. As long as one well
used library is present, it is fine if unused ones exist too. Frequently
contemporary libraries aim to overcome walls their classic brethren hit, or
are novel approaches to the same problem that offer a different set of
tradeoffs v/s the classics.&lt;/p>
&lt;p>There is much to learn from bygone classics, but only after one works through
the contemporary stuff, and has several &amp;ldquo;Wait, but why?&amp;rdquo; moments.&lt;/p>
&lt;h3 id="alt-implementation">Alt-implementation&lt;/h3>
&lt;p>The Black Belt move is to combine experimentation and comparative lit. and
try to hack up your own alternate implementation, by purposely taking a
completely different approach to representing the problem space, as compared
to the library under study.&lt;/p>
&lt;h2 id="suggested-projects-with-short-reasons-why-to-read">Suggested projects with short reasons why to read&lt;/h2>
&lt;p>This is a first-cut top-of-mind list, from the top of &lt;em>my&lt;/em> chaotic mind.
Take with a pinch of salt!&lt;/p>
&lt;p>Cross-reference with &lt;a href="https://github.com/clojure/clojure-site/issues/586">this discussion&lt;/a>
where folks are trying to figure out what projects to suggest, how, and why,
as part of an FAQ or a Guide at the official Clojure website.&lt;/p>
&lt;h3 id="web-html-css">web/HTML/CSS&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://github.com/weavejester/hiccup">weavejester/hiccup&lt;/a>&lt;/strong> to understand
a natural translation of one domain (HTML) to Clojure data. Writing HTML as
Clojure data is what we mean when we say &amp;ldquo;well, it&amp;rsquo;s just data&amp;rdquo; or &amp;ldquo;data DSL&amp;rdquo;.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://github.com/noprompt/garden">noprompt/garden&lt;/a>&lt;/strong>
which does unto CSS what Hiccup does unto HTML.&lt;/li>
&lt;/ul>
&lt;h3 id="web-http">web/HTTP&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://github.com/ring-clojure/ring">Ring&lt;/a>&lt;/strong>, to understand one of the
most popular HTTP server abstractions in the Clojureverse.&lt;/li>
&lt;/ul>
&lt;h3 id="clojure-itself">Clojure itself&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://github.com/clojure/clojure/blob/master/src/clj/clojure/test.clj">Clojure.test&lt;/a>&lt;/strong>
which is the built-in testing framework, in a surprisingly small amount of
code. Also, incidentally, to start feeling OK diving into Clojure&amp;rsquo;s own source.&lt;/li>
&lt;/ul>
&lt;h3 id="database-queries">Database queries&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://github.com/seancorfield/honeysql">honeysql&lt;/a>&lt;/strong>
to grok a way to represent the Domain of SQL queries as Clojure data.&lt;/li>
&lt;/ul>
&lt;h3 id="music-maker">Music maker&lt;/h3>
&lt;p>There&amp;rsquo;s lots out there that I don&amp;rsquo;t know of, but&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/overtone/overtone">overtone/overtone&lt;/a>, but it is a big project&lt;/li>
&lt;li>&lt;a href="https://github.com/ssrihari/ragavardhini">ssrihari/ragavardhini&lt;/a> is smaller&lt;/li>
&lt;/ul>
&lt;h3 id="system-start-stop-thingy">&amp;ldquo;System&amp;rdquo; start/stop thingy&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://github.com/stuartsierra/component">stuartsierra/component&lt;/a>&lt;/strong>
&amp;ldquo;Managed lifecycle of stateful objects in Clojure&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;h3 id="app-configuration-thingy">App configuration thingy&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://github.com/juxt/aero">juxt/aero&lt;/a>&lt;/strong>
&amp;ldquo;A small library for explicit, intentful configuration.&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h3 id="applications-designed-for-copy-and-hack">Applications designed for &amp;ldquo;copy-and-hack&amp;rdquo;&lt;/h3>
&lt;p>As &lt;a href="https://github.com/puredanger">@puredanger&lt;/a> and &lt;a href="https://github.com/plexus">@plexus&lt;/a> have &lt;a href="https://github.com/clojure/clojure-site/issues/586">written here&lt;/a>:
If you&amp;rsquo;re wondering &amp;ldquo;what&amp;rsquo;s something similar I can copy and hack on&amp;rdquo; or
&amp;ldquo;what does a real project look like&amp;rdquo;?&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/seancorfield/usermanager-example">seancorfield/usermanager-example&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/clojureverse/clojurians-log-app">clojureverse/clojurians-log-app&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="large-scale-repos">Large-scale repos&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/nasa/Common-Metadata-Repository">NASA&amp;rsquo;s Common Metadata Repository&lt;/a>
project, just to have one&amp;rsquo;s mind blown :D&lt;/li>
&lt;/ul>
&lt;h2 id="library-maintainers-would-howtoreadmes-make-sense">Library maintainers: Would HOWTOREADMEs make sense?&lt;/h2>
&lt;p>Hi! First, thank you for your library work! I&amp;rsquo;m just thinking aloud here&amp;hellip;&lt;/p>
&lt;p>Suppose Clojure library authors write little reading guides for their projects;
&lt;strong>&amp;ldquo;How to read me&amp;quot;s&lt;/strong>? Maybe a paragraph or two that provides context like:&lt;/p>
&lt;ul>
&lt;li>Suggested entry point and Meta-dot pathway&lt;/li>
&lt;li>The most important namespace(s)&lt;/li>
&lt;li>Interesting functions&lt;/li>
&lt;li>Tests or Rich comments to try out on priority&lt;/li>
&lt;li>Any known hairy-scary bits or gotchas&lt;/li>
&lt;li>Perhaps a line or two suggesting &amp;ldquo;compare with Alternate Libs A, B, C&amp;rdquo;&lt;/li>
&lt;li>etc.&lt;/li>
&lt;/ul>
&lt;p>A reader may fruitfully combine this guidance with information about project
purpose, rationale, and any open issues marked &amp;ldquo;beginner&amp;rdquo; etc.&lt;/p></content></item><item><title>Why and How I use "Org Mode" for my writing and more</title><link>/posts/why-and-how-i-use-org-mode/</link><pubDate>Tue, 19 Apr 2022 00:27:40 +0530</pubDate><guid>/posts/why-and-how-i-use-org-mode/</guid><description>&lt;p>You won&amp;rsquo;t know of &lt;a href="https://orgmode.org/">Org Mode&lt;/a> if you live a normal life.
&lt;a href="https://orgmode.org/features.html">This page&lt;/a> has pictures that will help you visualise it.&lt;/p>
&lt;p>It is a decidedly un-sexy under-marketed weirdly niche tool for note taking
(and a lot more). &amp;ldquo;Your life in plain text&amp;rdquo;, they say.&lt;/p>
&lt;p>Yet, I find myself telling people that they will have to pry it from my cold
dead hands. Which befuddles me. Why, as an ingrate software nerd who has
soured on software technology &amp;mdash;talk about biting the hand that feeds&amp;mdash; do
I evince such strong sentiment about a software program?!&lt;/p>
&lt;p>Also, &lt;em>plain text&lt;/em>? In 2022?!&lt;/p>
&lt;p>Well, join the wonder club. I&amp;rsquo;ve been wondering the same thing!&lt;/p>
&lt;p>With further ado, I will:&lt;/p>
&lt;ul>
&lt;li>illustrate my org-mode use with real examples&lt;/li>
&lt;li>describe my &amp;ldquo;what, why, and how&amp;rdquo; in generally applicable terms&lt;/li>
&lt;li>discuss some common objections and concerns&lt;/li>
&lt;li>offer some shiny brain-food for your imagination&lt;/li>
&lt;/ul>
&lt;p>Also nerd alert. I can&amp;rsquo;t remove some technicalities without also dumbing it
down and doing your intelligence a disservice. Email me if you need help.&lt;/p>
&lt;p>Take what is useful and discard the rest!&lt;/p></description><content>&lt;p>You won&amp;rsquo;t know of &lt;a href="https://orgmode.org/">Org Mode&lt;/a> if you live a normal life.
&lt;a href="https://orgmode.org/features.html">This page&lt;/a> has pictures that will help you visualise it.&lt;/p>
&lt;p>It is a decidedly un-sexy under-marketed weirdly niche tool for note taking
(and a lot more). &amp;ldquo;Your life in plain text&amp;rdquo;, they say.&lt;/p>
&lt;p>Yet, I find myself telling people that they will have to pry it from my cold
dead hands. Which befuddles me. Why, as an ingrate software nerd who has
soured on software technology &amp;mdash;talk about biting the hand that feeds&amp;mdash; do
I evince such strong sentiment about a software program?!&lt;/p>
&lt;p>Also, &lt;em>plain text&lt;/em>? In 2022?!&lt;/p>
&lt;p>Well, join the wonder club. I&amp;rsquo;ve been wondering the same thing!&lt;/p>
&lt;p>With further ado, I will:&lt;/p>
&lt;ul>
&lt;li>illustrate my org-mode use with real examples&lt;/li>
&lt;li>describe my &amp;ldquo;what, why, and how&amp;rdquo; in generally applicable terms&lt;/li>
&lt;li>discuss some common objections and concerns&lt;/li>
&lt;li>offer some shiny brain-food for your imagination&lt;/li>
&lt;/ul>
&lt;p>Also nerd alert. I can&amp;rsquo;t remove some technicalities without also dumbing it
down and doing your intelligence a disservice. Email me if you need help.&lt;/p>
&lt;p>Take what is useful and discard the rest!&lt;/p>
&lt;blockquote>
&lt;p>Org is a highly flexible structured plain text file format, composed of a
few simple, yet versatile, structures — constructed to be both simple enough
for the novice and powerful enough for the expert.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://orgmode.org">orgmode.org&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Yes, it&amp;rsquo;s true.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#what-i-use-org-mode-for">What I use Org Mode for&lt;/a>&lt;/li>
&lt;li>&lt;a href="#a-pretty-good-example-of-my-usage">A pretty good example of my usage&lt;/a>&lt;/li>
&lt;li>&lt;a href="#how-i-got-into-the-org-life">How I got into the org life&lt;/a>&lt;/li>
&lt;li>&lt;a href="#some-common-objections-and-questions">Some common objections and questions&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#bleh-a-church-of-emacs-evangelist-dot-dot-dot">Bleh! A Church of Emacs evangelist&amp;hellip;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#but-seriously-emacs-winkwink-amirite">But seriously, Emacs winkwink, amirite?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#but-what-if-one-app-is-not-enough">But what if one app is not enough?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#but--sexy-vc-funded-app">But (sexy VC-funded app)?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#but-isn-t-org-mode-a-productivity-app">But isn&amp;rsquo;t org-mode a productivity app?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#but-why-org-instead-of-markdown">But why org instead of markdown?&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#help-where-do-i-even-begin">Help! &lt;em>Where do I even begin&lt;/em>?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shiny-brain-food-for-your-imagination">Shiny brain-food for your imagination&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="what-i-use-org-mode-for">What I use Org Mode for&lt;/h2>
&lt;p>Over the last 8-odd years, I have &lt;em>gradually&lt;/em> come to use Org Mode (a.k.a.
&lt;em>org-mode&lt;/em>, &lt;em>orgmode&lt;/em>, or just &lt;em>org&lt;/em>) for all my:&lt;/p>
&lt;ul>
&lt;li>note-taking&lt;/li>
&lt;li>live demo presentations&lt;/li>
&lt;li>slide decks&lt;/li>
&lt;li>diagramming&lt;/li>
&lt;li>interactive polyglot computational notebooks&lt;/li>
&lt;li>blogging. Indeed, this blog post and the surrounding website are written in
org text and &lt;a href="https://www.evalapply.org/#footer">made with&lt;/a> tools that work with orgmode.&lt;/li>
&lt;/ul>
&lt;p>I have &lt;strong>never&lt;/strong> used org for managing TODOs, calendaring, or any &amp;ldquo;productivity&amp;rdquo;
use cases (time tracking, GTD etc.), which it has become popular for. Nor, as
is also popular these days, is it my &amp;ldquo;second brain&amp;rdquo;. (Or maybe it is because
my ~/org directory is a total disaster zone. I just disorganise and use Emacs
to search through the files.).&lt;/p>
&lt;p>Some Emacs-using manager-type friends have built very high-leverage workflows
to help them stay on top of operations, coaching/mentoring, project management,
and more. No other tool in the market comes close to what they can get their
org workflows to do for them. (Also, the pun is deeply satisfying &amp;mdash; to run
one&amp;rsquo;s org with org :)&lt;/p>
&lt;p>I too have yet to find an alternative that lets me do &lt;em>all&lt;/em> my stuff more
seamlessly and capably than org-mode. Granted I use the &lt;em>Emacs&lt;/em> implementation
of org-mode, but I&amp;rsquo;m optimistic that more apps (web, mobile, desktop) are
becoming general enough. I enumerate several of them later.&lt;/p>
&lt;h2 id="a-pretty-good-example-of-my-usage">A pretty good example of my usage&lt;/h2>
&lt;p>I enjoy teaching tutorial-style talks and workshops, and I like to live
dangerously; only doing live demos. I recently did one of those at Functional
Conf 2022. Here is the sequence of events of how things got done, via org-mode.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Development&lt;/strong>:
The talk started off &lt;a href="https://gist.github.com/adityaathalye/1eeb80e407fa937337402b1f15480b24">as prose&lt;/a> in an orgmode file
(click &amp;ldquo;Raw&amp;rdquo; button to see the orgmode text I actually typed out).
Thanks to &lt;a href="https://orgmode.org/worg/org-contrib/babel/">org-babel&lt;/a>,
I was programming and testing the code examples &lt;em>right inside the file&lt;/em>,
as I went along developing and refining my ideas. This facility is known
as &amp;ldquo;live computational notebook&amp;rdquo;. org-babel was separate before, but now
it comes built into the Emacs implementation of Org Mode. Epic win!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Publishing&lt;/strong>:
In fact, this content was a draft blog post in my website directory. Once
it got decently OK, &lt;a href="https://www.evalapply.org/posts/n-ways-to-fizzbuzz-in-clojure/">I published it to my blog&lt;/a>, to solicit feedback
and to maintain as a living document, progressively improving the
prose / examples / explanations.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Slideware&lt;/strong>:
The reviewed and revised blog post rapidly turned into
&lt;a href="https://gist.github.com/adityaathalye/398d6fc4c8ce9d23e2e393425f0b6454">this hastily-made presentation version&lt;/a>
(click &amp;ldquo;Raw&amp;rdquo; button to see the actual text I edited the post down to).
I simply deleted prose, support material and extra-examples until I had
just-right examples I could fit into a screen at a time (at a suitably
large font size).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Live Demo&lt;/strong>:
That in turn enabled &lt;a href="https://www.youtube.com/watch?v=BTouODWov-A">the live demo&lt;/a> (video)
with live code evaluation (with org-babel),
and slide navigation using &lt;a href="https://github.com/takaxp/org-tree-slide">org-tree-slide&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>PDF Handout&lt;/strong>:
Since then I have &lt;a href="https://raw.githubusercontent.com/adityaathalye/slideware/master/n-ways-to-fizz-buzz-clj.org">cleaned up and restructured&lt;/a>
the hastily-done presentation version so it exports neatly via &lt;a href="https://orgmode.org/worg/exporters/beamer/tutorial.html">Beamer&lt;/a>,
into this &lt;a href="https://github.com/adityaathalye/slideware/blob/master/n-ways-to-fizz-buzz-clj.pdf">nifty PDF slide deck&lt;/a>.
The heavily improved and reformatted orgmode version remains eminently
demoscene-able. If I were immune to last-minute prep, this is the version
I would have used for the live demo.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Professor Points&lt;/strong>:
I also get intermediate &lt;a href="https://github.com/adityaathalye/slideware/blob/master/n-ways-to-fizz-buzz-clj.tex">tex output&lt;/a> for free,
which I don&amp;rsquo;t need, but may please you if you are a professor (or said
professor&amp;rsquo;s hopelessly sleep derived grad students).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Version-controlled and Highly Reproducible&lt;/strong>:
I can go back to any saved version of any of the org files above, and
reliably reproduce output for &amp;ldquo;distribution&amp;rdquo; (PDF, tex, HTML etc.).
In other words, it is all
highly reproducible.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="how-i-got-into-the-org-life">How I got into the org life&lt;/h2>
&lt;p>Well, orgmode was created in anger almost 2 decades ago (circa 2003) by a
particularly nerdy astronomer &amp;mdash; &lt;a href="https://staff.science.uva.nl/c.dominik/">Carsten Dominic&lt;/a> &amp;mdash; who was fed up with the
anemic note taking tools du jour. I discovered it about a decade ago (circa
2013), right after I changed careers to &amp;ldquo;tech&amp;rdquo;, because all the gentlenerds
at the little company used Emacs. Told ya. Not normal. (Although, surprisingly,
lots of normies use it too. Hi friends!).&lt;/p>
&lt;p>But, long before I found Emacs org-mode, I had Microsoft OneNote in a past
life as a Suit. In Gen-Z terms, OneNote was (is?) a &amp;ldquo;local-first&amp;rdquo; Personal
Knowledge Management (PKM) app (that sold profitably&amp;mdash;what a concept).
I was a superfan and used it All The Time for All The Things. In hindsight,
I wonder if they didn&amp;rsquo;t pinch their ideas from org-mode &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Anyway, after I fell into the oddball world of Unix and Emacs users, I started
with &amp;ldquo;well, all I really need is a way to write and search copious notes&amp;rdquo;.&lt;/p>
&lt;p>If memory serves, it was m&amp;rsquo;colleague &lt;a href="https://twitter.com/firesofmay">Mayank&lt;/a>, who&amp;rsquo;s Emacs I first saw org in,
and m&amp;rsquo;other colleague &lt;a href="https://twitter.com/vedang">Vedang&lt;/a> who&amp;rsquo;s supercharged org-life provided ample
inspiration as well as opportunities to rib him about his org dependence.
With a little bit of monkey-see-monkey-do and some help, I started dropping
words into .org files.&lt;/p>
&lt;p>Little did I know how it would gradually absorb all my OneNote use cases,
and provide a lot more.&lt;/p>
&lt;p>I started with plain notes and checkboxes. It was just that for many months.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Then I discovered org-babel for code-aware syntax highlighting and editing,
because I wanted to also keep nice-looking code snippets in my documents.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After several more months, I discovered org-babel supports interactive code
evaluation with results capture. WAT??!!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then a year or two in, I started doing little talks. By that time I was
clued-in enough to be pretty sure I&amp;rsquo;d find something to make org-mode do it.
And sure enough there exist things like org-tree-slide and org-present.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then I wanted to give PDF handouts and figured out how to export things.
It was a bit painful to learn, but quite useful overall.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now my website is under org management :D&lt;/p>
&lt;/li>
&lt;li>
&lt;p>And whenever some new requirement comes up, org-mode is my first port of
call, because &lt;em>crucially&lt;/em>, &lt;strong>everything works with everything else&lt;/strong>. In
seamless composability resides the power of the ecosystem that has grown
atop org-mode, both within the world of Emacs, and without it.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Sometimes I have to put in annoyingly extra effort to make some new add-on
requirement play well with my other requirements. But each time I&amp;rsquo;ve come away
knowing that effort was way lower than having to find, shortlist, pick and
learn an entire new tool with its own user interface, opinionated workflow,
inevitable workarounds, and maybe incompatible data format (not plain org text).&lt;/p>
&lt;p>For the small price of occasional annoyance, I get to keep using my exact
same workflow for everything. This has been a surprise win that is hard to
explain in words, especially in today&amp;rsquo;s world where standalone apps have
normalised disconnected silos. In hindsight, I didn&amp;rsquo;t really know exactly how
much I would come to value composability. I do. A lot!&lt;/p>
&lt;p>Which is why, now you will have to pry org-mode from my cold dead hands.&lt;/p>
&lt;h2 id="some-common-objections-and-questions">Some common objections and questions&lt;/h2>
&lt;p>A reader may rightfully complain about several parts of this blog post, as
well as the strangeness of Org Mode.&lt;/p>
&lt;h3 id="bleh-a-church-of-emacs-evangelist-dot-dot-dot">Bleh! A Church of Emacs evangelist&amp;hellip;&lt;/h3>
&lt;p>Sorry, &lt;a href="https://www.emacswiki.org/emacs/ChurchOfEmacs">programmer in-joke&lt;/a> :-)&lt;/p>
&lt;p>Orgmode became culturally easy for me as I was already using the venerable
Emacs editor, but my ardour has little to do with my affiliation with the
Church of Emacs. It has everything to do with &lt;em>utility&lt;/em>. Utility is contextual.
Which, for me, is &amp;ldquo;to write things down such that I can use it all usefully
in (many) other ways&amp;rdquo;.&lt;/p>
&lt;p>Besides, Emacs is no longer the only useful interface to org. Which, in fact,
makes me want to stick with org-mode even more. Growing support is easing
collaboration via org files.&lt;/p>
&lt;h3 id="but-seriously-emacs-winkwink-amirite">But seriously, Emacs winkwink, amirite?&lt;/h3>
&lt;p>Yes, it is a valid question because Emacs contains the canonical, complete
implementation of org-mode. Many people use Emacs &lt;em>just&lt;/em> for org-mode.&lt;/p>
&lt;p>But also, seriously, no.&lt;/p>
&lt;p>Because not even the most hardcore &lt;em>Emacs&lt;/em> org-mode users use all of org-mode.
One has particular requirements, which are likely serviceable by particular
apps and tools enumerated below.&lt;/p>
&lt;p>See, it&amp;rsquo;s just like normal people and spreadsheets. Not even the guru-est of
y&amp;rsquo;all use all of your spreadsheet software. Or like normal people, normal pens,
and normal paper. Even a child can use that stuff, but I&amp;rsquo;ll eat my hat if
you go to bed with my handwriting and wake up an ace calligrapher. BUT, you
will probably be able to wake up with a pretty good idea, scribble it down
and maybe change the world (if you can read my hand).&lt;/p>
&lt;p>Utility is contextual, remember?&lt;/p>
&lt;p>So here are ways to use org-mode without Emacs, for useful-to-you purposes,
without even caring it is orgmode text underneath.&lt;/p>
&lt;p>Mobile, Web, and Desktop apps:&lt;/p>
&lt;ul>
&lt;li>mobile: &lt;a href="https://orgro.org/">Orgro&lt;/a>, a mobile Org Mode file viewer for iOS and Android&lt;/li>
&lt;li>mobile: &lt;a href="https://plainorg.com/">Plain Org&lt;/a>, org text view and editor for iOS&lt;/li>
&lt;li>mobile: &lt;a href="https://www.orgzly.com/">Orgzly&lt;/a>, org text viewer and editor for Android
(I use this on my phone, and sync notes to my PC with Dropbox).&lt;/li>
&lt;li>mobile: &lt;a href="https://beorg.app/">beorg&lt;/a> for iOS (tasks, projects, notes)&lt;/li>
&lt;li>mobile: &lt;a href="https://flathabits.com/">flathabits&lt;/a>, inspired by Atomic Habits, with
all your data stored in org files&lt;/li>
&lt;li>web+desktop: &lt;a href="https://logseq.com/">logseq&lt;/a>, a privacy-first, open-source knowledge base&lt;/li>
&lt;li>web: &lt;a href="https://organice.200ok.ch/">organise&lt;/a>, web-based org text editor and viewer&lt;/li>
&lt;li>web: &lt;a href="https://braintool.org/">braintool.org&lt;/a>, a Chrome plugin &amp;ldquo;to easily
capture and categorize all the information and knowledge you want to keep
track of, right at the point you discover it or create it&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>Text Editors (apart from Emacs):&lt;/p>
&lt;ul>
&lt;li>You can type &lt;a href="https://orgmode.org/quickstart.html">org markup text&lt;/a> (syntax)
in any text editor, even Notepad.&lt;/li>
&lt;li>Vim: &lt;a href="https://github.com/nvim-orgmode/orgmode">https://github.com/nvim-orgmode/orgmode&lt;/a>&lt;/li>
&lt;li>Atom: &lt;a href="https://atom.io/packages/org-mode">https://atom.io/packages/org-mode&lt;/a>&lt;/li>
&lt;li>VSCode: &lt;a href="https://github.com/vscode-org-mode/vscode-org-mode">https://github.com/vscode-org-mode/vscode-org-mode&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>A variety of utilities to:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://orgmode.org/tools.html">Publish, Import, Export, Parse&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://orgmode.org/worg/org-tools/index.html">More community-enumerated tools&lt;/a> for the same&lt;/li>
&lt;li>Even Github, Gitlab etc. support org markup these days!&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;m sure more people are making and releasing tools backed by org-mode text.&lt;/p>
&lt;p>The future is bright!&lt;/p>
&lt;h3 id="but-what-if-one-app-is-not-enough">But what if one app is not enough?&lt;/h3>
&lt;p>Having your stuff written in a standard portable format like Org Mode text
can become very useful, if you need / want to transcend your current app.
But, until such time, feel free to use one app for one thing today (say tasks),
and another one for another reason (say note taking), and yet another for,
say, habits.&lt;/p>
&lt;p>As long as those org-mode based apps don&amp;rsquo;t lock in your data (most don&amp;rsquo;t),
then odds are that you will be able to roll all your use cases under one
single app later. Worst case, if no other sufficiently capable app is
available, or if the app you&amp;rsquo;re using shuts down, Emacs will be there to
fall back on!&lt;/p>
&lt;p>Now, Emacs is unfortunately oddball because of half a century of conceptual
baggage. Most commonly, it fetches derision for its notoriously awkward
keyboard shortcuts. That is mainly because Emacs was already old by the time
the PC mouse became mainstream. Keyboards were the only standard method to
talk to computers. Also the key combinations feel strange because they don&amp;rsquo;t
make keyboards like they used to &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>BUT, Emacs accepts you as you are!&lt;/p>
&lt;p>Beneath its curmudgeonly exterior &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, it is perhaps &lt;em>the&lt;/em> most
accessible software application out there &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>!&lt;/p>
&lt;p>Even I, after so many years of using Emacs org-mode, know barely a handful
of very frequently-used keyboard shortcuts (TABTAB to expand tree structures,
Shift-TAB to collapse them, ALT-up/down to move trees etc.). Most of the time
I just search for commands in the Emacs command menu system (ALT-x followed
by a guess for the name of the org command, e.g. &lt;code>ALT-x org export&lt;/code>, and the
system shows me command options with &amp;lsquo;export&amp;rsquo; in the name).&lt;/p>
&lt;p>Emacs will always be a great choice because org-mode is built into Emacs.
So the complete feature set of org-mode is available with zero configuration.
Just install Emacs, mouse-open-create a new &lt;code>.org&lt;/code> file and start typing text.&lt;/p>
&lt;h3 id="but--sexy-vc-funded-app">But (sexy VC-funded app)?&lt;/h3>
&lt;p>Immersed as I was, in a herd of Emacsen, I started to value some things a lot.&lt;/p>
&lt;p>Offline-first being one, which box OneNote checked off handsomely. &lt;em>BUT&lt;/em>
proprietary data formats became deal-breakers too. It pains me that I can&amp;rsquo;t
trivially access my old OneNote dump to snicker at that cocky past-suit-me.&lt;/p>
&lt;p>The cool new tools have also failed to entice me away. Frankly, OneNote&amp;rsquo;s UX
and capability 15 years ago hands-down beats most of them. Which may also be
why da noo cool don&amp;rsquo;t impress. But that&amp;rsquo;s less worse than the fact that that
The Cloud is the new proprietary data format. If my OneNote notes were in The
Cloud, and The Cloud &amp;ldquo;accidentally&amp;rdquo; chose to lock me out, I wouldn&amp;rsquo;t even be
able to dream of snickering at past-suit-me.&lt;/p>
&lt;p>So I now value &lt;em>&lt;strong>local first&lt;/strong>&lt;/em>, which implies &lt;em>full&lt;/em> data ownership, with
content in a highly portable format, without rigid dependence on 3rd parties,
especially not networks or remote services.&lt;/p>
&lt;p>Of course, I now enjoy the specter of losing my backups, but I prefer being
(ir)responsible to myself over being beholden to the mysterious demigods that
reside in The Cloud Computer. Also, I&amp;rsquo;m used to it since my OneNote days.
Suits can be responsible too, you know.&lt;/p>
&lt;p>Now, &lt;em>&amp;ldquo;Your life in plain text&amp;rdquo;&lt;/em>, as the org website says, is an absolute
must-have. Plus, it gives me everything I liked in OneNote and more.&lt;/p>
&lt;p>&amp;ldquo;Win, Win.&amp;rdquo;, as the Suits say.&lt;/p>
&lt;h3 id="but-isn-t-org-mode-a-productivity-app">But isn&amp;rsquo;t org-mode a productivity app?&lt;/h3>
&lt;p>No. It is fundamentally about writing in a structured plain text data format.&lt;/p>
&lt;p>Carsten Dominic created it to be a &amp;ldquo;system of note taking and project planning&amp;rdquo;,
with the insight that we think of tasks in context of projects. So it makes
a lot of sense to unify prose-writing with denoting TODOs and project meta
information directly in context of the prose.&lt;/p>
&lt;p>Now, here&amp;rsquo;s the nuance. While org prescribes a certain &lt;em>syntax&lt;/em> to structure
text and to describe meta-information, it does &lt;em>not&lt;/em> prescribe or force &lt;em>any
one method&lt;/em>, to interpret and use the text; e.g. GTD or Kanban or GANTT or
what have you.&lt;/p>
&lt;p>Besides, &amp;ldquo;productivity&amp;rdquo; means different things to different people. If your
old man who types with two fingers routinely invents large scale industrial
systems (at least one per year), you too would have a rather different view
of what &amp;ldquo;productivity&amp;rdquo; means, and what tools one needs to be productive,
compared to the many Internet subcultures and gurus who are each passionately
vocal about their version of tomato timers.&lt;/p>
&lt;p>Anyway, it turns out that given structured text and maybe associated metadata,
one can build interesting use-cases and workflows that consume the content
as a data structure.&lt;/p>
&lt;p>Lastly, we don&amp;rsquo;t &lt;em>have&lt;/em> to think in &amp;ldquo;productivity&amp;rdquo; terms. The basic &amp;ldquo;outline&amp;rdquo;
way of writing text is &lt;em>absolutely fine and useful&lt;/em> just by itself. Because
writing = thinking. And because structured writing tool can help us easily
structure / restructure our thinking. And because even if we share it as-is,
our text is at least legible to anyone regardless of their text reading tool.&lt;/p>
&lt;p>Like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-org" data-lang="org">*&lt;span style="font-weight:bold"> Top level headline&lt;/span>
some text
&lt;span style="color:#75715e">**&lt;/span> A second level
some other text
&lt;span style="color:#75715e">***&lt;/span> A third level
still other text
&lt;span style="color:#75715e">***&lt;/span> Another Third level
more still other text
*&lt;span style="font-weight:bold"> Another top level headline&lt;/span>
*&lt;span style="font-weight:bold"> Lord of the Rings&lt;/span>
My favorite scenes are (in this order)
&lt;span style="color:#66d9ef">1.&lt;/span> The attack of the Rohirrim
&lt;span style="color:#66d9ef">+ &lt;/span>Eowyn&amp;#39;s fight with the witch king
a. this was already my favorite scene in the book
b. I really like Miranda Otto.
&lt;span style="color:#66d9ef">3.&lt;/span> Peter Jackson being shot by Legolas
&lt;span style="color:#66d9ef">- &lt;/span>on DVD only
He makes a really funny face when it happens.
But in the end, no individual scenes matter but the film as a whole.
Important actors in this film are:
&lt;span style="color:#66d9ef">- &lt;/span>Elijah Wood :: He plays Frodo
&lt;span style="color:#66d9ef">- &lt;/span>Sean Astin :: He plays Sam, Frodo&amp;#39;s friend. I still remember him
very well from his role as Mikey Walsh in &lt;span style="font-style:italic">/The Goonies/&lt;/span>.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="but-why-org-instead-of-markdown">But why org instead of markdown?&lt;/h3>
&lt;p>OK, so I don&amp;rsquo;t dislike markdown, I just like org much better. I&amp;rsquo;m facing off
org v/s md because md is popular and widespread. Org Mode isn&amp;rsquo;t. Naturally,
org &lt;em>looks&lt;/em> odd in comparison, at first glance. But really, they have plenty
in common.&lt;/p>
&lt;p>For one, there are several flavours of markdown, each with their own syntax
for how to describe text. Org Mode syntax is not very different. The general
concepts remain similar. So all one really needs is a &lt;a href="https://orgmode.org/quickstart.html">syntax cheat sheet&lt;/a>
for org.&lt;/p>
&lt;p>Every other benefit of writing in structured plaintext remains available to
me, including fine-grained version control, maximum portability, prose-like
legibility, publishing to any other format (PDF, html, tex, odf, asciidoc,
as well as various markdown variants).&lt;/p>
&lt;p>To me, paying the cost of learning org syntax was well worth it because it
afforded me access to text structured in one standard format, with better
usability, functionality, and historical support than the various markdowns.
I think this article makes a good case for learning org syntax:
&lt;a href="https://karl-voit.at/2017/09/23/orgmode-as-markup-only/">Org Mode Is One of the Most Reasonable Markup Languages to Use for Text&lt;/a>&lt;/p>
&lt;p>Plus, org text is explicitly designed to double as a raw datastructure that
can be used to drive workflows, like showing presentations, or interactive
notebooks, or project management etc. This design choice is explicitly &lt;em>not&lt;/em>
the mandate of most other plaintext document formats.&lt;/p>
&lt;h2 id="help-where-do-i-even-begin">Help! &lt;em>Where do I even begin&lt;/em>?&lt;/h2>
&lt;p>This is a common problem because orgmode has become A Lot!&lt;/p>
&lt;p>Whatever you want to achieve will almost always be possible, if not through
a special-purpose org-mode app, then through &lt;em>Emacs&lt;/em> org-mode. Being free to
do anything is great, but it is also bewildering!&lt;/p>
&lt;p>I&amp;rsquo;d say eat the Elephant one bite at a time, in a problem/solution format,
and that too only as long as you&amp;rsquo;re hungry.&lt;/p>
&lt;p>Method:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Review the intro on the front page of the &lt;a href="https://orgmode.org/quickstart.html">org-mode website&lt;/a>,
see the features, and the quickstart, to get an idea of what it&amp;rsquo;s like.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Consider &lt;em>&amp;ldquo;I want to do X. Can org-mode help me?&amp;quot;&lt;/em> where X is &lt;strong>the most
important&lt;/strong> thing for &lt;strong>you&lt;/strong>. The answer will almost certainly be &lt;em>&amp;ldquo;Yes m&amp;rsquo;lorx,
this way please.&amp;quot;&lt;/em>. See if any of the apps I listed previously, fit your
requirement.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then do &lt;strong>only that X&lt;/strong> and see if it works for you. If you find yourself
reaching for your orgmode app all the time, for X, then you know you have
a winner. This trick keeps things simple, which should give you a strong
sense of utility. It should also keep switching costs low if it fails you
for X. In that case, your data is yours, so you can take it to another app.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you can solve your X admirably, then you can think about your other
Y/Z/PQR requirements and start solving them. Maybe in the same app or maybe
in a second and third app. Many apps is fine because your data format is
the same and you would have an escape hatch from the app. Again, consulting
the org-mode website will help match Y/Z/PQR to org.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="shiny-brain-food-for-your-imagination">Shiny brain-food for your imagination&lt;/h2>
&lt;p>I love to watch/read tutorials, HOWTOs, essays, trick-shots etc. published by
org super-fans and super-users. Lots of inspiration exists out there! I don&amp;rsquo;t
know what I don&amp;rsquo;t know!&lt;/p>
&lt;p>Whenever I am stuck, I go to one of these resources:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://orgmode.org/worg/exporters/beamer/tutorial.html">orgmode.org&lt;/a> is the canonical reference manual.&lt;/li>
&lt;li>&lt;a href="https://orgmode.org/worg/exporters/beamer/tutorial.html">Worg&lt;/a> is full of gold (tips, tricks, tutorials, hacks).&lt;/li>
&lt;/ul>
&lt;p>Whenever I&amp;rsquo;m looking for inspiration, I go to these resources:&lt;/p>
&lt;ul>
&lt;li>Document: norang&amp;rsquo;s &lt;strong>epic&lt;/strong> &lt;a href="http://doc.norang.ca/org-mode.html">life in orgmode&lt;/a> page&lt;/li>
&lt;li>Document: EH Neilsen&amp;rsquo;s &lt;a href="http://ehneilsen.net/notebook/orgExamples/org-examples.html">Emacs org-mode examples and cookbook&lt;/a>
that shows how to make org into a full-bore computing environment.&lt;/li>
&lt;li>Demo: Carsten Dominic&amp;rsquo;s timeless presentation
&amp;ldquo;&lt;a href="https://www.youtube.com/watch?v=oJTwQvgfgMM">Emacs Org-mode - a system for note-taking and project planning&lt;/a>&amp;rdquo;&lt;/li>
&lt;li>Demo: Youtuber Rainer Konig has published a &lt;strong>fantastic&lt;/strong> series of short,
clear tutorials of the many &lt;a href="https://www.youtube.com/playlist?list=PLVtKhBrRV%5FZkPnBtt%5FTD1Cs9PJlU0IIdE">things one can do with Org&lt;/a>.&lt;/li>
&lt;li>Demo: &lt;a href="https://www.youtube.com/watch?v=FtieBc3KptU">Emacs For Writers&lt;/a> by Jay Dixit,
a widely-published science writer who is a non-programmer.&lt;/li>
&lt;li>Demo: &lt;a href="https://www.youtube.com/watch?v=SzA2YODtgK4">Getting Started With Org Mode&lt;/a>, for nerds of all feather.&lt;/li>
&lt;li>Demo: &lt;a href="https://www.youtube.com/watch?v=0g9BcZvQbXU">Consistent Technical Documents Using Emacs and Org Mode&lt;/a>&lt;/li>
&lt;li>Demo: How m&amp;rsquo;colleague &lt;a href="https://twitter.com/suvratapte">Suvrat&lt;/a> uses Emacs org-mode&amp;rsquo;s
&amp;ldquo;Org Capture&amp;rdquo; feature &lt;a href="https://www.youtube.com/watch?v=tFt6plDQm58">to stay in flow&lt;/a> while programming.&lt;/li>
&lt;li>Demo: How m&amp;rsquo;colleague &lt;a href="https://www.youtube.com/watch?v=KZoQ4EkfDPo">Vedang&lt;/a> uses Emacs org-mode
to run his whole life, as a team lead, project manager, and fallible human.&lt;/li>
&lt;li>Search &amp;ldquo;orgmode&amp;rdquo; in YouTube for &lt;em>lots&lt;/em> more!&lt;/li>
&lt;/ul>
&lt;p>And if you need help getting started or getting un-stuck or advancing your
org-life, email me! (&lt;em>weblog&lt;/em> at this site).&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>OneNote came complete with always-on auto-save, outline text, checklists, cross linking, multiple notebooks, categories/tags, search, export, email and calendar integration. Even multimedia embeds, text-to-speech, text extraction from images, audio notes, exports etc. All available on-PC, sans Internet. But, I also used Ray Ozzie&amp;rsquo;s Groove app (Dropbox a decade before Dropbox, and apparently reincarnated as Microsoft OneDrive), so syncing was seamless too. And all this was available for the price of an expensive but lifetime software license plus a piece of your soul. Cheap for me as a Suit, and so I lapped it up. Like I said, it&amp;rsquo;s about utility and it was &lt;em>fantastic&lt;/em>. Absent org-mode, and assuming I were still a suit, and assuming MS did not screw up OneNote, and assuming MS OneNote were the only good enough game in town, you might have even stood a sliver of a chance to convince today-me to turn a blind eye to the horrible inhumane spyware that Windows is today &lt;em>because&lt;/em> it also has OneNote. But of course, I would probably have rather suffered the ignominy of paying Apple an arm a leg and one&amp;rsquo;s personal liberty for access to their increasingly walled-in walled gardens, if their MS Office package had a good enough OneNote. Come on MS! Why undo the wonderful accessibility work y&amp;rsquo;all are doing on the one hand, by allowing customer data to be weaponised for ads or &amp;ldquo;personalisation&amp;rdquo; or whatever? Anyway, I&amp;rsquo;m grateful for Linux. Both those other ships have sailed for me. Now if only NVIDIA stopped being such insufferable asses about those graphics drivers. Yeah, there is no pleasing some people.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>I wish they would take a lesson from the late great &lt;a href="https://en.wikipedia.org/wiki/Space-cadet%5Fkeyboard">Space Cadet&lt;/a> keyboard. Once I saw that, I couldn&amp;rsquo;t un-see it. Ever since I always reconfigure keyboard layouts of my computers, to put CTRL (and META / ALT) under our thumbs, the way the Spirits of the Computer intended.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>The vast majority of Emacs users are gentlenerds. Alas, odds are that the crabby trollish subset will project out of the ether into your browser window schooling you about How You Are Doing It All Wrong By Using The Mouse. Smile and close the browser tab. Allow them to rail into the void. You do you.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>Ref: &lt;a href="https://www.youtube.com/watch?v=oJTwQvgfgMM">Emacs Org-mode - a system for note-taking and project planning&lt;/a> by Carsten Dominik, the inventor of org-mode. The video was curated by TV Raman, a blind-since-childhood programmer, who uses org-mode and who also created &amp;ldquo;Emacspeak&amp;rdquo; - Emacs for the Blind. For the more fortunate of us, though some Emacs default settings are weird, and though much of the language to explain Emacs is annoyingly crufty and old, it may be worth adapting to the oddities. Honestly, one doesn&amp;rsquo;t need to learn much to derive use out of Emacs org-mode. That said, if you want all the familiarity of your Mouse and keyboard shortcuts, then by all means configure Emacs to fit your needs. That is its forte! Many &amp;ldquo;starter kits&amp;rdquo; are available, to remove the burden of figuring out how to do so. &lt;a href="https://github.com/corvideon/mousemacs">mousemacs&lt;/a> seems to be quite nice. Hit me up if you need help setting it up (&lt;em>weblog&lt;/em> at this site)!&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content></item><item><title>n ways to FizzBuzz in Clojure</title><link>/posts/n-ways-to-fizzbuzz-in-clojure/</link><pubDate>Fri, 25 Mar 2022 01:55:51 +0530</pubDate><guid>/posts/n-ways-to-fizzbuzz-in-clojure/</guid><description>&lt;p>FizzBuzz is everywhere. Every programmer passes through its rite of passage,
or at least bears witness to another. Over the years, many gentlenerds have
taken it upon themselves to discover ever new ways to incant those hoary symbols.&lt;/p>
&lt;p>I hereby enjoin these few drops of Clojure to that roiling ocean of FizzBuzzery.&lt;/p>
&lt;p>The brainwave here is to (mis)use the feature set of Clojure and its standard
library to cook up as many ways to encode FizzBuzz as one can muster (or steal).
If all goes well, this post will receive many updates. If it goes &lt;em>really&lt;/em>
well, all sorts of bad ideas and clever foot-guns will be discovered and used.&lt;/p>
&lt;p>The creative constraint is this: any FizzBuzz, however terrible or hilarious,
&lt;em>must also be useful&lt;/em>. It should have reason to exist and should reveal some
real-world Clojure thinking.&lt;/p>
&lt;p>That means no &lt;a href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition">FizzBuzzEnterpriseEdition&lt;/a>
but also no Dylan Beattie&amp;rsquo;s brilliant &lt;a href="https://www.youtube.com/watch?v=6avJHaC3C2U&amp;amp;t=3350s">FizzBuzz in RockStar&lt;/a>.
So sorry!&lt;/p></description><content>&lt;p>FizzBuzz is everywhere. Every programmer passes through its rite of passage,
or at least bears witness to another. Over the years, many gentlenerds have
taken it upon themselves to discover ever new ways to incant those hoary symbols.&lt;/p>
&lt;p>I hereby enjoin these few drops of Clojure to that roiling ocean of FizzBuzzery.&lt;/p>
&lt;p>The brainwave here is to (mis)use the feature set of Clojure and its standard
library to cook up as many ways to encode FizzBuzz as one can muster (or steal).
If all goes well, this post will receive many updates. If it goes &lt;em>really&lt;/em>
well, all sorts of bad ideas and clever foot-guns will be discovered and used.&lt;/p>
&lt;p>The creative constraint is this: any FizzBuzz, however terrible or hilarious,
&lt;em>must also be useful&lt;/em>. It should have reason to exist and should reveal some
real-world Clojure thinking.&lt;/p>
&lt;p>That means no &lt;a href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition">FizzBuzzEnterpriseEdition&lt;/a>
but also no Dylan Beattie&amp;rsquo;s brilliant &lt;a href="https://www.youtube.com/watch?v=6avJHaC3C2U&amp;amp;t=3350s">FizzBuzz in RockStar&lt;/a>.
So sorry!&lt;/p>
&lt;p>Not to be indelicate, but I will state the problem before proceeding.&lt;/p>
&lt;blockquote>
&lt;p>Fizz buzz is a group word game for children to teach them about division.
Players take turns to count incrementally, replacing any number divisible by
three with the word &amp;ldquo;fizz&amp;rdquo;, and any number divisible by five with the word &amp;ldquo;buzz&amp;rdquo;.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Fizz%5Fbuzz">https://en.wikipedia.org/wiki/Fizz%5Fbuzz&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Needless to say, they mean natural numbers starting at 1 when they say &amp;ldquo;numbers&amp;rdquo;.&lt;/p>
&lt;p>Phew that was rough on the ego. Let us compose ourselves for a minute.&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;p>OK, onward.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#usage-guide">Usage guide&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#reading-the-code">Reading the code&lt;/a>&lt;/li>
&lt;li>&lt;a href="#running-the-code">Running the code&lt;/a>&lt;/li>
&lt;li>&lt;a href="#complaining-about-the-code">Complaining about the code&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#le-fizzbuzz-classique">Le FizzBuzz Classique&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#le-fizzbuzz-classique-est-mort-%C3%A0-clojure-dot-d%C3%A9sol%C3%A9">Le FizzBuzz Classique est mort à Clojure. Désolé :(&lt;/a>&lt;/li>
&lt;li>&lt;a href="#le-fizzbuzz-classique-remedied">Le FizzBuzz Classique, remedied&lt;/a>&lt;/li>
&lt;li>&lt;a href="#le-fizzbuzz-classique-dissected">Le FizzBuzz Classique, dissected&lt;/a>&lt;/li>
&lt;li>&lt;a href="#le-fizzbuzz-classique-doseq-d">Le FizzBuzz Classique, doseq&amp;rsquo;d&lt;/a>&lt;/li>
&lt;li>&lt;a href="#le-fizzbuzz-classique-doall-d">Le FizzBuzz Classique, doall&amp;rsquo;d&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#little-functions-are-good">Little functions are good!&lt;/a>&lt;/li>
&lt;li>&lt;a href="#map-reduce-for-fizzbuzz">map reduce for FizzBuzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#domain-driven-design-fizzbuzz">Domain Driven Design FizzBuzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#actually-domain-driven-fizzbuzz">Actually Domain Driven FizzBuzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#fizzbuzz-by-construction">FizzBuzz by construction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#interlude-all-the-fizz-buzzes-so-far">Interlude: all the fizz-buzzes so far&lt;/a>&lt;/li>
&lt;li>&lt;a href="#peano-fizzbuzz">Peano FizzBuzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#dispatch-buzz">Dispatch Buzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#embarrassingly-parallel-fizzbuzz">Embarrassingly Parallel FizzBuzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#oop-buzz">OOP Buzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#non-destructive-fizzbuzz">Non-Destructive FizzBuzz&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#composite-data-buzz">Composite Data Buzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#clojure-spec-d-buzz">Clojure Spec&amp;rsquo;d Buzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#wicked-pprint-buzz">Wicked pprint Buzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#tagged-literal-buzz">Tagged Literal Buzz&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#interlude-what-more-could-we-possibly-decomplect">Interlude: What more could we possibly decomplect?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#transducery-buzz">Transducery Buzz&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#what-are-we-decomplecting">What are we decomplecting?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#demo-one-computation-and-output-format-pulled-apart">Demo One: Computation and &lt;em>Output&lt;/em> format pulled apart&lt;/a>&lt;/li>
&lt;li>&lt;a href="#demo-two-computation-and-input-format-pulled-apart-dot">Demo Two: Computation and &lt;em>Input&lt;/em> format pulled apart.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#demo-three-use-only-the-xform-as-a-calculator">Demo Three: Use &lt;em>only&lt;/em> the xform as a calculator&lt;/a>&lt;/li>
&lt;li>&lt;a href="#further-reading">Further reading&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#buzz">&lt;!-- raw HTML omitted -->TODO&lt;!-- raw HTML omitted --> Buzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="#acknowledgments">Acknowledgments&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="usage-guide">Usage guide&lt;/h2>
&lt;h3 id="reading-the-code">Reading the code&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Find the &lt;code>check-all-fizz-buzzers&lt;/code> function below, for usage examples.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We use functions only from Clojure&amp;rsquo;s standard library (clojure.core).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Lookup unfamiliar functions at &lt;a href="https://clojuredocs.org/quickref">https://clojuredocs.org/quickref&lt;/a>, helpfully
illustrated with community-contributed examples.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="running-the-code">Running the code&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>If you don&amp;rsquo;t already have &lt;a href="https://clojure.org/guides/getting%5Fstarted">Clojure installed&lt;/a>,
you can run the code online at &lt;a href="https://tryclojure.org/">https://tryclojure.org/&lt;/a> (fully client-side,
but minimalist), or at &lt;a href="https://repl.it/languages/clojure">https://repl.it/languages/clojure&lt;/a> (feature-rich
web-based IDE, but requires signup).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Preferably, copy over code as you go along. Try it out bit by bit.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you are in a hurry, find the &amp;ldquo;Interlude&amp;rdquo; section and copy over all the
code from there.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Finally, run &lt;code>(check-all-fizz-buzzers)&lt;/code> to see if it all works as expected.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="complaining-about-the-code">Complaining about the code&lt;/h3>
&lt;ul>
&lt;li>If I&amp;rsquo;ve made bugs in the Code or the English (possible) or made egregious
remarks (very possible), please write to &lt;em>weblog&lt;/em> at this website. I&amp;rsquo;ll
fix the bugs.&lt;/li>
&lt;/ul>
&lt;p>Right, then. Shall we begin?&lt;/p>
&lt;h2 id="le-fizzbuzz-classique">Le FizzBuzz Classique&lt;/h2>
&lt;p>In the beginning, one might trawl the Clojure standard library for familiar,
safe-looking words and accidentally discover &lt;code>for&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.
Python or Javascript gentlenerds may say &lt;em>&amp;ldquo;Ooh, List Comprehension. Nice!&amp;quot;&lt;/em>,
and bang out &lt;em>Le FizzBuzz Classique&lt;/em>. Java or C# gentlenerds may struggle a
lot more, because Clojure has no &lt;code>Class&lt;/code>. We are sorry for this disappointment.
Please follow the Python for now.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>fizz-buzz-classic
[num-xs]
(for [n num-xs]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(zero? (rem n &lt;span style="color:#ae81ff">15&lt;/span>)) (println &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>)
(zero? (rem n &lt;span style="color:#ae81ff">3&lt;/span>)) (println &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>)
(zero? (rem n &lt;span style="color:#ae81ff">5&lt;/span>)) (println &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>)
&lt;span style="color:#e6db74">:else&lt;/span> (println n))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then you will evaluate it &lt;em>in&lt;/em> the &amp;ldquo;REPL&amp;rdquo;, et voilà! Something
très familiar!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">user=&amp;gt; (&lt;span style="color:#a6e22e">fizz-buzz-classic&lt;/span> (list &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>))
&lt;span style="color:#ae81ff">1&lt;/span>
Fizz
Buzz
FizzBuzz
&lt;span style="color:#ae81ff">16&lt;/span>
(&lt;span style="color:#a6e22e">nil&lt;/span> nil nil nil nil)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Except for that pesky last line full of nils. But like, whatever. It worked.).&lt;/p>
&lt;h3 id="le-fizzbuzz-classique-est-mort-à-clojure-dot-désolé">Le FizzBuzz Classique est mort à Clojure. Désolé :(&lt;/h3>
&lt;p>Sadly, the spurious nils are the least of your woes. You just fell prey to
something called &amp;ldquo;Laziness&amp;rdquo;, and the code is dead on arrival, but you don&amp;rsquo;t
know it yet because evaluating &lt;em>in&lt;/em> the &amp;ldquo;REPL&amp;rdquo; obscures this fact.&lt;/p>
&lt;p>Welcome to Functional Programming (FP) with lazy sequences, which is &lt;em>awesome&lt;/em>,
but which is also one of the double edges of Clojure that will cut you if you
come here with set ideas about How Things Ought To Work.&lt;/p>
&lt;p>Saying it in French (however broken) felt gentler, somehow.&lt;/p>
&lt;p>At this point, you might accuse me of setting you up with this strawman &lt;code>for&lt;/code>.
In response, I might simply wait for your production to blow up. Unknowing
mixing of laziness and side effects reliably trips up all programmers new to
Clojure &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Luckily we can avoid going down that rabbit hole &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> entirely, because
there is a more pressing problem that makes &lt;em>Le FizzBuzz Classique&lt;/em> look
severely defective to this Clojurist&amp;rsquo;s FP-addled brain. Fixing that makes the
point of lazy sequences moot, as a nice bonus.&lt;/p>
&lt;h3 id="le-fizzbuzz-classique-remedied">Le FizzBuzz Classique, remedied&lt;/h3>
&lt;p>Behold this cleaned up version.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>lazybuzz
[num-xs]
(for [n num-xs]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(zero? (rem n &lt;span style="color:#ae81ff">15&lt;/span>)) &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
(zero? (rem n &lt;span style="color:#ae81ff">3&lt;/span>)) &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
(zero? (rem n &lt;span style="color:#ae81ff">5&lt;/span>)) &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">:else&lt;/span> n)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yes, &lt;code>println&lt;/code> is no more, and&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">user=&amp;gt; (&lt;span style="color:#a6e22e">lazybuzz&lt;/span> (list &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>))
(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Compare the shape of the collection of nils seen classically, with what we see
now. They are both sequences with the same number of items, &lt;em>but&lt;/em> the new one
contains useful values (insert :trollface: :).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">user=&amp;gt; (&lt;span style="color:#a6e22e">fizz-buzz-classic&lt;/span> (list &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span>))
&lt;span style="color:#ae81ff">1&lt;/span>
Fizz
Buzz
FizzBuzz
&lt;span style="color:#ae81ff">19&lt;/span>
(&lt;span style="color:#a6e22e">nil&lt;/span> nil nil nil nil) &lt;span style="color:#75715e">; 5 prints, 5 nils&lt;/span>
user=&amp;gt; (&lt;span style="color:#a6e22e">lazybuzz&lt;/span> (list &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span>))
(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span>) &lt;span style="color:#75715e">; no prints, 1 value containing 5 values&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Well, that&amp;rsquo;s because all expressions in Clojure return a value. &lt;code>println&lt;/code>
creates a side effect of printing and has a return value of &lt;code>nil&lt;/code>. Thus for
each item in the input range, the &amp;ldquo;impure&amp;rdquo; classic version prints to the REPL,
collects the return value of each println (nil), and returns that collection.&lt;/p>
&lt;p>The &amp;ldquo;purified&amp;rdquo; fizz-buzz simply calculates a result for each branch and the
&lt;code>for&lt;/code> returns the accumulated result. And now the results are printed inside
parentheses, which is, like, sure whatever. At least it &lt;em>looks&lt;/em> like it&amp;rsquo;s
doing the right calculations &lt;em>and&lt;/em> the pesky nils are gone, so we can move on?&lt;/p>
&lt;p>Not so fast.&lt;/p>
&lt;h3 id="le-fizzbuzz-classique-dissected">Le FizzBuzz Classique, dissected&lt;/h3>
&lt;p>To FizzBuzz creatively in Clojure, we must examine &lt;em>and avoid&lt;/em> the defects of
the classic version, which are as follows.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Broken behaviour&lt;/strong>: &lt;code>println&lt;/code> alters the state of the world and thus
injects non-determinism into an otherwise purely functional calculation.
This is anathema &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> to Clojurists (and FP practitioners at large).&lt;/li>
&lt;li>&lt;strong>Broken API contract&lt;/strong>: We get back a useless collection nils, instead of the
result of a calculation that we can use further. We prefer to always write
functions that return useful values.&lt;/li>
&lt;li>&lt;strong>Broken time model&lt;/strong>: Effects want to happen &amp;ldquo;now&amp;rdquo; (here, printing to
some output device), while lazy computations want to happen &amp;ldquo;maybe never&amp;rdquo;
(here, a definition that maps the domain of a collection of countless
numbers to the domain of FizzBuzz). Effects and laziness can be made to
pair well, &lt;em>but only when&lt;/em> we define them separately from the get go, and
have some third way of joining them together safely when needed. For now,
you could do worse than lasering this into your brain: &amp;ldquo;Never mix (side)
effects and laziness.&amp;rdquo;.&lt;/li>
&lt;li>&lt;strong>Broken aesthetic&lt;/strong>: We like our functions to do one job, and do it well.
Printing things is a &lt;em>second&lt;/em> job, and as Messers Hal and Gerry like to
say in SICP &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>, &amp;ldquo;That&amp;rsquo;s George&amp;rsquo;s problem.&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;p>Henceforth, all functions shall be pure calculations, and we will rely on
our metaphorical George &amp;ldquo;the REPL&amp;rdquo; Ableman to handle all our print jobs.&lt;/p>
&lt;p>As an added benefit, writing pure functions makes laziness such a good friend,
that we don&amp;rsquo;t even need to acknowledge its presence.&lt;/p>
&lt;p>Yet another benefit is that we won&amp;rsquo;t have to burn hundreds of words to apologise
for broken code &lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>See? Such passion. I wasn&amp;rsquo;t joking when I said &amp;ldquo;looks severely defective to me&amp;rdquo; &lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>.&lt;/p>
&lt;h3 id="le-fizzbuzz-classique-doseq-d">Le FizzBuzz Classique, doseq&amp;rsquo;d&lt;/h3>
&lt;p>Maybe you still aren&amp;rsquo;t convinced. &lt;code>println&lt;/code> is such a global standard. &lt;em>Easy&lt;/em> &lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>.
So you might dig into the standard library more and come up with &lt;code>doseq&lt;/code> to
eliminate laziness&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>doseq-fizz-buzz
[num-xs]
(doseq [n num-xs]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(zero? (rem n &lt;span style="color:#ae81ff">15&lt;/span>)) (println &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>)
(zero? (rem n &lt;span style="color:#ae81ff">3&lt;/span>)) (println &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>)
(zero? (rem n &lt;span style="color:#ae81ff">5&lt;/span>)) (println &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>)
&lt;span style="color:#e6db74">:else&lt;/span> (println n))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And declare victory&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">user=&amp;gt; (&lt;span style="color:#a6e22e">doseq-fizz-buzz&lt;/span> (list &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">19&lt;/span>))
&lt;span style="color:#ae81ff">1&lt;/span>
Fizz
Buzz
FizzBuzz
&lt;span style="color:#ae81ff">19&lt;/span>
nil &lt;span style="color:#75715e">; maybe we can live with just one nil?&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But the code is still fatally broken for the other reasons, and now &lt;em>it is
also worse&lt;/em>, because this implementation cannot say &amp;ldquo;here are &lt;em>all&lt;/em> the
fizzbuzzes&amp;rdquo;. Only a lazy definition can say this &lt;em>and&lt;/em> allow you to carry on
computing. Besides, &lt;code>doseq&lt;/code> is meant for cases when we &lt;em>want to cause&lt;/em> side
effects. And the functional Clojurist almost never &lt;em>wants&lt;/em> to.&lt;/p>
&lt;p>Remember the children&amp;rsquo;s game definition of FizzBuzz? It is beautiful because
it &lt;em>does not&lt;/em> say &amp;ldquo;FizzBuzz only for the first K numbers&amp;rdquo;. Now if you go
DuckDuck search the standard coding interview version of the question, what
do you find? &amp;ldquo;Write a program that prints the numbers from 1 to 100
such that&amp;hellip;&amp;rdquo;.&lt;/p>
&lt;p>Boo.&lt;/p>
&lt;h3 id="le-fizzbuzz-classique-doall-d">Le FizzBuzz Classique, doall&amp;rsquo;d&lt;/h3>
&lt;p>As a famous TV detective would say; &amp;ldquo;Oh, just one other thing.&amp;rdquo;. Here are ways
to break your programs. And if you are feeling suitably adventurous, to also
test the stability of your employment.&lt;/p>
&lt;p>The following invocation of &lt;code>lazybuzz&lt;/code> in your &lt;code>-main&lt;/code> would not be fine,
assuming you wanted to do something useful with it. But would also not
precipitate anything terrible.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>-main
&lt;span style="color:#e6db74">&amp;#34;The entry point to your microservice.&amp;#34;&lt;/span>
[&lt;span style="color:#f92672">&amp;amp;&lt;/span> args]
&lt;span style="color:#75715e">;; Do things ...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m about to do...&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">;; No block, no foul.&lt;/span>
(&lt;span style="color:#a6e22e">lazybuzz&lt;/span> (&lt;span style="color:#a6e22e">range&lt;/span>))
&lt;span style="color:#75715e">;; Sure, why not ...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m done!&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is a good way to break your software &lt;!-- raw HTML omitted -->and&lt;!-- raw HTML omitted --> print FizzBuzzes to the console
indefinitely (or at least as long as your computer can make new numbers).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>-main
&lt;span style="color:#e6db74">&amp;#34;The entry point to your microservice.&amp;#34;&lt;/span>
[&lt;span style="color:#f92672">&amp;amp;&lt;/span> args]
&lt;span style="color:#75715e">;; Do things ...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m about to do...&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">;; Spin wheels until the numbers run out.&lt;/span>
(&lt;span style="color:#a6e22e">doseq-fizz-buzz&lt;/span> (&lt;span style="color:#a6e22e">range&lt;/span>))
&lt;span style="color:#75715e">;; Maybe never ...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m done!&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As a funner party trick, if you make a computer (VM) with a bad output device
(or redirect program output to /dev/full), then you can crash or hang your
program. If you discover it crashes, feel free to daemonise it and make an
infinitely restarting JVM process that does nothing but burn CPU cycles.
Take that, cryptominers!&lt;/p>
&lt;p>To be fair, you can also break programs with lazy evaluation, with the added
benefit of doing it silently. But at least you are forced to say &lt;code>doall&lt;/code>,
which might make you feel at least a tiny bit guilty.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>-main
&lt;span style="color:#e6db74">&amp;#34;The entry point to your microservice.&amp;#34;&lt;/span>
[&lt;span style="color:#f92672">&amp;amp;&lt;/span> args]
&lt;span style="color:#75715e">;; Do things...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m about to do...&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">;; Spin wheels silently, until OOM or no more numbers,&lt;/span>
&lt;span style="color:#75715e">;; whichever happens first.&lt;/span>
(doall (&lt;span style="color:#a6e22e">lazybuzz&lt;/span> (&lt;span style="color:#a6e22e">range&lt;/span>)))
&lt;span style="color:#75715e">;; Maybe not ...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m done!&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To see if you can get &lt;em>fired&lt;/em> by solving fizzbuzz (now that&amp;rsquo;s a concept,
innit?), you can ship to production &lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup> the&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>doseq version, to fill up your log files with fizzbuzz. They will fill
up really fast. Faster than logrotate.&lt;/li>
&lt;li>doall lazybuzz version, to confuse the daylights out of everyone, at
least until your process dies with OOM.&lt;/li>
&lt;li>badly daemonised verison, to enjoy repeated restart cycles through crashes
from number overflows and/or OOMs.&lt;/li>
&lt;li>Or something actually dangerous&amp;hellip;&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>-main
&lt;span style="color:#e6db74">&amp;#34;The entry point to your microservice.&amp;#34;&lt;/span>
[&lt;span style="color:#f92672">&amp;amp;&lt;/span> args]
&lt;span style="color:#75715e">;; Do things...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m about to do...&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">;; Your /thought/ you were going to /do/ something useful here.&lt;/span>
(&lt;span style="color:#a6e22e">fizz-buzz-classic&lt;/span> (&lt;span style="color:#a6e22e">range&lt;/span>))
&lt;span style="color:#75715e">;; You now falsely believe you did something useful ...&lt;/span>
(println &lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m done!&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I assure you, experienced Clojurists are no longer grinning at the tomfoolery.
Many of us have shipped &lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup> (or &lt;em>almost&lt;/em> shipped) this category of
bugs to prod. Not fun.&lt;/p>
&lt;p>OK, now I consider &lt;em>Le Cheval Classique&lt;/em> suitably flogged postmortem, and
yourself suitably &lt;em>Caveat Emptor&lt;/em>-ed.&lt;/p>
&lt;p>Now we will FizzBuzz joyously.&lt;/p>
&lt;h2 id="little-functions-are-good">Little functions are good!&lt;/h2>
&lt;p>Once we remove the &lt;em>ick&lt;/em> of &lt;code>println&lt;/code> from our code, we can see further room
for improvement. &lt;code>(zero? (rem n divisor))&lt;/code> is not only a common pattern,
it is actually a distinct &lt;em>idea&lt;/em>, viz. &amp;ldquo;Is &lt;code>n&lt;/code> &lt;em>divisible&lt;/em> by &lt;code>divisor&lt;/code>?&amp;rdquo;.&lt;/p>
&lt;p>We can name it locally, with &lt;code>let&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>letbuzz
[num-xs]
(for [n num-xs]
(&lt;span style="color:#66d9ef">let &lt;/span>[divisible? (&lt;span style="color:#66d9ef">fn &lt;/span>[n1 n2] (zero? (rem n1 n2)))] &lt;span style="color:#75715e">; locally-bound lambda&lt;/span>
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">15&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">:else&lt;/span> n))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>However&lt;/em>, this definition of divisibility is generally applicable to numbers,
so it makes sense to define a top-level global concept.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>divisible?
&lt;span style="color:#e6db74">&amp;#34;True when the remainder of n1/n2 is zero. e.g. (divisible? 4 2) =&amp;gt; true&amp;#34;&lt;/span>
(&lt;span style="color:#66d9ef">fn &lt;/span>[n1 n2] (zero? (rem n1 n2))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yep, &lt;code>defn&lt;/code> is just &lt;code>def&lt;/code> + &lt;code>fn&lt;/code> under the hood, and we can conveniently
write the same thing as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>divisible?
&lt;span style="color:#e6db74">&amp;#34;True when the remainder of n1/n2 is zero. e.g. (divisible? 4 2) =&amp;gt; true&amp;#34;&lt;/span>
[n1 n2]
(zero? (rem n1 n2)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also use &lt;code>comp&lt;/code> to define divisibility more succinctly.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>divisible?
&lt;span style="color:#e6db74">&amp;#34;True when the remainder of n1/n2 is zero. e.g. (divisible? 4 2) =&amp;gt; true&amp;#34;&lt;/span>
(comp zero? rem))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since the various implementations of &lt;code>divisible?&lt;/code> are all pure functions,
they are drop-in replacements for each other (&amp;ldquo;referentially transparent&amp;rdquo;).
Use whichever version you like best.&lt;/p>
&lt;p>It may seem silly to write such tiny functions, but we earn a lot of firepower
by lifting out named domain concepts, &lt;em>especially&lt;/em> the simple ones, because
we can &lt;em>compose&lt;/em> them flexibly to express other domain concepts as needed.&lt;/p>
&lt;h2 id="map-reduce-for-fizzbuzz">map reduce for FizzBuzz&lt;/h2>
&lt;p>Here&amp;rsquo;s a doozy. By putting FizzBuzz &lt;em>logic&lt;/em> inside &lt;code>for&lt;/code>, we have in fact
deeply intertwined &lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup> two very distinct computations; viz. sequence
generation, and choice-making.&lt;/p>
&lt;p>Suppose we lifted out the decision logic into its own function?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>basic-buzz
&lt;span style="color:#e6db74">&amp;#34;We can also trivially rewrite this with &amp;#39;condp&amp;#39;.
&lt;/span>&lt;span style="color:#e6db74"> ref: https://clojuredocs.org/clojure.core/condp&amp;#34;&lt;/span>
[n]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">15&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">:else&lt;/span> n))
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; Unsurprisingly...&lt;/span>
(&lt;span style="color:#a6e22e">basic-buzz&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) =&amp;gt; &lt;span style="color:#ae81ff">1&lt;/span>
(&lt;span style="color:#a6e22e">basic-buzz&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">basic-buzz&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">basic-buzz&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can bring back &lt;code>for&lt;/code> this way&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>all-fizz-buzzes
(for [n (rest (&lt;span style="color:#a6e22e">range&lt;/span>))]
(&lt;span style="color:#a6e22e">basic-buzz&lt;/span> n)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But our new choice opens up the design space, because we can directly say
&amp;ldquo;this is just a mapping of the domain of numbers to the domain of FizzBuzz&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>all-fizz-buzzes
(map basic-buzz (rest (&lt;span style="color:#a6e22e">range&lt;/span>))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now since &lt;code>map&lt;/code> is conceptually just a special case of &lt;code>reduce&lt;/code>, we could write
the following. &lt;em>However&lt;/em> in Clojure, &lt;code>map&lt;/code> is lazy but &lt;code>reduce&lt;/code> is eager, and
we only use &lt;em>reduce&lt;/em> when we want to force a final calculation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>just-some-fizz-buzzes
(reduce (&lt;span style="color:#66d9ef">fn &lt;/span>[result n]
(conj result
(&lt;span style="color:#a6e22e">basic-buzz&lt;/span> n)))
[]
&lt;span style="color:#75715e">;; the classic programmer&amp;#39;s problem statement&lt;/span>
(range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">101&lt;/span>)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once again, we earned more compositional power by lifting out another small
concept. Let&amp;rsquo;s do some more of that.&lt;/p>
&lt;h2 id="domain-driven-design-fizzbuzz">Domain Driven Design FizzBuzz&lt;/h2>
&lt;p>We can further define concepts specific to the business domain of FizzBuzz.
This opens up our design space even more.&lt;/p>
&lt;p>Before that I&amp;rsquo;ll make one small tweak to help us express ourselves better.
I&amp;rsquo;ll rearrange the argument list of &lt;code>divisible?&lt;/code> so that the &amp;ldquo;more constant&amp;rdquo;
argument is placed first, and successively more variable argument(s) are
placed successively. Also rely on &amp;ldquo;truthiness&amp;rdquo; in Clojure to imply yes/no.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>divisible?
&lt;span style="color:#e6db74">&amp;#34;Given a number &amp;#39;n&amp;#39;, return the given word (truthy) when it is divisible
&lt;/span>&lt;span style="color:#e6db74"> by the divisor, or nil otherwise (falsey).&amp;#34;&lt;/span>
[divisor the-word n]
(when (zero? (rem n divisor))
the-word))
(&lt;span style="color:#66d9ef">def &lt;/span>fizzes?
&lt;span style="color:#e6db74">&amp;#34;Is a given number divisible by 3?&amp;#34;&lt;/span>
(partial divisible? &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>))
(&lt;span style="color:#66d9ef">def &lt;/span>buzzes?
&lt;span style="color:#e6db74">&amp;#34;Is a given number divisible by 5?&amp;#34;&lt;/span>
(partial divisible? &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>))
(&lt;span style="color:#66d9ef">def &lt;/span>fizzbuzzes?
&lt;span style="color:#e6db74">&amp;#34;Is a given number divisible by 3 and 5?&amp;#34;&lt;/span>
(partial divisible? &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can rewrite &lt;code>basic-buzz&lt;/code> using &lt;code>or&lt;/code>, which short-circuits, and
returns the first &lt;em>truthy&lt;/em> value it encounters. You will see this construct
in real-world Clojure code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>or-buzz
&lt;span style="color:#e6db74">&amp;#34;Just like conditional matching, but exploit short-circuit behaviour of &amp;#39;or&amp;#39;.
&lt;/span>&lt;span style="color:#e6db74"> Sadly, order of conditionals still matters.&amp;#34;&lt;/span>
[n]
(or (&lt;span style="color:#a6e22e">fizzbuzzes?&lt;/span> n)
(&lt;span style="color:#a6e22e">buzzes?&lt;/span> n)
(&lt;span style="color:#a6e22e">fizzes?&lt;/span> n)
n))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We argued that we are essentially expressing a choice, and that we can even
do it with &lt;code>juxt&lt;/code>, because once we grok &lt;code>juxt&lt;/code>, we want to use it &lt;em>everywhere&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>juxt-buzz
&lt;span style="color:#e6db74">&amp;#34;juxt for fun:
&lt;/span>&lt;span style="color:#e6db74"> e.g. ((juxt f g h) 42) -&amp;gt; [(f 42) (g 42) (h 42)]
&lt;/span>&lt;span style="color:#e6db74"> cf. https://clojuredocs.org/clojure.core/juxt
&lt;/span>&lt;span style="color:#e6db74"> Sadly, order of conditional checks still matters, which combined with
&lt;/span>&lt;span style="color:#e6db74"> the nil-punning that&amp;#39;s going on here is too subtle for production use.&amp;#34;&lt;/span>
[n]
(some identity ((&lt;span style="color:#a6e22e">juxt&lt;/span> fizzbuzzes? buzzes? fizzes? identity)
n)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yeah, that&amp;rsquo;s a head-scratcher. Best leave it back at home.&lt;/p>
&lt;h2 id="actually-domain-driven-fizzbuzz">Actually Domain Driven FizzBuzz&lt;/h2>
&lt;p>You might protest that well actually the clever little functions, in fact,
express the domain of the &lt;em>solution&lt;/em> (the business of calculating FizzBuzz),
not the domain of the &lt;em>problem&lt;/em> (arithmetic representation of FizzBuzz).&lt;/p>
&lt;p>And even though I flunked maths a lot, I would concur. So here goes nothing&amp;hellip;&lt;/p>
&lt;p>15 is the least common multiple of the prime factors. Suppose we cook up an
encoding scheme based on remainders of 15, and write it down as a lookup table?
We can then find &lt;code>(rem n 15)&lt;/code>, and look up the answer to FizzBuzz in the table.&lt;/p>
&lt;p>Why do a lookup table? Well, what is the simplest possible function? A literal
hard-coded lookup table!&lt;/p>
&lt;p>In Clojure, we can use hash-maps to write down look-up tables.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">&lt;span style="color:#75715e">;; A table of remainders of 15, in a hash-map.&lt;/span>
{&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And here is a very fun and useful fact. Clojure hash-maps are not just inert
data. They also behave as functions of their keys. We can literally call
&lt;code>({:a 42} :a)&lt;/code> and get back 42. Noice!&lt;/p>
&lt;p>So suppose we define a global lookup table?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>rem15-&amp;gt;fizz-buzz
{&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>})
(&lt;span style="color:#a6e22e">comment&lt;/span>
(&lt;span style="color:#a6e22e">rem15-&amp;gt;fizz-buzz&lt;/span> (rem &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>)) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">rem15-&amp;gt;fizz-buzz&lt;/span> (rem &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>)) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">rem15-&amp;gt;fizz-buzz&lt;/span> (rem &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>)) =&amp;gt; &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">rem15-&amp;gt;fizz-buzz&lt;/span> (rem &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>)) =&amp;gt; nil
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See the &lt;code>nil&lt;/code> returned for &amp;ldquo;no result found&amp;rdquo;? If you were paying attention
to the nil punning &lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup>, and the short-circuiting &lt;code>or&lt;/code>, you might get
the following idea. And you would not be wrong.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>or-rem15-buzz
[n]
(or (&lt;span style="color:#a6e22e">rem15-&amp;gt;fizz-buzz&lt;/span> (rem n &lt;span style="color:#ae81ff">15&lt;/span>))
n))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But we can be more right by using the &lt;code>get&lt;/code> function, which is designed for
use with hash-maps, and which allows us to conveniently specify a fallback
value for the &amp;ldquo;not found&amp;rdquo; case.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>get-rem15-buzz
[n]
(get rem15-&amp;gt;fizz-buzz
(rem n &lt;span style="color:#ae81ff">15&lt;/span>)
n))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Not to press the point, but they are referentially transparent.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(= (map or-rem15-buzz (range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>))
(map get-rem15-buzz (range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You may have also astutely noted that, in both the implementations above,
the order of calculation ceases to matter. Now we are doing maths.&lt;/p>
&lt;h2 id="fizzbuzz-by-construction">FizzBuzz by construction&lt;/h2>
&lt;p>Closely related to remainder lookup tables, we can make the observation that
FizzBuzz is cyclical in modulo 3, 5, and 15. So we can directly define the
&lt;em>idea&lt;/em> of FizzBuzz in those terms.&lt;/p>
&lt;p>This FizzBuzz is correctly ordered &lt;em>by definition&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>mod-cycle-buzz
&lt;span style="color:#e6db74">&amp;#34;We can declare a lazy sequence of FizzBuzz as modulo 3, 5, 15.
&lt;/span>&lt;span style="color:#e6db74"> The sequence is ordered by definition.&amp;#34;&lt;/span>
(&lt;span style="color:#66d9ef">let &lt;/span>[n identity
f (constantly &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>)
b (constantly &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>)
fb (constantly &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>)]
(cycle [n n f
n b f
n n f
b n f
n n fb])))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, Clojure&amp;rsquo;s &lt;code>map&lt;/code> is not only lazy, it can also apply a function of &lt;code>n&lt;/code>
arguments over &lt;code>n&lt;/code> collections until any one of the collections is exhausted.
So we can&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">def &lt;/span>all-fizz-buzzes
(map (&lt;span style="color:#66d9ef">fn &lt;/span>[f n] (&lt;span style="color:#a6e22e">f&lt;/span> n))
mod-cycle-buzz &lt;span style="color:#75715e">; countless modulo pattern&lt;/span>
(rest (&lt;span style="color:#a6e22e">range&lt;/span>)))) &lt;span style="color:#75715e">; countless sequence of numbers&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we think in terms of the prime factors 3 and 5, along with modulo cycles,
it may inspire a generalised version of fizzbuzz, like so.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>any-mod-cycle-buzz
&lt;span style="color:#e6db74">&amp;#34;Given a number and a sequence of words mapping to prime factors,
&lt;/span>&lt;span style="color:#e6db74"> either return the corresponding word-version for the number position,
&lt;/span>&lt;span style="color:#e6db74"> or the number itself, if no prime factor exists.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> Basically, the set of words should map to set of prime factors.
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> We also don&amp;#39;t make any assumptions about order of words here. It is up
&lt;/span>&lt;span style="color:#e6db74"> to the caller to choose whatever sequence they please.&amp;#34;&lt;/span>
[num &lt;span style="color:#f92672">&amp;amp;&lt;/span> words]
(or (&lt;span style="color:#a6e22e">not-empty&lt;/span> (reduce str words))
num))
(map any-mod-cycle-buzz
(range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>)
(cycle [nil nil &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>])
(cycle [nil nil nil nil &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>]))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And last but not least, this interpretation allows us to express the arithmetic
&lt;em>identity&lt;/em> of the whole category of FizzBuzzes, which is, just the number
sequence itself. (As in, the identity of + is 0 and that of * is 1).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(map any-mod-cycle-buzz
(range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But then again, I&amp;rsquo;ve flunked maths too often to be confident about any of this.
Please complain to me if I&amp;rsquo;m wrong.&lt;/p>
&lt;h2 id="interlude-all-the-fizz-buzzes-so-far">Interlude: all the fizz-buzzes so far&lt;/h2>
&lt;p>I&amp;rsquo;ll drop this mini &lt;em>pièce de résistance&lt;/em> (for now), and pause for a breather.
I&amp;rsquo;ve copied down all the fizz-buzz variants (minus doc strings for brevity).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>all.them.fizz.buzzers)
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz map) &lt;span style="color:#75715e">; now, what `map` can do fizz-buzz can too&lt;/span>
&lt;span style="color:#75715e">;; Le FizzBuzz Classique Functional&lt;/span>
(&lt;span style="color:#66d9ef">defn &lt;/span>basic-buzz
[n]
(&lt;span style="color:#66d9ef">let &lt;/span>[divisible? (comp zero? rem)]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">15&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">:else&lt;/span> n)))
&lt;span style="color:#75715e">;; Branching logic FizzBuzzes&lt;/span>
(&lt;span style="color:#66d9ef">defn &lt;/span>divisible?
[divisor the-word n]
(when (zero? (rem n divisor))
the-word))
(&lt;span style="color:#66d9ef">def &lt;/span>fizzes? (partial divisible? &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>))
(&lt;span style="color:#66d9ef">def &lt;/span>buzzes? (partial divisible? &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>))
(&lt;span style="color:#66d9ef">def &lt;/span>fizzbuzzes? (partial divisible? &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>))
(&lt;span style="color:#66d9ef">defn &lt;/span>or-buzz
[n]
(or (&lt;span style="color:#a6e22e">fizzbuzzes?&lt;/span> n)
(&lt;span style="color:#a6e22e">buzzes?&lt;/span> n)
(&lt;span style="color:#a6e22e">fizzes?&lt;/span> n)
n))
(&lt;span style="color:#66d9ef">defn &lt;/span>juxt-buzz
[n]
(some identity
((&lt;span style="color:#a6e22e">juxt&lt;/span> fizzbuzzes? buzzes? fizzes? identity)
n)))
&lt;span style="color:#75715e">;; More mathematical FizzBuzzes&lt;/span>
(&lt;span style="color:#66d9ef">def &lt;/span>rem15-&amp;gt;fizz-buzz
{&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>})
(&lt;span style="color:#66d9ef">defn &lt;/span>or-rem15-buzz
[n]
(or (&lt;span style="color:#a6e22e">rem15-&amp;gt;fizz-buzz&lt;/span> (rem n &lt;span style="color:#ae81ff">15&lt;/span>))
n))
(&lt;span style="color:#66d9ef">defn &lt;/span>get-rem15-buzz
[n]
(get rem15-&amp;gt;fizz-buzz
(rem n &lt;span style="color:#ae81ff">15&lt;/span>)
n))
(&lt;span style="color:#66d9ef">def &lt;/span>mod-cycle-buzz
(&lt;span style="color:#66d9ef">let &lt;/span>[n identity
f (constantly &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>)
b (constantly &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>)
fb (constantly &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>)]
(cycle [n n f
n b f
n n f
b n f
n n fb])))
(&lt;span style="color:#66d9ef">defn &lt;/span>any-mod-cycle-buzz
[num &lt;span style="color:#f92672">&amp;amp;&lt;/span> words]
(or (&lt;span style="color:#a6e22e">not-empty&lt;/span> (reduce str words))
num))
&lt;span style="color:#75715e">;; Inspect and check the fizz-buzzes&lt;/span>
(&lt;span style="color:#66d9ef">defn &lt;/span>call-all-fizz-buzzers
[range-of-buzzees]
[(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> basic-buzz
range-of-buzzees)
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> or-buzz
range-of-buzzees)
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> juxt-buzz
range-of-buzzees)
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> or-rem15-buzz
range-of-buzzees)
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> get-rem15-buzz
range-of-buzzees)
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> (&lt;span style="color:#66d9ef">fn &lt;/span>[f n] (&lt;span style="color:#a6e22e">f&lt;/span> n))
mod-cycle-buzz
range-of-buzzees)
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> any-mod-cycle-buzz
range-of-buzzees
(cycle [nil nil &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>])
(cycle [nil nil nil nil &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>]))])
(&lt;span style="color:#66d9ef">defn &lt;/span>check-all-fizz-buzzers
&lt;span style="color:#e6db74">&amp;#34;Return true if all known fizz-buzzers produce equal results
&lt;/span>&lt;span style="color:#e6db74"> for the programmer&amp;#39;s FizzBuzz for numbers 1 to 100&amp;#34;&lt;/span>
[]
(apply = (&lt;span style="color:#a6e22e">call-all-fizz-buzzers&lt;/span> (range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">101&lt;/span>))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And lest we forget, let us flog the dead horse one last time.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">defn &lt;/span>severely-broken-buzz
&lt;span style="color:#e6db74">&amp;#34;Please don&amp;#39;t do this in Clojure.&amp;#34;&lt;/span>
[n]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">15&lt;/span>) (println &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>)
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">3&lt;/span>) (println &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>)
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">5&lt;/span>) (println &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>)
&lt;span style="color:#e6db74">:else&lt;/span> (println n)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The mind is abuzz drafting moaaaar variants&amp;hellip; Stay tuned!&lt;/p>
&lt;h2 id="peano-fizzbuzz">Peano FizzBuzz&lt;/h2>
&lt;p>Since we are computing with natural numbers, we can express FizzBuzz in terms
of the &amp;ldquo;Successor&amp;rdquo; operation of Peano arithmetic.&lt;/p>
&lt;p>However, we have to modify our number system a bit to make it work right.
We define a PeanoBuzz number to be a pair of a natural number and its FizzBuzz
counterpart. The &lt;em>PeanoBuzz&lt;/em> number system starts at &lt;code>[0 0]&lt;/code>.&lt;/p>
&lt;p>We can enjoy the fruits of compositionality that we planted earlier.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>all.them.fizz.buzzers)
(&lt;span style="color:#66d9ef">def &lt;/span>rem15-&amp;gt;fizz-buzz
{&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>})
(&lt;span style="color:#66d9ef">defn &lt;/span>get-rem15-buzz
[n]
(get rem15-&amp;gt;fizz-buzz
(rem n &lt;span style="color:#ae81ff">15&lt;/span>)
n))
(&lt;span style="color:#66d9ef">def &lt;/span>S
&lt;span style="color:#e6db74">&amp;#34;The PeanoBuzz number system starting at [0 0] is closed under
&lt;/span>&lt;span style="color:#e6db74"> this definition of Successor.&amp;#34;&lt;/span>
(comp (&lt;span style="color:#a6e22e">juxt&lt;/span> identity get-rem15-buzz)
inc
first))
(&lt;span style="color:#66d9ef">def &lt;/span>all-peano-buzzes
(iterate S [&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>]))
(&lt;span style="color:#a6e22e">comment&lt;/span>
(= (take &lt;span style="color:#ae81ff">16&lt;/span> all-peano-buzzes)
[[&lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>] [&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] [&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>]
[&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>] [&lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>]
[&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>]
[&lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>] [&lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>] [&lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>]
[&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>]
[&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>] [&lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span>]
[&lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>] [&lt;span style="color:#ae81ff">13&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span>] [&lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span>]
[&lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>]]))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since we have a &lt;code>S&lt;/code> that closes over the &lt;em>PeanoBuzz&lt;/em> number system, I wonder
if we can satisfy all the &lt;a href="https://en.wikipedia.org/wiki/Peano%5Faxioms">Peano Axioms&lt;/a>? Probably another blog post :)&lt;/p>
&lt;p>Incidentally, we can trivially map the domain of PeanoBuzz back into the
domain of FizzBuzz.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>all.them.fizz.buzzers)
(= (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> basic-buzz
(range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">101&lt;/span>))
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> second
(take &lt;span style="color:#ae81ff">100&lt;/span> (rest all-peano-buzzes))))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We are already half way to Lambda Calculus / Church Numerals. But going there
will side-track our FizzBuzz expedition way too much. So I&amp;rsquo;ll leave the Church
Numerals version as an exercise to the reader &lt;sup id="fnref:13">&lt;a href="#fn:13" class="footnote-ref" role="doc-noteref">13&lt;/a>&lt;/sup>. Try to make it
so that that we can define an &lt;code>all-church-nums-buzz&lt;/code> and slot it into the
&lt;code>fizz-buzz&lt;/code> checks we already have.&lt;/p>
&lt;h2 id="dispatch-buzz">Dispatch Buzz&lt;/h2>
&lt;p>If you squint at the conditional FizzBuzzes, like &lt;code>basic-buzz&lt;/code>, &lt;code>or-buzz&lt;/code> etc.,
you might re-see them as a &lt;em>dispatch&lt;/em> problem. And why would you be wrong?
They, like any other if-else-y construct are truth tables hard-wired to
&amp;ldquo;finalised&amp;rdquo; values or operations.&lt;/p>
&lt;p>Naturally we will follow the consummate Clojurian&amp;rsquo;s primal instinct of needing
to pry apart two things masquerading as one (&lt;em>&amp;ldquo;decomplecting&amp;rdquo;&lt;/em> &lt;sup id="fnref:14">&lt;a href="#fn:14" class="footnote-ref" role="doc-noteref">14&lt;/a>&lt;/sup>
in Clojurish). But, &lt;em>what exactly&lt;/em> are we, ah, &lt;em>decomplecting&lt;/em>? Now that is
a very interesting rabbit hole.&lt;/p>
&lt;p>In this case we are &lt;em>&amp;ldquo;separating mechanism from policy&amp;rdquo;&lt;/em> &lt;sup id="fnref:15">&lt;a href="#fn:15" class="footnote-ref" role="doc-noteref">15&lt;/a>&lt;/sup>.
Figuring out how to do this delivers a powerful, flexible method of program
design into our eager hands.&lt;/p>
&lt;p>This table shows &amp;ldquo;mechanism&amp;rdquo; and &amp;ldquo;policy&amp;rdquo; hard-wired together.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-org" data-lang="org">&amp;lt;&lt;span style="color:#e6db74">-- ------- MECHANISM -------- --&lt;/span>&amp;gt;|&amp;lt;&lt;span style="color:#e6db74">-- POLICY --&lt;/span>&amp;gt;
&lt;span style="color:#e6db74">| n divisible? 3 | n divisible? 5 | Final value |&lt;/span>
&lt;span style="color:#e6db74">|----------------+----------------+-------------|&lt;/span>
&lt;span style="color:#e6db74">| true | true | FizzBuzz |&lt;/span>
&lt;span style="color:#e6db74">| true | false | Fizz |&lt;/span>
&lt;span style="color:#e6db74">| false | true | Buzz |&lt;/span>
&lt;span style="color:#e6db74">| false | false | n |&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is an attempt to pry the two apart.&lt;/p>
&lt;p>&lt;em>&lt;strong>Mechanism&lt;/strong>&lt;/em>&lt;/p>
&lt;p>The &lt;em>&lt;strong>&amp;ldquo;mechanism&amp;rdquo;&lt;/strong>&lt;/em> here is &lt;em>any&lt;/em> function that translates a number (or more
generally, &lt;em>any&lt;/em> thing) to the two inputs of a 2-value truth table. We can
see it more clearly if we rewrite the input columns of the truth table like
this. Here &lt;code>f&lt;/code> and &lt;code>g&lt;/code> are functions of &lt;code>a&lt;/code> to Boolean.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-org" data-lang="org">&lt;span style="color:#e6db74">| (f a) | (g a) |&lt;/span>
&lt;span style="color:#e6db74">|-------+-------|&lt;/span>
&lt;span style="color:#e6db74">| true | true |&lt;/span>
&lt;span style="color:#e6db74">| true | false |&lt;/span>
&lt;span style="color:#e6db74">| false | true |&lt;/span>
&lt;span style="color:#e6db74">| false | false |&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can express this as a Clojure punction &amp;lsquo;coz (f a) (g a) is ((juxt f g) a).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>dispatch.buzz)
(&lt;span style="color:#66d9ef">defn &lt;/span>mechanism
&lt;span style="color:#e6db74">&amp;#34;Given two functions, presumably of anything -to-&amp;gt; Boolean, return
&lt;/span>&lt;span style="color:#e6db74"> a function that can construct inputs of a 2-input truth table.&amp;#34;&lt;/span>
[f? g?]
(&lt;span style="color:#a6e22e">juxt&lt;/span> f? g?))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>See? Such abstract. Much general-purpose. Very decomplect. Wow.&lt;/p>
&lt;p>&lt;em>&lt;strong>Policy&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Here, we define &lt;em>&lt;strong>&amp;ldquo;policy&amp;rdquo;&lt;/strong>&lt;/em> as something having special context of FizzBuzz
that consumes input rows of the truth table and emits corresponding output fields.&lt;/p>
&lt;p>First, we specialise the abstract &lt;code>mechanism&lt;/code> to a FizzBuzz mechanism. You
may smirk &lt;sup id="fnref:16">&lt;a href="#fn:16" class="footnote-ref" role="doc-noteref">16&lt;/a>&lt;/sup>, but just you wait. There is a (multi) method to the
madness&amp;hellip;&lt;/p>
&lt;p>Here is the table we started with, rewritten for our specialisation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-org" data-lang="org">&lt;span style="color:#e6db74">| (fizzes? n) | (buzzes? n) | (mechanism fizzes? buzzes?) -&amp;gt; mfb |&lt;/span>
&lt;span style="color:#e6db74">|-------------+-------------+------------------------------------|&lt;/span>
&lt;span style="color:#e6db74">| true | true | (mfb n) =&amp;gt; &amp;#34;FizzBuzz&amp;#34; |&lt;/span>
&lt;span style="color:#e6db74">| true | false | (mfb n) =&amp;gt; &amp;#34;Fizz&amp;#34; |&lt;/span>
&lt;span style="color:#e6db74">| false | true | (mfb n) =&amp;gt; &amp;#34;Buzz&amp;#34; |&lt;/span>
&lt;span style="color:#e6db74">| false | false | (mfb n) =&amp;gt; n |&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is the intermediate step of the specialisation, viz. &lt;code>(mechanism f g) -&amp;gt; h&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>dispatch.buzz)
(&lt;span style="color:#66d9ef">defn &lt;/span>divisible?
[divisor n]
(zero? (rem n divisor)))
(&lt;span style="color:#66d9ef">def &lt;/span>fizzes? (partial divisible? &lt;span style="color:#ae81ff">3&lt;/span>))
(&lt;span style="color:#66d9ef">def &lt;/span>buzzes? (partial divisible? &lt;span style="color:#ae81ff">5&lt;/span>))
&lt;span style="color:#75715e">;; If we take the abstract mechanism and give it functions&lt;/span>
&lt;span style="color:#75715e">;; that test numbers for fizzery and buzzery, then we can&lt;/span>
&lt;span style="color:#75715e">;; construct a version of the truth table that is /concretely/&lt;/span>
&lt;span style="color:#75715e">;; specific to FizzBuzz.&lt;/span>
(&lt;span style="color:#a6e22e">comment&lt;/span>
(= (map (&lt;span style="color:#a6e22e">mechanism&lt;/span> fizzes? buzzes?)
[&lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>])
[[true true]
[true false]
[false true]
[false false]])
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we hang it all together with Clojure&amp;rsquo;s multimethods &lt;sup id="fnref:17">&lt;a href="#fn:17" class="footnote-ref" role="doc-noteref">17&lt;/a>&lt;/sup>, like so.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>dispatch.buzz)
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz map)
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz-mechanism
(&lt;span style="color:#a6e22e">mechanism&lt;/span> fizzes? buzzes?))
(&lt;span style="color:#66d9ef">defmulti &lt;/span>dispatch-buzz
&lt;span style="color:#e6db74">&amp;#34;It yields the third column of the truth table.&amp;#34;&lt;/span>
fizz-buzz-mechanism)
&lt;span style="color:#75715e">;; The /Policy/, fully realised.&lt;/span>
&lt;span style="color:#75715e">;; ((mechanism fizzes? buzzes?) n) -&amp;gt; final results&lt;/span>
(&lt;span style="color:#66d9ef">defmethod &lt;/span>dispatch-buzz [true true]
[n]
&lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>)
(&lt;span style="color:#66d9ef">defmethod &lt;/span>dispatch-buzz [true false]
[n]
&lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>)
(&lt;span style="color:#66d9ef">defmethod &lt;/span>dispatch-buzz [false true]
[n]
&lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>)
(&lt;span style="color:#66d9ef">defmethod &lt;/span>dispatch-buzz &lt;span style="color:#e6db74">:default&lt;/span>
[n]
n)
&lt;span style="color:#75715e">;; The /Policy/, applied.&lt;/span>
(&lt;span style="color:#a6e22e">comment&lt;/span>
(= (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> dispatch-buzz
[&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>])
[&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>])
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yes, &amp;lsquo;tis a wee FizzBuzz interpreter!&lt;/p>
&lt;p>(Pirouettes off-stage, gracefully.)&lt;/p>
&lt;h2 id="embarrassingly-parallel-fizzbuzz">Embarrassingly Parallel FizzBuzz&lt;/h2>
&lt;p>It turns out FizzBuzz is one of those so-called &lt;a href="https://en.wikipedia.org/wiki/Embarrassingly%5Fparallel">Embarrassingly Parallel&lt;/a> problems.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>all.them.fizz.buzzers)
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz map)
&lt;span style="color:#75715e">;; Add 1 character for parallel map.&lt;/span>
(&lt;span style="color:#66d9ef">def &lt;/span>embarrassingly-parallel-fizz-buzz pmap)
(&lt;span style="color:#a6e22e">comment&lt;/span>
(&lt;span style="color:#66d9ef">let &lt;/span>[range-of-buzzees (range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">101&lt;/span>)]
(= (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> basic-buzz
range-of-buzzees)
(&lt;span style="color:#a6e22e">embarrassingly-parallel-fizz-buzz&lt;/span> basic-buzz
range-of-buzzees)))
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I was almost too embarrassed to write this, but I&amp;rsquo;m glad good sense prevailed,
because the trivial replacement of &lt;code>map&lt;/code> with &lt;code>pmap&lt;/code> teaches a lesson.&lt;/p>
&lt;p>Parallelism is impossibly hard if we don&amp;rsquo;t have pure functions, immutability,
and laziness. When we do, it reduces to merely hard but tractable. The
proverbial single character code modification (in this case, literally so)
gets a free ride on those other constructs.&lt;/p>
&lt;p>We can see it in &lt;code>pmap&lt;/code>&amp;rsquo;s implementation. It is fairly straightforward. Fetch
its source and stare at it for a bit; &lt;code>(clojure.repl/source pmap)&lt;/code>. You will
be able to make sense of it with a bit of cross-referencing ClojureDocs.&lt;/p>
&lt;p>If your favourite language has something similar (parallel version of a
sequential function), and if you choose to compare implementations, I will
be delighted to learn from your analysis!&lt;/p>
&lt;h2 id="oop-buzz">OOP Buzz&lt;/h2>
&lt;p>What is an Object in, say, Java? It is a combination of four distinct things:&lt;/p>
&lt;ul>
&lt;li>Name (Class name / Java type)&lt;/li>
&lt;li>Structure (Class members, methods etc.)&lt;/li>
&lt;li>Behaviour (effects caused by methods)&lt;/li>
&lt;li>State (contained in the run-time instance of the Class)&lt;/li>
&lt;/ul>
&lt;p>In Clojure, &lt;em>all of these are separate&lt;/em> (&amp;ldquo;available a la carte&amp;rdquo;, in Clojurish),
the consequences of which are hard to explain sans a motivating example.&lt;/p>
&lt;p>Clojure&amp;rsquo;s approach to Polymorphism allow us to do things like this.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>oops.fizzbuzz)
(&lt;span style="color:#66d9ef">def &lt;/span>divisible? (comp zero? rem))
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz map)
&lt;span style="color:#75715e">;; Like a Java Interface, but better.&lt;/span>
(&lt;span style="color:#66d9ef">defprotocol &lt;/span>IFizzBuzz
(&lt;span style="color:#a6e22e">proto-buzz&lt;/span> [this]))
&lt;span style="color:#75715e">;; We can add new behaviour to existing types,&lt;/span>
&lt;span style="color:#75715e">;; including /any/ Java built-in type.&lt;/span>
(&lt;span style="color:#a6e22e">extend-protocol&lt;/span> IFizzBuzz
java.lang.Number
(&lt;span style="color:#a6e22e">proto-buzz&lt;/span> [this]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> this &lt;span style="color:#ae81ff">15&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> this &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> this &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">:else&lt;/span> this)))
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; Now we can do this&lt;/span>
(= (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> proto-buzz
[&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>])
[&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>])
&lt;span style="color:#75715e">;; And we can also do this&lt;/span>
(= (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> proto-buzz
[&lt;span style="color:#ae81ff">1.0&lt;/span> &lt;span style="color:#ae81ff">3.0&lt;/span> &lt;span style="color:#ae81ff">5.0&lt;/span> &lt;span style="color:#ae81ff">15.0&lt;/span> &lt;span style="color:#ae81ff">15.9&lt;/span>])
[&lt;span style="color:#ae81ff">1.0&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">15.9&lt;/span>])
&lt;span style="color:#75715e">;; WITHOUT breaking any existing Equality semantics.&lt;/span>
&lt;span style="color:#75715e">;; (= 42 42) =&amp;gt; true (long and long)&lt;/span>
&lt;span style="color:#75715e">;; (= 42 42.0) =&amp;gt; false (long and double)&lt;/span>
&lt;span style="color:#75715e">;; (= 42.0 42.0) =&amp;gt; true (double and double)&lt;/span>
&lt;span style="color:#75715e">;; Thus, this is false, as it should be.&lt;/span>
(= (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> proto-buzz
[&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>])
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> proto-buzz
[&lt;span style="color:#ae81ff">1.0&lt;/span> &lt;span style="color:#ae81ff">3.0&lt;/span> &lt;span style="color:#ae81ff">5.0&lt;/span> &lt;span style="color:#ae81ff">15.0&lt;/span> &lt;span style="color:#ae81ff">15.9&lt;/span>]))
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Not to put too fine a point on it, but Clojure is a &lt;em>far more capable&lt;/em>
Object Oriented Programming System than say Java or Kotlin, a fact which I
have personally profited from handsomely in the past &lt;sup id="fnref:18">&lt;a href="#fn:18" class="footnote-ref" role="doc-noteref">18&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Why?&lt;/p>
&lt;p>In short, Clojure cleanly solves the &amp;ldquo;&lt;a href="https://en.wikipedia.org/wiki/Expression%5Fproblem">Expression Problem&lt;/a>&amp;rdquo;.&lt;/p>
&lt;p>In long, you can&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>Watch &lt;a href="https://www.youtube.com/watch?v=kQhOlWXXl2I">Clojure Protocols Explained&lt;/a>, by Sean Devlin.&lt;/li>
&lt;li>Watch &lt;a href="https://www.infoq.com/presentations/Clojure-Expression-Problem/">Clojure&amp;rsquo;s Solutions to the Expression Problem&lt;/a>, by Chris Houser.&lt;/li>
&lt;li>Listen to &lt;a href="https://www.infoq.com/interviews/hickey-clojure-protocols/">Rich Hickey on Protocols and Clojure 1.3&lt;/a>, by Rich Hickey.&lt;/li>
&lt;li>Read &amp;ldquo;&lt;a href="https://gist.github.com/reborg/dc8b0c96c397a56668905e2767fd697f">Rich Already Answered That!&lt;/a>&amp;rdquo;, curated by reborg.
&lt;em>&amp;ldquo;A list of commonly asked questions, design decisions, reasons why Clojure
is the way it is as they were answered directly by Rich.&amp;quot;&lt;/em>&lt;/li>
&lt;li>Read the parable of &lt;a href="https://people.csail.mit.edu/gregs/ll1-discuss-archive-html/msg03277.html">The venerable master Qc Na and his student Anton&lt;/a>.
This &lt;a href="https://news.ycombinator.com/item?id=14235020">HN thread&lt;/a> also has some interesting links (and diatribes).&lt;/li>
&lt;/ul>
&lt;p>In &lt;em>very&lt;/em> short&amp;hellip; Tweet this, look smart, get paid!&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>If you do Functional Programming right, you get Object Oriented Programming
for free #Clojure. (And vice-versa e.g. #Erlang #Smalltalk #OCaml).&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Yours Truly&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="non-destructive-fizzbuzz">Non-Destructive FizzBuzz&lt;/h2>
&lt;p>&lt;code>proto-buzz&lt;/code> is a great motivating example of what I would like to call the
&lt;em>&lt;strong>Non-Destructive&lt;/strong>&lt;/em> FizzBuzz.&lt;/p>
&lt;p>All the FizzBuzz solutions seen previously, except PeanoBuzz, lose information.
This is almost always bad because its impossible to reverse information loss.
The inverse is also true. It is almost always good to &lt;em>augment&lt;/em> information.
Prefer to enrich information and retain as much as resources permit (organised
neatly, of course). Ask any lawyer or accountant or friendly neighbourhood
Clojurian which alternative would set their hair on fire.&lt;/p>
&lt;p>Here I play with some more ways to FizzBuzz non-destructively.&lt;/p>
&lt;p>As I do, I meditate upon the extra super nice thing about &lt;code>proto-buzz&lt;/code>.
Which is that we did &lt;em>not&lt;/em> have to invent a new number system or box numbers
in some composite FizzBuzz data representation &lt;em>and&lt;/em> we lost no functionality
&amp;mdash; numbers still behave exactly as we expect, with zero added overhead!&lt;/p>
&lt;h3 id="composite-data-buzz">Composite Data Buzz&lt;/h3>
&lt;p>PeanoBuzz was an example of writing FizzBuzz in terms of &amp;ldquo;composite&amp;rdquo; data.
Abstractly, that idea is basically &amp;ldquo;attach some meta-data to my things&amp;rdquo;.&lt;/p>
&lt;p>PeanoBuzz was a tuple &lt;code>[3 &amp;quot;Fizz&amp;quot;]&lt;/code>, but it could very well have been a custom
map representation, say, &lt;code>{:n 3 :fizzbuzz &amp;quot;Fizz&amp;quot;}&lt;/code>.&lt;/p>
&lt;p>We can do one better by using Clojure Records to attach full-blooded Java
types to our numbers &lt;sup id="fnref:19">&lt;a href="#fn:19" class="footnote-ref" role="doc-noteref">19&lt;/a>&lt;/sup> &lt;em>and also&lt;/em> make &amp;ldquo;composite&amp;rdquo; data, because
Records give us all the features of generic hash-maps for free.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>boxed.fizz.buzz)
(&lt;span style="color:#66d9ef">def &lt;/span>divisible? (comp zero? rem))
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz map)
(&lt;span style="color:#66d9ef">defrecord &lt;/span>Fizz [n])
(&lt;span style="color:#66d9ef">defrecord &lt;/span>Buzz [n])
(&lt;span style="color:#66d9ef">defrecord &lt;/span>FizzBuzz [n])
(&lt;span style="color:#66d9ef">defrecord &lt;/span>Identity [n])
(&lt;span style="color:#66d9ef">defn &lt;/span>boxed-buzz
[n]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">15&lt;/span>) (&lt;span style="color:#a6e22e">-&amp;gt;FizzBuzz&lt;/span> n)
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">3&lt;/span>) (&lt;span style="color:#a6e22e">-&amp;gt;Fizz&lt;/span> n)
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">5&lt;/span>) (&lt;span style="color:#a6e22e">-&amp;gt;Buzz&lt;/span> n)
&lt;span style="color:#e6db74">:else&lt;/span> (&lt;span style="color:#a6e22e">-&amp;gt;Identity&lt;/span> n)))
(&lt;span style="color:#66d9ef">def &lt;/span>all-boxed-buzzes
(map boxed-buzz
(rest (&lt;span style="color:#a6e22e">range&lt;/span>))))
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; Composite hash-map-like data!&lt;/span>
(= (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> boxed-buzz
[&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>])
[&lt;span style="color:#f92672">#&lt;/span>boxed.fizz.buzz.Identity{&lt;span style="color:#e6db74">:n&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>}
&lt;span style="color:#f92672">#&lt;/span>boxed.fizz.buzz.Fizz{&lt;span style="color:#e6db74">:n&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>}
&lt;span style="color:#f92672">#&lt;/span>boxed.fizz.buzz.Buzz{&lt;span style="color:#e6db74">:n&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>}
&lt;span style="color:#f92672">#&lt;/span>boxed.fizz.buzz.FizzBuzz{&lt;span style="color:#e6db74">:n&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>}]) &lt;span style="color:#75715e">; =&amp;gt; true&lt;/span>
&lt;span style="color:#75715e">;; Which is nondestructive!&lt;/span>
(= [&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>]
(&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> (comp &lt;span style="color:#e6db74">:n&lt;/span> boxed-buzz)
[&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>])) &lt;span style="color:#75715e">; =&amp;gt; true&lt;/span>
&lt;span style="color:#75715e">;; And which has real Java types!&lt;/span>
(= (map type (&lt;span style="color:#a6e22e">fizz-buzz&lt;/span> boxed-buzz [&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>]))
[boxed.fizz.buzz.Identity
boxed.fizz.buzz.Fizz
boxed.fizz.buzz.Buzz
boxed.fizz.buzz.FizzBuzz]) &lt;span style="color:#75715e">; =&amp;gt; true&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Further exercises for the dear reader!&lt;/p>
&lt;ul>
&lt;li>Re-implement PeanoBuzz using Clojure hash-maps!&lt;/li>
&lt;li>Re-re-implement PeanoBuzz with Records!&lt;/li>
&lt;li>&lt;em>Separately&lt;/em> write something that can return the classic string-or-number
equivalent of your composite types! (Hint: use multimethods and/or protocols
as appropriate).&lt;/li>
&lt;/ul>
&lt;p>Last but not least, ask yourself &amp;ldquo;But what about equality? And the rest of
arithmetic?&amp;rdquo; while comparing these with &lt;code>proto-buzz&lt;/code>.&lt;/p>
&lt;h3 id="clojure-spec-d-buzz">Clojure Spec&amp;rsquo;d Buzz&lt;/h3>
&lt;p>Off-label use of &lt;a href="https://clojure.org/guides/spec">Clojure Spec&lt;/a>&amp;rsquo;s &lt;code>conform&lt;/code> as a parser can be very handy.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>conformer.buzz)
(&lt;span style="color:#a6e22e">require&lt;/span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>[clojure.spec.alpha &lt;span style="color:#e6db74">:as&lt;/span> s])
(&lt;span style="color:#66d9ef">defn &lt;/span>divisible?
[divisor n]
(zero? (rem n divisor)))
(&lt;span style="color:#66d9ef">def &lt;/span>fizzes? (partial divisible? &lt;span style="color:#ae81ff">3&lt;/span>))
(&lt;span style="color:#66d9ef">def &lt;/span>buzzes? (partial divisible? &lt;span style="color:#ae81ff">5&lt;/span>))
(&lt;span style="color:#a6e22e">s/def&lt;/span> &lt;span style="color:#e6db74">::number&lt;/span> number?)
(&lt;span style="color:#a6e22e">s/def&lt;/span> &lt;span style="color:#e6db74">::fizzes&lt;/span> (&lt;span style="color:#a6e22e">s/and&lt;/span> &lt;span style="color:#e6db74">::number&lt;/span> fizzes?))
(&lt;span style="color:#a6e22e">s/def&lt;/span> &lt;span style="color:#e6db74">::buzzes&lt;/span> (&lt;span style="color:#a6e22e">s/and&lt;/span> &lt;span style="color:#e6db74">::number&lt;/span> buzzes?))
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; Now we can parse input data...&lt;/span>
(&lt;span style="color:#a6e22e">s/conform&lt;/span> &lt;span style="color:#e6db74">::fizzes&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e">; =&amp;gt; 3&lt;/span>
(&lt;span style="color:#a6e22e">s/conform&lt;/span> &lt;span style="color:#e6db74">::buzzes&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#75715e">; =&amp;gt; 5&lt;/span>
(&lt;span style="color:#a6e22e">s/conform&lt;/span> &lt;span style="color:#e6db74">::buzzes&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e">; =&amp;gt; :clojure.spec.alpha/invalid&lt;/span>
(&lt;span style="color:#a6e22e">s/conform&lt;/span> (&lt;span style="color:#a6e22e">s/and&lt;/span> &lt;span style="color:#e6db74">::fizzes&lt;/span> &lt;span style="color:#e6db74">::buzzes&lt;/span>) &lt;span style="color:#ae81ff">15&lt;/span>) &lt;span style="color:#75715e">; =&amp;gt; 15&lt;/span>
&lt;span style="color:#75715e">;; And we can handle non-conforming data gracefully,&lt;/span>
&lt;span style="color:#75715e">;; instead of panicking and throwing exceptions.&lt;/span>
(&lt;span style="color:#a6e22e">s/conform&lt;/span> (&lt;span style="color:#a6e22e">s/or&lt;/span> &lt;span style="color:#e6db74">::fizzes&lt;/span> &lt;span style="color:#e6db74">::buzzes&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;lol&amp;#34;&lt;/span>) &lt;span style="color:#75715e">; :clojure.spec.alpha/invalid&lt;/span>
)
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz-specs
&lt;span style="color:#e6db74">&amp;#34;Set of FizzBuzz parsers.&amp;#34;&lt;/span>
&lt;span style="color:#f92672">#&lt;/span>{&lt;span style="color:#e6db74">::fizzes&lt;/span> &lt;span style="color:#e6db74">::buzzes&lt;/span> &lt;span style="color:#e6db74">::number&lt;/span>})
(&lt;span style="color:#66d9ef">defn &lt;/span>spec-parse-buzz
&lt;span style="color:#e6db74">&amp;#34;Conform the given input to the set of specs for fizz-buzz, and return
&lt;/span>&lt;span style="color:#e6db74"> a pair of the input and a map of parsed values keyed by the parser name.&amp;#34;&lt;/span>
[x]
[x (zipmap fizz-buzz-specs
(map &lt;span style="color:#f92672">#&lt;/span>(&lt;span style="color:#a6e22e">s/conform&lt;/span> % x) fizz-buzz-specs))])
(&lt;span style="color:#66d9ef">def &lt;/span>all-spec-buzzes
(map spec-parse-buzz
(rest (&lt;span style="color:#a6e22e">range&lt;/span>))))
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; And we can...&lt;/span>
(take &lt;span style="color:#ae81ff">100&lt;/span> all-spec-buzzes)
&lt;span style="color:#75715e">;; Which gives us enriched data, like this:&lt;/span>
(= (into {} (map spec-parse-buzz [&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#e6db74">&amp;#34;lol&amp;#34;&lt;/span>]))
{&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">#&lt;/span>&lt;span style="color:#e6db74">:conformer.buzz&lt;/span>{&lt;span style="color:#e6db74">:fizzes&lt;/span> &lt;span style="color:#e6db74">:clojure.spec.alpha/invalid&lt;/span>,
&lt;span style="color:#e6db74">:buzzes&lt;/span> &lt;span style="color:#e6db74">:clojure.spec.alpha/invalid&lt;/span>,
&lt;span style="color:#e6db74">:number&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>},
&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">#&lt;/span>&lt;span style="color:#e6db74">:conformer.buzz&lt;/span>{&lt;span style="color:#e6db74">:fizzes&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>,
&lt;span style="color:#e6db74">:buzzes&lt;/span> &lt;span style="color:#e6db74">:clojure.spec.alpha/invalid&lt;/span>,
&lt;span style="color:#e6db74">:number&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>},
&lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">#&lt;/span>&lt;span style="color:#e6db74">:conformer.buzz&lt;/span>{&lt;span style="color:#e6db74">:fizzes&lt;/span> &lt;span style="color:#e6db74">:clojure.spec.alpha/invalid&lt;/span>,
&lt;span style="color:#e6db74">:buzzes&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>,
&lt;span style="color:#e6db74">:number&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>},
&lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#f92672">#&lt;/span>&lt;span style="color:#e6db74">:conformer.buzz&lt;/span>{&lt;span style="color:#e6db74">:fizzes&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>,
&lt;span style="color:#e6db74">:buzzes&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>,
&lt;span style="color:#e6db74">:number&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>},
&lt;span style="color:#e6db74">&amp;#34;lol&amp;#34;&lt;/span> &lt;span style="color:#f92672">#&lt;/span>&lt;span style="color:#e6db74">:conformer.buzz&lt;/span>{&lt;span style="color:#e6db74">:fizzes&lt;/span> &lt;span style="color:#e6db74">:clojure.spec.alpha/invalid&lt;/span>,
&lt;span style="color:#e6db74">:buzzes&lt;/span> &lt;span style="color:#e6db74">:clojure.spec.alpha/invalid&lt;/span>,
&lt;span style="color:#e6db74">:number&lt;/span> &lt;span style="color:#e6db74">:clojure.spec.alpha/invalid&lt;/span>}}) &lt;span style="color:#75715e">; =&amp;gt; true&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, like off-label use of anything, this &lt;code>conform&lt;/code>-as-parser trick too
skirts the &amp;ldquo;can be a very bad idea&amp;rdquo; territory.&lt;/p>
&lt;p>YMMV.&lt;/p>
&lt;h3 id="wicked-pprint-buzz">Wicked pprint Buzz&lt;/h3>
&lt;p>&lt;a href="https://twitter.com/rdivyanshu">@rdivyanshu&lt;/a> said to add this extra &lt;a href="https://github.com/clojure/clojure/blob/b1b88dd25373a86e41310a525a21b497799dbbf2/src/clj/clojure/pprint/dispatch.clj#L175">pprint dispatcher&lt;/a>,
&lt;em>&amp;ldquo;and let no number escape fizzbuzzness when showing itself&amp;rdquo;&lt;/em>.&lt;/p>
&lt;p>Why not?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>pprint.buzz)
(&lt;span style="color:#a6e22e">require&lt;/span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>[clojure.pprint &lt;span style="color:#e6db74">:as&lt;/span> pp])
(&lt;span style="color:#66d9ef">defn &lt;/span>pprint-buzz
[n]
(&lt;span style="color:#66d9ef">let &lt;/span>[divisible? (comp zero? rem)
prettyprint (comp prn
(partial format &lt;span style="color:#e6db74">&amp;#34;%d doth %s&amp;#34;&lt;/span>))]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">15&lt;/span>) (&lt;span style="color:#a6e22e">prettyprint&lt;/span> n &lt;span style="color:#e6db74">&amp;#34;FizzBuzzeth&amp;#34;&lt;/span>)
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">3&lt;/span>) (&lt;span style="color:#a6e22e">prettyprint&lt;/span> n &lt;span style="color:#e6db74">&amp;#34;Fizzeth&amp;#34;&lt;/span>)
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">5&lt;/span>) (&lt;span style="color:#a6e22e">prettyprint&lt;/span> n &lt;span style="color:#e6db74">&amp;#34;Buzzeth&amp;#34;&lt;/span>)
&lt;span style="color:#e6db74">:else&lt;/span> (&lt;span style="color:#a6e22e">prettyprint&lt;/span> n &lt;span style="color:#e6db74">&amp;#34;not Fizzeth nor Buzzeth. Alas!&amp;#34;&lt;/span>))))
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; lol&lt;/span>
(&lt;span style="color:#f92672">#&lt;/span>&lt;span style="color:#e6db74">&amp;#39;pp/use-method&lt;/span> pp/simple-dispatch java.lang.Number pprint-buzz)
&lt;span style="color:#75715e">;; nothing to see here... you will have to look at the REPL&lt;/span>
(doseq [n [&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>]]
(&lt;span style="color:#a6e22e">pp/pprint&lt;/span> n)) &lt;span style="color:#75715e">;; lol lol lol lolllll&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You, Sir, are truly a gentlenerd and a scholar.&lt;/p>
&lt;p>Nondestructive, and hilarious to boot!&lt;/p>
&lt;h3 id="tagged-literal-buzz">Tagged Literal Buzz&lt;/h3>
&lt;p>Thinking aloud&amp;hellip;&lt;/p>
&lt;p>Clojure has a concept of &amp;ldquo;tagged literals&amp;rdquo;; plaintext labels that we can
&amp;ldquo;attach&amp;rdquo; to data &lt;em>without&lt;/em> changing the literal value of our data, &lt;em>and&lt;/em>
transmit over wires along with the data.&lt;/p>
&lt;p>Clojure provides built-in support for a small set of some fairly universal
types of literals (instant, UUID etc.). And I have used fancier tagged
literals, but only in context of other people&amp;rsquo;s libraries (&lt;a href="https://github.com/juxt/aero">juxt/aero&lt;/a>).&lt;/p>
&lt;p>How to make this work, I wonder?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>tagged.buzz)
&lt;span style="color:#75715e">;; We can do this, but how to work with it?&lt;/span>
(&lt;span style="color:#a6e22e">set!&lt;/span> *default-data-reader-fn* tagged-literal)
(&lt;span style="color:#66d9ef">def &lt;/span>tagged-buzz
&lt;span style="color:#f92672">#&lt;/span>tagged.buzz/FizzBuzzSequence [&lt;span style="color:#f92672">#&lt;/span>tagged.buzz/Fizz &lt;span style="color:#ae81ff">3&lt;/span>
&lt;span style="color:#f92672">#&lt;/span>tagged.buzz/Buzz &lt;span style="color:#ae81ff">5&lt;/span>
&lt;span style="color:#f92672">#&lt;/span>tagged.buzz/FizzBuzz &lt;span style="color:#ae81ff">15&lt;/span>
&lt;span style="color:#f92672">#&lt;/span>tagged.buzz/Number &lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: Parked for now. I&amp;rsquo;m not sure if this a reasonably real-world FizzBuzz.&lt;/p>
&lt;h2 id="interlude-what-more-could-we-possibly-decomplect">Interlude: What more could we possibly decomplect?&lt;/h2>
&lt;p>Well, in one word, &lt;em>&lt;strong>Transducers&lt;/strong>&lt;/em>.&lt;/p>
&lt;p>Which you can assume is Clojurish for &amp;ldquo;You haven&amp;rsquo;t decomplected your Clojure
quite enough just yet.&amp;rdquo;. But before we go there, a quick survey.&lt;/p>
&lt;p>Thus far, we have pulled apart the FizzBuzz problem space in many dimensions.&lt;/p>
&lt;ul>
&lt;li>Calculation v/s Effects (lifted out &lt;code>println&lt;/code>)&lt;/li>
&lt;li>Calculation v/s Sequence generation (lifted fizzbuzz logic out of &lt;code>for&lt;/code>)&lt;/li>
&lt;li>Definition v/s Realisation (lazy definitions like &lt;code>all-fizz-buzzes&lt;/code>)&lt;/li>
&lt;li>Lifted out concepts in the domain of the &lt;em>solution&lt;/em> (&lt;code>fizzes?&lt;/code> &lt;code>buzzes?&lt;/code> etc.)&lt;/li>
&lt;li>Lifted out concepts in the domain of the &lt;em>problem&lt;/em> (modulo math FizzBuzzes)&lt;/li>
&lt;li>Lifted all fizzbuzzes out of the concrete 3/5 FizzBuzz (&lt;code>any-mod-cycle-buzz&lt;/code>)&lt;/li>
&lt;li>Added Fizzbuzz-meaning to Numbers &lt;em>without&lt;/em> changing existing Number-meaning
(protocols, and maybe also tagged literals if I can make it work sensibly)&lt;/li>
&lt;li>Concrete Numbers v/s abstract representations (PeanoBuzz, &lt;code>mod-cycle-buzz&lt;/code>)&lt;/li>
&lt;li>Calculation v/s Specification (&lt;code>spec-parse-buzz&lt;/code>)&lt;/li>
&lt;li>We even teased apart &lt;em>printing context&lt;/em> (wicked &lt;code>pprint-buzz&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>Note that &lt;em>&lt;strong>all of this belongs in the real-world Clojurian&amp;rsquo;s design toolbox&lt;/strong>.&lt;/em>&lt;/p>
&lt;p>Not only do we do it &amp;ldquo;in the small&amp;rdquo;, in our little namespaces and &lt;del>monoliths&lt;/del>
polyliths, we also do it &amp;ldquo;in the large&amp;rdquo; in our data-center-spanning distributed
systems.&lt;/p>
&lt;p>But you see, in all the teasing apart so far, we &lt;em>implied&lt;/em> FizzBuzz was
in-memory sequence processing. What if we &lt;em>could not make any assumption
whatsoever&lt;/em> about data source, or data size, or data format, or process
control, or the output sink? Can we still describe FizzBuzz in some useful way?&lt;/p>
&lt;p>Well, in one word, &lt;em>&lt;strong>Transducers&lt;/strong>&lt;/em>.&lt;/p>
&lt;p>Savvy Clojurians may appreciate that text above has &lt;a href="https://clojure.org/reference/transducers#%5Fterminology">transducer signature&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>(whatever, input -&amp;gt; whatever) -&amp;gt; (whatever, input -&amp;gt; whatever)&lt;/p>
&lt;p>&amp;ldquo;&lt;a href="https://www.youtube.com/watch?v=6mTbuzafcII&amp;amp;t=1677s">Seems like a good project for the bar, later on.&lt;/a>&amp;rdquo;&lt;/p>
&lt;ul>
&lt;li>Rich Hickey&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="transducery-buzz">Transducery Buzz&lt;/h2>
&lt;p>This is really my feeble attempt to nerdsnipe you into falling into deep
abstraction territory.&lt;/p>
&lt;p>I pray that you give yourself time to &lt;em>absorb&lt;/em> transducers. Peruse the code
below. Then peruse the list of stimulating material that follows, over a
relaxed weekend with several cups of delicious artisanal Oolong to salve
the brain pain.&lt;/p>
&lt;h3 id="what-are-we-decomplecting">What are we decomplecting?&lt;/h3>
&lt;p>Because, with &lt;em>&lt;strong>transducers&lt;/strong>&lt;/em>, we will now &lt;em>also&lt;/em> pull apart:&lt;/p>
&lt;ul>
&lt;li>Data source (sequence, stream, channel, socket etc.)&lt;/li>
&lt;li>Data sink (sequence, stream, channel, socket etc.)&lt;/li>
&lt;li>Data transformer (function of any value -&amp;gt; any other value)&lt;/li>
&lt;li>Data transformation process (mapping, filtering, reducing etc.)&lt;/li>
&lt;li>Some process control (we can transduce finite data (of course) as well as
streams, and also have optional early termination in either case. I&amp;rsquo;m not
sure about first-class support for other methods like backpressure.)&lt;/li>
&lt;/ul>
&lt;p>Of course, for useful computations, we have to compose these back in some
sensible way, appropriate to the context at hand (e.g. read numbers off a
Kafka topic, FizzBuzz them, and send them to another Kafka topic, OR slurp
numbers from file on disk, FizzBuzz them, and push into an in-memory queue).&lt;/p>
&lt;p>A word of caution. As you read, you may think &amp;ldquo;Ew, he peddles oldass Unix
Pipes.&amp;quot; &lt;sup id="fnref:20">&lt;a href="#fn:20" class="footnote-ref" role="doc-noteref">20&lt;/a>&lt;/sup> (or shiny new Monads or Lambda Architecture(TM) or some
familiar-to-you generics). You won&amp;rsquo;t be &lt;em>wrong&lt;/em>. You won&amp;rsquo;t be &lt;em>right&lt;/em> either.&lt;/p>
&lt;p>Because, as is true for all sufficiently abstract abstractions, analogies
are not equivalences. Details differ deeply and your brain will hurt at first.
A lot. For example, it is &lt;em>not&lt;/em> obvious &lt;em>why&lt;/em>, but the transducer&amp;rsquo;s mandate
of &lt;em>a la carte&lt;/em> re-composition &lt;em>demands&lt;/em> that &lt;em>all&lt;/em> the new pulling apart
&lt;em>must be fully compatible&lt;/em> with &lt;em>all&lt;/em> the old pulling apart.&lt;/p>
&lt;p>&amp;lsquo;nuff said. Decomplecting our Clojure &amp;lsquo;smore in 3&amp;hellip; 2&amp;hellip; 1&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>transducery.buzz)
(&lt;span style="color:#66d9ef">def &lt;/span>divisible?
(comp zero? rem))
(&lt;span style="color:#66d9ef">defn &lt;/span>basic-buzz
[n]
(&lt;span style="color:#a6e22e">cond&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">15&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;FizzBuzz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Fizz&amp;#34;&lt;/span>
(&lt;span style="color:#a6e22e">divisible?&lt;/span> n &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#e6db74">&amp;#34;Buzz&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">:else&lt;/span> n))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>zzzzz. snort. Old news. Whatever.&lt;/p>
&lt;h3 id="demo-one-computation-and-output-format-pulled-apart">Demo One: Computation and &lt;em>Output&lt;/em> format pulled apart&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>transducery.buzz)
&lt;span style="color:#75715e">;; Separately define /only/ the transformation &amp;#34;xform&amp;#34;&lt;/span>
(&lt;span style="color:#66d9ef">def &lt;/span>fizz-buzz-xform
(comp (map basic-buzz)
(take &lt;span style="color:#ae81ff">100&lt;/span>))) &lt;span style="color:#75715e">;; early termination&lt;/span>
&lt;span style="color:#75715e">;; Separately define /only/ input data&lt;/span>
(&lt;span style="color:#66d9ef">def &lt;/span>natural-nums
(rest (&lt;span style="color:#a6e22e">range&lt;/span>)))
&lt;span style="color:#75715e">;; Compose to produce a sequence&lt;/span>
(&lt;span style="color:#a6e22e">comment&lt;/span>
(&lt;span style="color:#a6e22e">transduce&lt;/span> fizz-buzz-xform &lt;span style="color:#75715e">;; calculate each step&lt;/span>
conj &lt;span style="color:#75715e">;; and use this output method&lt;/span>
[] &lt;span style="color:#75715e">;; to pour output into this data structure&lt;/span>
natural-nums) &lt;span style="color:#75715e">;; given this input&lt;/span>
)
&lt;span style="color:#75715e">;; Compose differently to produce a string&lt;/span>
(&lt;span style="color:#a6e22e">comment&lt;/span>
(&lt;span style="color:#a6e22e">transduce&lt;/span> fizz-buzz-xform &lt;span style="color:#75715e">;; calculate each step&lt;/span>
str &lt;span style="color:#75715e">;; and use this output method&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#75715e">;; to catenate output into this string&lt;/span>
natural-nums) &lt;span style="color:#75715e">;; given this input&lt;/span>
)
&lt;span style="color:#75715e">;; Compose still differently to produce a CSV string&lt;/span>
(&lt;span style="color:#66d9ef">defn &lt;/span>suffix-comma
[s]
(str s &lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span>))
(&lt;span style="color:#a6e22e">comment&lt;/span>
(&lt;span style="color:#a6e22e">transduce&lt;/span> (comp fizz-buzz-xform
(map suffix-comma)) &lt;span style="color:#75715e">;; calculate each step&lt;/span>
str &lt;span style="color:#75715e">;; and use this output method&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#75715e">;; to catenate output into this string&lt;/span>
natural-nums) &lt;span style="color:#75715e">;; given this input&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pause for a bit.&lt;/p>
&lt;ul>
&lt;li>Consider the parts we did &lt;em>not&lt;/em> have to modify &lt;em>at all&lt;/em> even though we
modified &lt;em>everything&lt;/em> about the output and about the xform.&lt;/li>
&lt;li>Consider what it might take to reuse any of the other fizzbuzzers instead
of &lt;code>basic-buzz&lt;/code>.&lt;/li>
&lt;li>Try it!&lt;/li>
&lt;/ul>
&lt;h3 id="demo-two-computation-and-input-format-pulled-apart-dot">Demo Two: Computation and &lt;em>Input&lt;/em> format pulled apart.&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>transducery.buzz)
&lt;span style="color:#75715e">;; Setup&lt;/span>
(&lt;span style="color:#66d9ef">def &lt;/span>numbers-file
&lt;span style="color:#e6db74">&amp;#34;Plaintext file containing numbers in some format.&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;/tmp/deleteme-spat-by-clj-fizz-buzz-demo.txt&amp;#34;&lt;/span>)
&lt;span style="color:#75715e">;; Write 10,000 natural numbers to file, one per line&lt;/span>
&lt;span style="color:#f92672">#&lt;/span>_(&lt;span style="color:#a6e22e">spit&lt;/span> numbers-file
(&lt;span style="color:#a6e22e">clojure.string/join&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span> (range &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">10001&lt;/span>)))
&lt;span style="color:#75715e">;; Read back to double-check we got it.&lt;/span>
&lt;span style="color:#f92672">#&lt;/span>_(slurp numbers-file)
&lt;span style="color:#75715e">;; For contrast: This is how we might fizz-buzz traditionally.&lt;/span>
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; Like this, if we don&amp;#39;t know our threading macros.&lt;/span>
&lt;span style="color:#75715e">;; (Don&amp;#39;t fret about it. This is just fine.)&lt;/span>
(&lt;span style="color:#66d9ef">let &lt;/span>[fizz-buzz (&lt;span style="color:#66d9ef">fn &lt;/span>[s] (&lt;span style="color:#a6e22e">basic-buzz&lt;/span> (&lt;span style="color:#a6e22e">Integer/parseInt&lt;/span> s)))]
(take &lt;span style="color:#ae81ff">15&lt;/span>
(map fizz-buzz
(&lt;span style="color:#a6e22e">clojure.string/split-lines&lt;/span> (slurp numbers-file)))))
&lt;span style="color:#75715e">;; Or more Clojurishly, with our nifty threading macros.&lt;/span>
(&lt;span style="color:#a6e22e">-&amp;gt;&amp;gt;&lt;/span> numbers-file
slurp
clojure.string/split-lines
(map &lt;span style="color:#f92672">#&lt;/span>(&lt;span style="color:#a6e22e">basic-buzz&lt;/span> (&lt;span style="color:#a6e22e">Integer/parseInt&lt;/span> %)))
(take &lt;span style="color:#ae81ff">15&lt;/span>))
&lt;span style="color:#75715e">;; I interrupted us with this, because of a pet peeve. People like to&lt;/span>
&lt;span style="color:#75715e">;; describe this form as a &amp;#34;pipeline&amp;#34;. It isn&amp;#39;t. It is a formatting&lt;/span>
&lt;span style="color:#75715e">;; sleight of hand that makes in-process call stacks of functions&lt;/span>
&lt;span style="color:#75715e">;; /appear/ to be straight-line. The resulting shape visually suggests&lt;/span>
&lt;span style="color:#75715e">;; punching data through a pipeline.&lt;/span>
&lt;span style="color:#75715e">;;&lt;/span>
&lt;span style="color:#75715e">;; Whereas pipelines are fundamentally streaming abstractions that&lt;/span>
&lt;span style="color:#75715e">;; cross process boundaries.&lt;/span>
&lt;span style="color:#75715e">;;&lt;/span>
&lt;span style="color:#75715e">;; Transducers + xforms are highly pipeline-like.&lt;/span>
)
&lt;span style="color:#75715e">;; Apart from not really being pipelines, both these traditional versions&lt;/span>
&lt;span style="color:#75715e">;; are also hopelessly complected with sequences, which malady is addressed&lt;/span>
&lt;span style="color:#75715e">;; by this transducer version.&lt;/span>
(&lt;span style="color:#a6e22e">comment&lt;/span>
(&lt;span style="color:#a6e22e">transduce&lt;/span> (comp (map &lt;span style="color:#f92672">#&lt;/span>(&lt;span style="color:#a6e22e">Integer/parseInt&lt;/span> %))
fizz-buzz-xform) &lt;span style="color:#75715e">;; calculate each step&lt;/span>
conj &lt;span style="color:#75715e">;; and use this output method&lt;/span>
[] &lt;span style="color:#75715e">;; to pour output into this data structure&lt;/span>
(&lt;span style="color:#a6e22e">clojure.string/split-lines&lt;/span>
(slurp numbers-file))) &lt;span style="color:#75715e">;; given this input&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A reader may complain that split-lines and file slurpin&amp;rsquo; is still complected.
The reader would be right. Tim Baldridge&amp;rsquo;s video series listed below will
help work out how one might go about transducing over numbers-file directly.&lt;/p>
&lt;h3 id="demo-three-use-only-the-xform-as-a-calculator">Demo Three: Use &lt;em>only&lt;/em> the xform as a calculator&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>transducery.buzz)
&lt;span style="color:#75715e">;; The xform can still calculate just a single item:&lt;/span>
((&lt;span style="color:#a6e22e">fizz-buzz-xform&lt;/span> conj) [] &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e">;; =&amp;gt; [&amp;#34;Fizz&amp;#34;]&lt;/span>
((&lt;span style="color:#a6e22e">fizz-buzz-xform&lt;/span> str) &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e">;; =&amp;gt; &amp;#34;Fizz&amp;#34;&lt;/span>
((&lt;span style="color:#a6e22e">fizz-buzz-xform&lt;/span> str) &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#75715e">;; =&amp;gt; &amp;#34;1&amp;#34;&lt;/span>
((&lt;span style="color:#a6e22e">fizz-buzz-xform&lt;/span> (&lt;span style="color:#66d9ef">fn &lt;/span>[_ out] out)) nil &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e">;; &amp;#34;Fizz&amp;#34;&lt;/span>
((&lt;span style="color:#a6e22e">fizz-buzz-xform&lt;/span> (&lt;span style="color:#66d9ef">fn &lt;/span>[_ out] out)) nil &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#75715e">;; 1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hopefully now it is a little more obvious &lt;em>why&lt;/em> the transducer&amp;rsquo;s mandate
of &lt;em>a la carte&lt;/em> re-composition &lt;em>demands&lt;/em> that &lt;em>all&lt;/em> the new pulling apart
&lt;em>must be fully compatible&lt;/em> with &lt;em>all&lt;/em> the old pulling apart.&lt;/p>
&lt;h3 id="further-reading">Further reading&lt;/h3>
&lt;p>Transducers are very deep conceptually, and literally. Since Clojure 1.7,
they have come to underpin all of Clojure&amp;rsquo;s heavy-lift capability.&lt;/p>
&lt;p>I recommend drilling down this way.&lt;/p>
&lt;p>&lt;em>&lt;strong>Thirty minute quickstart&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Skim-read the official words introducing &lt;a href="https://clojure.org/reference/transducers">Transducers&lt;/a>,
and describing &amp;ldquo;&lt;a href="https://clojure.org/guides/faq#transducers%5Fvs%5Fseqs">What are good use cases for transducers?&lt;/a>&amp;rdquo;.&lt;/li>
&lt;li>Watch &lt;a href="https://twitter.com/timbaldridge">Tim Baldridge&lt;/a> lift the essence of transducers out from
map/filter/reduce in 10 minutes: &lt;a href="https://www.youtube.com/watch?v=WkHdqg%5FDBBs">Transducers - Episode 1 - Introduction to Transducers&lt;/a>&lt;/li>
&lt;li>Compare with &lt;code>(clojure.repl/source map)&lt;/code> (and filter and reduce).&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Half day binge watch&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Watch Rich Hickey &lt;a href="https://www.youtube.com/watch?v=6mTbuzafcII">introduce Transducers&lt;/a>&lt;/li>
&lt;li>Follow Tim Baldridge through &lt;a href="https://tbaldridge.pivotshare.com/categories/transducers/2426/media">9 short video demos&lt;/a>,
where he &amp;ldquo;draws the rest of the Owl&amp;rdquo; so to speak, but actually, with all
the intermediate steps accounted for. IMHO, this is hands-down the best
exploration of transducers out there &lt;sup id="fnref:21">&lt;a href="#fn:21" class="footnote-ref" role="doc-noteref">21&lt;/a>&lt;/sup>.&lt;/li>
&lt;li>Watch Rich Hickey dive &lt;a href="https://www.youtube.com/watch?v=4KqUvG8HPYo">Inside Transducers&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Grok some real-world Transduction&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/bobby/kafka-streams-clojure">Kafkaesquely Streaming Transducery&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.grammarly.com/blog/engineering/building-etl-pipelines-with-clojure-and-transducers/">Grammar Transduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hyPiRion/haskell-transducers">Transducers Haskellized&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=1sC71eb9Ox0">Structure and Interpretation of Clojure Transducers&lt;/a>
re:Clojure 2021 workshop, by Ben Sless&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Exercise your brain&lt;/strong>&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Write a FizzBuzz in Shell that can compute with any source/sink combination;
in-line seq, mkfifo, files, sockets, URLs.&lt;/li>
&lt;li>Next, replace &lt;em>only&lt;/em> the Shell FizzBuzz function with the &lt;code>basic-buzz&lt;/code>
function we wrote (use babashka).&lt;/li>
&lt;li>Finally, write an all-Clojure version around the &lt;code>basic-buzz&lt;/code> function,
&lt;em>without&lt;/em> losing the the ability to transparently read/write from/to
seq, mkfifo, file, socket, URL.&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">man bash |
tr -cs A-Za-z &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span> |
tr A-Z a-z |
sort | uniq -c | sort -rn |
sed 10q
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://www.evalapply.org/posts/shell-aint-a-bad-place-to-fp-part-1-doug-mcilroys-pipeline/">;-)&lt;/a>&lt;/p>
&lt;h2 id="buzz">&lt;!-- raw HTML omitted -->TODO&lt;!-- raw HTML omitted --> Buzz&lt;/h2>
&lt;p>Ideas on deck, to put self on the hook&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> curried fizzbuzz (like Ring libraries),&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> dispatch-based fizzbuzz (with multimethods),&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> OOP fizzbuzz (with protocols),&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Nondestructive fizzbuzz (several!!!),&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> concurrent fizzbuzz (with agents, but the code in my head is
probably totally wrong),&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> parallel fizzbuzz, (just pmap, quite silly actually, but why not? It&amp;rsquo;s legit!)&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> transducing fizzbuzz, (should be able to transduce all the fizz-buzzes
up to Peano FizzBuzz)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> maaabe also re-do Rich&amp;rsquo;s ants sim with FizzBuzz ants (4 species of, ah,
ConcurrAnts &amp;mdash; IdentiAnt, FizzAnt, BuzzAnt, FizzBuzzAnt).&lt;/li>
&lt;/ul>
&lt;p>Outside of clojure.core, maaaaybe core.async fizzbuzz, but IDK, maybe that
will be too high concept, and too contrived.&lt;/p>
&lt;h2 id="acknowledgments">Acknowledgments&lt;/h2>
&lt;p>Thanks to &lt;a href="https://twitter.com/rdivyanshu">@rdivyanshu&lt;/a> for review and feedback and ideas.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Official and community-curated Clojure API docs &lt;a href="https://clojure.org/api/api">https://clojure.org/api/api&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Official guide: &lt;a href="https://clojure.org/guides/repl/introduction">Programming at the REPL&lt;/a>. The REPL is an &lt;em>eager&lt;/em> beast. Lazy sequences want to never be fully realised, if possible. But, a REPL is typically designed to fully evaluate everything it gets. This is why we didn&amp;rsquo;t feel the bite of mixing printing with lazy sequence generation. If we had this in our code somewhere, nothing would print, and any caller would get back just a useless collection of nils.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Laziness is a form of deferred computation. Clojure has &amp;ldquo;lazy sequences&amp;rdquo;. &lt;code>for&lt;/code> generates a lazy sequence. Several essay-length answers await your eager perusal. Rich Hickey&amp;rsquo;s notes from back in the day: &lt;a href="https://clojure.org/reference/lazy">Making Clojure Lazier&lt;/a>. Ramsharan G.J. muses &lt;em>&amp;quot;&lt;a href="https://www.youtube.com/watch?v=XCYTvZtTetI">Lazy Seqs - Why are they so lazy?&lt;/a>&amp;quot;&lt;/em> (&lt;a href="https://speakerdeck.com/sharangj/lazy-sequences-why-are-they-so-lazy">slides&lt;/a>). Oitihjya Sen muses &lt;a href="https://otee.dev/2022/01/17/lazy-clojure.html">Who Moved My Cheese: Laziness in Clojure&lt;/a>. Debashish Ghose has some thoughts on &lt;a href="https://debasishg.blogspot.com/2010/05/laziness-in-clojure-some-thoughts.html">Laziness in Clojure&lt;/a>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>Watch Rafal Dittwald refactor some Javascript in &lt;a href="https://www.youtube.com/watch?v=vK1DazRK%5Fa0">Solving Problems the Clojure Way&lt;/a>. Basically, we like to &lt;em>prevent&lt;/em> side effecting code as much as humanely possible. When we can&amp;rsquo;t, we do &lt;a href="https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell">Functional Core Imperative Shell&lt;/a>.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>The &lt;a href="https://mitpress.mit.edu/sites/default/files/sicp/index.html">full SICP textbook&lt;/a> is available free, online. The &lt;a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/">video lecture series&lt;/a> from 1986. Further DuckDuck searches will yield various tours of SICP in Clojure. Still further into the deep end, there is now &lt;a href="https://github.com/sicmutils">SICMUtils&lt;/a> in Clojure, built around the Structure and Interpretation of Classical Mechanics.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>To anyone writing Clojure tutorials, please for the love of lambda, &lt;em>&lt;strong>do not&lt;/strong>&lt;/em> use &lt;code>println&lt;/code> to &amp;ldquo;show&amp;rdquo; people results. You may think you are being kind by using a familiar way to &amp;ldquo;show&amp;rdquo; results, but it is far better to rip the bandage off right from the get go. Double down on teaching good REPL habits and quality FP thinking instead.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>Incidentally, the Classic implementation is also sensitive to the ordering of conditions, which is also a defect from a FP point of view, because there is no good reason to write an imperative control-flow-y interpretation of what could be a purely mathematical definition of FizzBuzz.&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>Well, maybe Rich can convince you otherwise: &lt;a href="https://www.infoq.com/presentations/Simple-Made-Easy/">Simple Made Easy&lt;/a>.&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9" role="doc-endnote">
&lt;p>I mean, don&amp;rsquo;t be actively malicious, of course. However, such a &lt;em>category&lt;/em> of error can happen. And if &amp;ldquo;they&amp;rdquo; git-blame-fire you, then I&amp;rsquo;d say celebrate. You inadvertently self-evicted from a place that will destroy your soul with bad systems and bad management.&amp;#160;&lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10" role="doc-endnote">
&lt;p>One fine day, one of our Clojure services at $FormerEmployer, started to run out of heap space after a fresh deployment. Our service graphs looked like this &lt;code>_/|_/|_/|_&lt;/code>. The sawtooth of heap death. It wasn&amp;rsquo;t super critical, and everybody was busy shipping features. So naturally we did some napkin math and rolled out a Jenkins job that triggered a rolling restart every six hours. Eventually, someone found the time to go debug the crashes. We had &lt;em>memoized&lt;/em> a function that returned an anonymous function (a lambda or &lt;em>thunk&lt;/em>), when we meant to memoize the return value from evaluating said lambda. Clojure creates a &lt;em>new&lt;/em> object every time we ask it to make a lambda. So &lt;a href="https://clojuredocs.org/clojure.core/memoize">memoize&lt;/a> saw new return values every time the original &amp;ldquo;thunkified&amp;rdquo; function was called, dutifully cached them all, and held onto them, thus preventing JVM garbage collector from cleaning them out. The story is relevant here because &lt;em>thunking&lt;/em> (making functions return partially evaluated fuctions) is a form of delayed or &amp;ldquo;lazy&amp;rdquo; evaluation. Also because nobody was fired. Everyone learned a good lesson and had a good laugh. In fact, we continued to use the rolling restart job in at least one other case where the memory leak was very slow, the service was very fault tolerant, and the service owner was really pressed for time with other always-higher priorities in that hyper-growth phase of the company. Slow leak tolerance is very much justified when used carefully. In fact, the friend who owned that service recently told me the periodic restart method worked so well, that they almost forgot about it for several years until they did a whole data center migration, at which point the service crashed for the first time in years, because someone forgot to also switch on the restart job. More good laughs were had and the documentation and automation were improved. You may now like to read &lt;a href="https://devblogs.microsoft.com/oldnewthing/20180228-00/?p=98125">&lt;em>&amp;ldquo;An amusing story about a practical use of the null garbage collector&amp;rdquo;&lt;/em>&lt;/a>.&amp;#160;&lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11" role="doc-endnote">
&lt;p>&amp;ldquo;&lt;a href="https://www.merriam-webster.com/dictionary/complect">Complect&lt;/a>&amp;quot;-ed, if you speak Clojurish. When a Thing is made of lots of Sub-Things that are braided together tightly, we say &amp;ldquo;This Thing is &lt;em>complected&lt;/em>.&amp;rdquo; in Clojurish. After we transform and reconstitute the Thing in terms of sub-things that are &lt;em>no longer&lt;/em> braided together, we smile inwardly and say &amp;ldquo;This Thing is now &lt;em>decomplected&lt;/em>&amp;rdquo;. Clojurish is basically a postmodern revival of the Latin roots of American English.&amp;#160;&lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:12" role="doc-endnote">
&lt;p>Eric Normand on &lt;em>&lt;a href="https://ericnormand.me/podcast/what-is-nil-punning">&amp;ldquo;What is Nil Punning?&amp;quot;&lt;/a>&lt;/em>.&amp;#160;&lt;a href="#fnref:12" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:13" role="doc-endnote">
&lt;p>For reference, &lt;a href="https://github.com/adityaathalye/sicp/blob/master/ex2-06-church-numerals.scm">my attempt&lt;/a> at implementing &lt;a href="https://en.wikipedia.org/wiki/Church%5Fencoding">Church Numerals&lt;/a> in SICP.&amp;#160;&lt;a href="#fnref:13" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:14" role="doc-endnote">
&lt;p>See the footnote for &amp;ldquo;Complect&amp;rdquo;.&amp;#160;&lt;a href="#fnref:14" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:15" role="doc-endnote">
&lt;p>Arne Brasseur on &lt;a href="https://www.lambdaisland.com/blog/2022-03-10-mechanism-vs-policy">Improve your code by separating mechanism from policy&lt;/a>. Don&amp;rsquo;t you just love it when Lots Of Thoughts are rattling around in your brain, and someone drops a sweet one-liner that instantly crystallises it all for you? Thanks &lt;a href="https://twitter.com/robstuttaford">@RobStuttaford&lt;/a> for bringing this back into my consciousness!&amp;#160;&lt;a href="#fnref:15" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:16" role="doc-endnote">
&lt;p>I see you and that &lt;code>AbstractFactoryFactory&lt;/code> joke forming in your brain.&amp;#160;&lt;a href="#fnref:16" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:17" role="doc-endnote">
&lt;p>See &lt;a href="https://clojure.org/reference/multimethods">Multimethods and Hierarchies&lt;/a> page at the official site, and the &lt;a href="https://clojuredocs.org/quickref#multifunctions">Multifunctions&lt;/a> section at ClojureDocs for examples. This stuff may break your brain for a bit, if you are very accustomed to Class-y OO programming. That&amp;rsquo;s absolutely fine. It &lt;em>is&lt;/em> fairly mind bending and takes some getting used to. Stay with it, play with concepts against the REPL. Translate or reduce as many patterns as you can to this kind of open-ended multiple dispatch.&amp;#160;&lt;a href="#fnref:17" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:18" role="doc-endnote">
&lt;p>You can watch me flail about live-demoing a UI test automation DSL I designed using Clojure. &lt;a href="https://www.youtube.com/watch?v=hwoLON80ZzA&amp;amp;t=170s">Video&lt;/a>, &lt;a href="https://github.com/adityaathalye/slideware/blob/master/designing%5Fobject%5Ffunctional%5Fsystem%5FIN-Clojure%5F2016.pdf">Slides&lt;/a>.&amp;#160;&lt;a href="#fnref:18" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:19" role="doc-endnote">
&lt;p>Aside: This is actually double-boxing, because in Java, numbers are already boxed by design. So this approach may carry some performance penalty depending on your context. For example, see this DZone &amp;gt; Java Zone article: &lt;a href="https://dzone.com/articles/whats-wrong-with-java-boxed-numbers">What&amp;rsquo;s Wrong With Java Boxed Numbers?&lt;/a>&amp;#160;&lt;a href="#fnref:19" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:20" role="doc-endnote">
&lt;p>Yes I do: &lt;a href="https://www.evalapply.org/posts/shell-aint-a-bad-place-to-fp-part-1-doug-mcilroys-pipeline/">Shell ain&amp;rsquo;t a bad place to FP&lt;/a> :)&amp;#160;&lt;a href="#fnref:20" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:21" role="doc-endnote">
&lt;p>Later, get all of &lt;a href="https://tbaldridge.pivotshare.com/">Clojure Tutorials - With Tim Baldridge&lt;/a>. It is a joy to watch a master craftsman at work!&amp;#160;&lt;a href="#fnref:21" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content></item><item><title>Shell ain't a bad place to FP: part 1/N: McIlroy's Pipeline</title><link>/posts/shell-aint-a-bad-place-to-fp-part-1-doug-mcilroys-pipeline/</link><pubDate>Fri, 11 Mar 2022 00:08:52 +0530</pubDate><guid>/posts/shell-aint-a-bad-place-to-fp-part-1-doug-mcilroys-pipeline/</guid><description>&lt;p>Or, &lt;em>&lt;strong>the one in which we &amp;ldquo;take apart&amp;rdquo; Douglas McIlroy&amp;rsquo;s pipeline from 1986.&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Doing so teaches an object lesson about the essence of modular, composable,
functional architecture. And things start to really heat up when it dawns on
us, how a good set of standard parts can be used to express totally different
ideas &lt;em>just by composing them in different ways&lt;/em>.&lt;/p>
&lt;p>(Edit 2022-03-10: speaking of lessons, how about the one in the appendix?!)&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Designing is &lt;em>fundamentally&lt;/em> about taking things apart. It&amp;rsquo;s about taking
things apart &lt;em>in such a way&lt;/em> that they can be put back together. i.e.
Separating into things that can be composed.&amp;rdquo;&lt;/p>
&lt;ul>
&lt;li>Rich Hickey, &amp;ldquo;&lt;a href="https://www.youtube.com/watch?v=QCwqnjxqfmY">Design, Composition, and Performance&lt;/a>&amp;rdquo;, 2013&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">tr -cs A-Za-z &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span> | tr A-Z a-z | sort | uniq -c | sort -rn | sed 10q
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Douglas McIlroy, &lt;a href="https://dl.acm.org/doi/10.1145/5948.315654">Communications of the ACM&lt;/a>, 1986&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#the-pipeline-that-douglas-built">The Pipeline that Douglas Built&lt;/a>&lt;/li>
&lt;li>&lt;a href="#take-apart-semantics-idioms-functions">Take Apart! Semantics/Idioms -&amp;gt; Functions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#play-semantics-functions-ooh-what-if-i-dot-dot-dot">Play! Semantics -&amp;gt; Functions -&amp;gt; &amp;ldquo;Ooh, what if I&amp;hellip;&amp;quot;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#compose-again-semantics-functions-play-grand-new-pipeline">Compose Again! Semantics -&amp;gt; Functions -&amp;gt; Play -&amp;gt; Grand New Pipeline&lt;/a>&lt;/li>
&lt;li>&lt;a href="#addendum-remarkable-aspects-of-doug-s-o-dot-g-dot-pipeline">Addendum: Remarkable aspects of Doug&amp;rsquo;s O.G. pipeline&lt;/a>&lt;/li>
&lt;li>&lt;a href="#appendix-an-unexpected-masterclass">Appendix: an unexpected masterclass!&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#the-danger-lurking-in-the-pipes">The danger lurking in the pipes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#backstory">Backstory&lt;/a>&lt;/li>
&lt;li>&lt;a href="#postscript">Postscript&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>Previously: &lt;a href="https://evalapply.org/posts/shell-aint-a-bad-place-to-fp-part-0-intro/">Shell ain&amp;rsquo;t a bad place to FP: part 0/N&lt;/a>&lt;/p></description><content>&lt;p>Or, &lt;em>&lt;strong>the one in which we &amp;ldquo;take apart&amp;rdquo; Douglas McIlroy&amp;rsquo;s pipeline from 1986.&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Doing so teaches an object lesson about the essence of modular, composable,
functional architecture. And things start to really heat up when it dawns on
us, how a good set of standard parts can be used to express totally different
ideas &lt;em>just by composing them in different ways&lt;/em>.&lt;/p>
&lt;p>(Edit 2022-03-10: speaking of lessons, how about the one in the appendix?!)&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Designing is &lt;em>fundamentally&lt;/em> about taking things apart. It&amp;rsquo;s about taking
things apart &lt;em>in such a way&lt;/em> that they can be put back together. i.e.
Separating into things that can be composed.&amp;rdquo;&lt;/p>
&lt;ul>
&lt;li>Rich Hickey, &amp;ldquo;&lt;a href="https://www.youtube.com/watch?v=QCwqnjxqfmY">Design, Composition, and Performance&lt;/a>&amp;rdquo;, 2013&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">tr -cs A-Za-z &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span> | tr A-Z a-z | sort | uniq -c | sort -rn | sed 10q
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Douglas McIlroy, &lt;a href="https://dl.acm.org/doi/10.1145/5948.315654">Communications of the ACM&lt;/a>, 1986&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#the-pipeline-that-douglas-built">The Pipeline that Douglas Built&lt;/a>&lt;/li>
&lt;li>&lt;a href="#take-apart-semantics-idioms-functions">Take Apart! Semantics/Idioms -&amp;gt; Functions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#play-semantics-functions-ooh-what-if-i-dot-dot-dot">Play! Semantics -&amp;gt; Functions -&amp;gt; &amp;ldquo;Ooh, what if I&amp;hellip;&amp;quot;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#compose-again-semantics-functions-play-grand-new-pipeline">Compose Again! Semantics -&amp;gt; Functions -&amp;gt; Play -&amp;gt; Grand New Pipeline&lt;/a>&lt;/li>
&lt;li>&lt;a href="#addendum-remarkable-aspects-of-doug-s-o-dot-g-dot-pipeline">Addendum: Remarkable aspects of Doug&amp;rsquo;s O.G. pipeline&lt;/a>&lt;/li>
&lt;li>&lt;a href="#appendix-an-unexpected-masterclass">Appendix: an unexpected masterclass!&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#the-danger-lurking-in-the-pipes">The danger lurking in the pipes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#backstory">Backstory&lt;/a>&lt;/li>
&lt;li>&lt;a href="#postscript">Postscript&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>Previously: &lt;a href="https://evalapply.org/posts/shell-aint-a-bad-place-to-fp-part-0-intro/">Shell ain&amp;rsquo;t a bad place to FP: part 0/N&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="the-pipeline-that-douglas-built">The Pipeline that Douglas Built&lt;/h2>
&lt;p>Douglas McIlroy famously (infamously?) wrote the following in reply to a
problem posed by Jon Bentley for his column &lt;em>&amp;ldquo;Programming pearls: a literate
program&amp;rdquo;&lt;/em> (&lt;em>Communications of the ACM&lt;/em> magazine, June 1986, Vol. 29, No. 6).&lt;/p>
&lt;p>I first heard of it some years ago in &lt;a href="https://leancrew.com/all-this/2011/12/more-shell-less-egg/">More Shell Less Egg&lt;/a>, and saw it again
in the book &lt;a href="https://www.oreilly.com/library/view/classic-shell-scripting/0596005954/">Classic Shell Scripting&lt;/a> (which taught me much of my shell-fu).
The original was not online then. Now I see the ACM has kindly &lt;a href="https://dl.acm.org/doi/10.1145/5948.315654">published it&lt;/a>
along with the rest of their archives!&lt;/p>
&lt;p>Here it is, lightly paraphrased:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#75715e"># Problem statement (word frequency):&lt;/span>
&lt;span style="color:#75715e">#&lt;/span>
&lt;span style="color:#75715e"># - Read a file of text&lt;/span>
&lt;span style="color:#75715e"># - Determine the n most frequently-used words&lt;/span>
&lt;span style="color:#75715e"># - Print out a sorted list of all the words, along with their frequencies&lt;/span>
&lt;span style="color:#75715e"># Douglas McIlroy&amp;#39;s answer&lt;/span>
&lt;span style="color:#75715e"># 1. Transliterate complement (-c) of words into newlines,&lt;/span>
&lt;span style="color:#75715e"># squeezing out (-s) duplicates&lt;/span>
tr -cs A-Za-z &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span> |
&lt;span style="color:#75715e"># 2. Transliterate uppercase to lowercase&lt;/span>
tr A-Z a-z |
&lt;span style="color:#75715e"># 3. Sort to bring identical words together&lt;/span>
sort |
&lt;span style="color:#75715e"># 4. Replace each run of duplicate words with&lt;/span>
&lt;span style="color:#75715e"># a single representative, and include a count&lt;/span>
uniq -c |
&lt;span style="color:#75715e"># 5. Sort reverse (-r), numeric (-n)&lt;/span>
sort -rn |
&lt;span style="color:#75715e"># 6. Pass through stream editor; quit after printing the&lt;/span>
&lt;span style="color:#75715e"># the first 10 lines received&lt;/span>
sed 10q
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here I am, punching the Bash manual page through it&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">man bash |
tr -cs A-Za-z &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span> | tr A-Z a-z |
sort | uniq -c | sort -rn |
sed 10q
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip; and here are the top 10 words by frequency.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">4200 the
1822 is
1251 to
1221 a
1147 of
869 if
805 and
570 shell
570 in
563 command
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;ldquo;&lt;em>Coolcoolcoolcool nodoubt nodoubt&amp;hellip; So, uh&amp;hellip; that&amp;rsquo;s it?&lt;/em>&amp;rdquo;&lt;/p>
&lt;h2 id="take-apart-semantics-idioms-functions">Take Apart! Semantics/Idioms -&amp;gt; Functions&lt;/h2>
&lt;p>It&amp;rsquo;s worth observing that the &lt;em>same&lt;/em> tools composed in &lt;em>different&lt;/em> ways express
&lt;em>totally different&lt;/em> concepts. &lt;code>sort&lt;/code> just sorts. &lt;code>uniq&lt;/code> just returns uniques.
&lt;em>But&lt;/em> &lt;code>sort | uniq&lt;/code> is an idiom for &lt;em>set of things&lt;/em>. Whereas &lt;code>sort | uniq -c | sort -rn&lt;/code> is an idiom for &lt;em>frequency distribution&lt;/em>.&lt;/p>
&lt;p>Now&amp;hellip;&lt;/p>
&lt;p>What if we use Bash functions to name the idioms we see in McIlroy&amp;rsquo;s pipeline?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">flatten_paragraphs&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e"># English-only for easy explanation, but can be more general&lt;/span>
tr -cs A-Za-z &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
tokenise_lowercase&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e"># Transliterate uppercase to lowercase&lt;/span>
tr A-Z a-z
&lt;span style="color:#f92672">}&lt;/span>
frequencies&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e"># Produce frequency distribution of input&lt;/span>
sort | uniq -c | sort -rn
&lt;span style="color:#f92672">}&lt;/span>
take_n&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e"># Given a number n, return those many lines of input&lt;/span>
&lt;span style="color:#75715e"># or 10 lines by default, if n is not specified.&lt;/span>
sed &lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#66d9ef">:-&lt;/span>10&lt;span style="color:#e6db74">}&lt;/span>q
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And what if we update the pipeline with &lt;em>function calls&lt;/em> like this?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">man bash |
flatten_paragraphs |
tokenise_lowercase |
frequencies |
take_n &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yes, we get the same result!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">4200 the
1822 is
1251 to
1221 a
1147 of
869 if
805 and
570 shell
570 in
563 command
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yes, yes, &lt;em>&lt;strong>YES&lt;/strong>&lt;/em>! Functions + pipes = mind blown!&lt;/p>
&lt;h2 id="play-semantics-functions-ooh-what-if-i-dot-dot-dot">Play! Semantics -&amp;gt; Functions -&amp;gt; &amp;ldquo;Ooh, what if I&amp;hellip;&amp;rdquo;&lt;/h2>
&lt;p>Now that we lifted out a couple of text processing functions, we can try to
make &lt;em>more&lt;/em> text processing functions. Here are some examples.&lt;/p>
&lt;p>(Edit 2022-03-10: the &amp;ldquo;clever&amp;rdquo; mkfifo-ery contains dangers I did not know of.
More at the bottom, in the appendix.)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sort_dictionary&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
sort -b -d -k2
&lt;span style="color:#f92672">}&lt;/span>
sort_rhyme&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
rev | sort -b -d | rev
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e"># eliminate stop-words&lt;/span>
drop_stopwords&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local stopwords&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#66d9ef">:-&lt;/span>&lt;span style="color:#e6db74">&amp;#34;the,is,to,a,of,if,and,in,or,be,by,not,with,for,when,it&amp;#34;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>
local grep_pattern&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>tr , &lt;span style="color:#e6db74">&amp;#39;\|&amp;#39;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>stopwords&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
grep -v -E &lt;span style="color:#e6db74">${&lt;/span>grep_pattern&lt;span style="color:#e6db74">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e"># n-grams&lt;/span>
butlast_n&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e"># utility for picking appropriate collection of n-grams&lt;/span>
head -n -&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#66d9ef">:-&lt;/span>0&lt;span style="color:#e6db74">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
bigram&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e"># we need intermediate state, but we can make it stream,&lt;/span>
&lt;span style="color:#75715e"># instead of accumulating in temp files&lt;/span>
mkfifo bigram_buffer
tee &amp;gt;&lt;span style="color:#f92672">(&lt;/span>tail +2 &amp;gt; bigram_buffer&lt;span style="color:#f92672">)&lt;/span> |
paste - bigram_buffer |
&lt;span style="color:#75715e"># take all but the last entry as it is not a bigram&lt;/span>
butlast_n &lt;span style="color:#ae81ff">1&lt;/span>
rm bigram_buffer
&lt;span style="color:#f92672">}&lt;/span>
trigram&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e"># we need intermediate state, but we can make it stream,&lt;/span>
&lt;span style="color:#75715e"># instead of accumulating in temp files&lt;/span>
mkfifo trigram_buffer_one trigram_buffer_two
tee &amp;gt;&lt;span style="color:#f92672">(&lt;/span>tail +2 &amp;gt; trigram_buffer_one&lt;span style="color:#f92672">)&lt;/span> |
tee &amp;gt;&lt;span style="color:#f92672">(&lt;/span>tail +3 &amp;gt; trigram_buffer_two&lt;span style="color:#f92672">)&lt;/span> |
paste - trigram_buffer_one trigram_buffer_two |
&lt;span style="color:#75715e"># take all but the last 2 entries as they are not trigrams&lt;/span>
butlast_n &lt;span style="color:#ae81ff">2&lt;/span>
rm trigram_buffer_one trigram_buffer_two
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Clearly there is a lot to explore about functions and pipelines and other
techniques in this code. We will do deep dives in upcoming posts. For now
just know that Bash functions&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>name a group of shell statements,&lt;/li>
&lt;li>can be composed with pipes&lt;/li>
&lt;li>thus intermix with regular shell tools, and&lt;/li>
&lt;li>can help create domain-specific abstractions out of domain-agnostic ones.&lt;/li>
&lt;/ul>
&lt;p>But before we go there, indulge me and my &lt;em>Oh, and One More Thing (TM)&lt;/em> &amp;hellip;&lt;/p>
&lt;h2 id="compose-again-semantics-functions-play-grand-new-pipeline">Compose Again! Semantics -&amp;gt; Functions -&amp;gt; Play -&amp;gt; Grand New Pipeline&lt;/h2>
&lt;p>What&amp;rsquo;s the point of making a text processing library of functions if we don&amp;rsquo;t
process any text?&lt;/p>
&lt;p>Well&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>Start a new shell session.&lt;/li>
&lt;li>Copy-paste all the Bash functions above into it.&lt;/li>
&lt;li>Then copy-paste this pipeline and&lt;/li>
&lt;li>Hit Enter!&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#75715e"># I assume you have Bash version 4+.&lt;/span>
man bash |
&lt;span style="color:#75715e"># pre-process&lt;/span>
flatten_paragraphs |
tokenise_lowercase |
drop_stopwords |
&lt;span style="color:#75715e"># cache raw pre-processed data, if we need to re-analyse later&lt;/span>
tee /tmp/bash_manpage_raw_tokens.txt |
&lt;span style="color:#75715e"># cache various views or compressions of the raw data&lt;/span>
tee &amp;gt;&lt;span style="color:#f92672">(&lt;/span>sort_dictionary | uniq &amp;gt; /tmp/bash_manpage_sorted_as_dictionary.txt&lt;span style="color:#f92672">)&lt;/span> |
tee &amp;gt;&lt;span style="color:#f92672">(&lt;/span>sort_rhyme | uniq &amp;gt; /tmp/bash_manpage_sorted_as_rhyme.txt&lt;span style="color:#f92672">)&lt;/span> |
&lt;span style="color:#75715e"># accumulate various analyses of the OG raw data&lt;/span>
tee &amp;gt;&lt;span style="color:#f92672">(&lt;/span>frequencies &amp;gt; /tmp/bash_manpage_token_freqs.txt&lt;span style="color:#f92672">)&lt;/span> |
tee &amp;gt;&lt;span style="color:#f92672">(&lt;/span>bigram | frequencies &amp;gt; /tmp/bash_manpage_bigram_freqs.txt&lt;span style="color:#f92672">)&lt;/span> |
tee &amp;gt;&lt;span style="color:#f92672">(&lt;/span>trigram | frequencies &amp;gt; /tmp/bash_manpage_trigram_freqs.txt&lt;span style="color:#f92672">)&lt;/span> |
take_n
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And why not experiment?!&lt;/p>
&lt;p>Reorder it! Remove parts of it! Change parts of it! Give it 10 GiB of input!&lt;/p>
&lt;p>Play and learn!!!&lt;/p>
&lt;p>(#protip: The shell can auto-complete functions. Type &lt;em>flat&lt;/em> and hit &lt;em>TAB&lt;/em>,
and you should get a completion for &lt;em>flatten_paragraphs&lt;/em>.)&lt;/p>
&lt;h2 id="addendum-remarkable-aspects-of-doug-s-o-dot-g-dot-pipeline">Addendum: Remarkable aspects of Doug&amp;rsquo;s O.G. pipeline&lt;/h2>
&lt;p>The UNIX tools philosophy is clearly at work. &lt;code>sort&lt;/code> just sorts, &lt;code>uniq&lt;/code> just
returns uniques, pipes connect parts. Ho hum.&lt;/p>
&lt;p>The things I &lt;em>do&lt;/em> find remarkable are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Now the year is 2022, i.e. McIlroy wrote the program about 4 &lt;em>decades&lt;/em> ago.
It continues to edify, meaning the ideas it contains have a timeless quality.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>It also works as-is&lt;/em>, on my cheap Thinkpad running a GNU Linux (Ubuntu),
even though the original code was written for a UNIX that might live only
in a museum today (or maybe in your bank). Odds look good that come 2036, it
will continue to still work as-is on mainstream boxen.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It is plain text, and so eminently portable. (I slapped it into the org-mode
file of this blog post, evaluated it via org-babel, and captured the results
inline. How? Because Emacs org-babel can simply &amp;ldquo;shell out&amp;rdquo;; i.e. make a
standard request to a standard shell to evaluate the program and have the
shell process return any result in a standard way.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I bet it runs &lt;em>way&lt;/em> faster now because my box is a supercomputer v/s the
UNIX boxen of that era.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pipes remove the burden of explicit state handling. Oh, also, Douglas McIlroy
invented UNIX pipes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The entire composition is itself a function.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>map&lt;/code> (tokenise), &lt;code>filter&lt;/code> (uniquify), &lt;code>reduce&lt;/code> (frequency distribution),
and early termination (&lt;code>take&lt;/code> first 10) are &lt;em>automatic&lt;/em>, needing no special
machinery.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It is an abstract computation that is independent of data source/sink. We
can hook into any I/O combination of sockets, or fifo pipes, or files on
disk without modifying the pipeline code&amp;mdash;much like Clojure transducers
or monadic I/O in Haskell land.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Most importantly&lt;/em>, a rank amateur like me could figure out each part &lt;em>and&lt;/em>
the whole in one sitting. It is eminently doable because:&lt;/p>
&lt;ul>
&lt;li>each sub part is understandable in isolation &lt;em>and&lt;/em>&lt;/li>
&lt;li>the whole is amenable to incremental as well as large-scale adaptation,&lt;/li>
&lt;li>in playful, interactive, low-risk ways.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>I was clueless then and had to dig through manpages and flail about at the
command line. It took me a while to grok the function of each tool and how
it is applied to the text processing problem.&lt;/p>
&lt;p>If you haven&amp;rsquo;t already, I&amp;rsquo;d say bear that small cost, because it teaches a
priceless lesson in modular, composable, functional architecture.&lt;/p>
&lt;p>Plus, why not step up one&amp;rsquo;s shell-fu?&lt;/p>
&lt;h2 id="appendix-an-unexpected-masterclass">Appendix: an unexpected masterclass!&lt;/h2>
&lt;p>My head is exploding. Prof. McIlroy emailed me some remarks. (There is a
backstory, but first the important stuff.)&lt;/p>
&lt;h3 id="the-danger-lurking-in-the-pipes">The danger lurking in the pipes&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">(Emails redacted to stymie spambots.)
----- Original message -----
From: Douglas McIlroy &amp;lt;Email at his web page. Link posted below.&amp;gt;
To: Aditya Athalye &amp;lt;Email at this web page. See footer.&amp;gt;
Subject: Musings on your blog
Date: Wednesday, March 09, 2022 8:16 PM
Aditya,
A reader might complain that the bigram example in your blog
can be done more efficiently, with a similar amount of typing,
by a sed script instead of mkfifo, tee, and paste:
sed -n &amp;#39;1bx; H; g; s/\n/ /p; s/.* //; :x; h&amp;#39;
A slightly different example is immune to this charge:
trap &amp;#34;rm -f fifo&amp;#34; 0 HUP TERM PIPE INT
mkfifo fifo
sort |
uniq |
tee &amp;gt;(rev | sort &amp;gt;fifo) |
join -o 1.1 - fifo &amp;gt;palindromes
But ... join can&amp;#39;t move until rev|sort produces output, so
essentially the whole word list piles up in its input pipe.
If there&amp;#39;s not enough buffer space, deadlock will occur.
The moral of this tale is that loops in the (undirected)
graph of a pipe network pose a hazard of deadlock if some
pipe queue necessarily suffers unbounded growth. This
hazard manifests in the palindrome example but not in
the bigram example.
Sidelight. Buffering by C&amp;#39;s stdio package can cause
deadlock in a feedback loop. A process that buffers its
output will starve if it needs feedback from stuff that&amp;#39;s
waiting in its output buffer. stdio&amp;#39;s buffering is evil!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Prof. McIlroy also pointed me to his notes on coroutine-based programs
(examples of stream processing in Unix).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">In case you haven&amp;#39;t already seen it,
https://www.cs.dartmouth.edu/~doug/sieve/sieve.pdf
exhibits some unusual plumbing.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The PDF is available at &lt;a href="https://www.cs.dartmouth.edu/~doug/">his Dartmouth College home page&lt;/a>,
which has other fun stuff too.&lt;/p>
&lt;h3 id="backstory">Backstory&lt;/h3>
&lt;p>I habitually cold-email people if something they did or said moved me in some
constructive way. So, I wrote a little thank you note to Prof. McIlroy after
posting this blog entry (nobody thinks straight at 3 AM).&lt;/p>
&lt;p>He replied! We exchanged a couple of emails. &lt;em>&amp;ldquo;That was &lt;strong>so cool&lt;/strong>!&amp;quot;&lt;/em> thought I,
and went back to life as usual.&lt;/p>
&lt;p>Yesterday he emailed these follow-up remarks! A nice little masterclass in
Unix programming that I&amp;rsquo;m so pleased to share here, with Prof. McIlroy&amp;rsquo;s
gracious permission.&lt;/p>
&lt;h3 id="postscript">Postscript&lt;/h3>
&lt;p>Wow, this is one of the best emails I&amp;rsquo;ve ever received! The reader&amp;rsquo;s
complaints are warranted and deserved.&lt;/p>
&lt;p>I was fooling around with mkfifo and accidentally discovered it &amp;ldquo;worked&amp;rdquo;
after a fashion. &amp;ldquo;What&amp;rsquo;s the buffering story?&amp;rdquo; crossed my mind, but I didn&amp;rsquo;t
find out. I&amp;rsquo;m also slapping my forehead for not using &lt;code>trap&lt;/code> to auto-clean
the pipes. And needless to say, &lt;a href="https://github.com/adityaathalye/shite/blob/5f87aa0df095a1b5af914117aaa34bf63c67ec4d/shite%5Futils.sh#L155">my sed-fu&lt;/a> is weak. Brown belt at best :)&lt;/p>
&lt;p>I rue the fact that I haven&amp;rsquo;t paid due attention to The Machine. I can write
Clojure to make a living, but can&amp;rsquo;t write C to save my life :))&lt;/p>
&lt;p>So now this excellent complaint leaves me no choice, but to crack open my
long-unused copies of the K&amp;amp;R book and The Unix Programming Environment.&lt;/p>
&lt;p>&lt;em>Thank you so much for taking the time to teach me, Professor!&lt;/em>&lt;/p>
&lt;hr>
&lt;p>Next up: Part 2/N: Deep-dive into bash functions and function design techniques&lt;/p>
&lt;ul>
&lt;li>Using functions to craft one’s own Bytes-sized UNIX tools&lt;/li>
&lt;li>Using them interactively like regular UNIX tools&lt;/li>
&lt;li>maybe more&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>The ol' noodle is noodlin' over it. Stay tooned!&lt;/p></content></item><item><title>shite: static sites from shell: part 1/2</title><link>/posts/shite-the-static-sites-from-shell-part-1/</link><pubDate>Tue, 08 Mar 2022 01:29:08 +0530</pubDate><guid>/posts/shite-the-static-sites-from-shell-part-1/</guid><description>&lt;p>This primer is for people like me, who long dreamed of lovingly hand-crafting
our own home on the Internet. We would make it ultramodern yet ultralight,
simple yet beautiful. Something &lt;em>not&lt;/em> WordPress because that&amp;rsquo;s so last century.
(Seriously, just go to WordPress.)&lt;/p>
&lt;p>No. We were committed. We would do it for the sake of craftsmanship and the
environment and World Peace. And that&amp;rsquo;s how we found ourselves awake at 2 A.M.,
having absurd conversations &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> with Distant Internet Strangers&amp;hellip;&lt;/p></description><content>&lt;p>This primer is for people like me, who long dreamed of lovingly hand-crafting
our own home on the Internet. We would make it ultramodern yet ultralight,
simple yet beautiful. Something &lt;em>not&lt;/em> WordPress because that&amp;rsquo;s so last century.
(Seriously, just go to WordPress.)&lt;/p>
&lt;p>No. We were committed. We would do it for the sake of craftsmanship and the
environment and World Peace. And that&amp;rsquo;s how we found ourselves awake at 2 A.M.,
having absurd conversations &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> with Distant Internet Strangers&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>You (loudly): &lt;em>&amp;ldquo;BOOTSTRAP? Yes, I want to bootstrap my website.&amp;quot;&lt;/em>&lt;/p>
&lt;p>D.I.S. (miming): &lt;em>&amp;ldquo;No, no. You. &lt;strong>Need.&lt;/strong> Bootstrap.&amp;quot;&lt;/em>&lt;/p>
&lt;p>You: &amp;ldquo;&lt;em>I whaaat?&lt;/em>&amp;rdquo;&lt;/p>
&lt;p>D.I.S.: &lt;em>&amp;rdquo;&amp;hellip; aaannd NODE JAY ESS too&amp;hellip;&amp;quot;&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>You can&amp;rsquo;t fathom &lt;em>why&lt;/em> there are a jillion &amp;ldquo;CMSes&amp;rdquo;, fifty &amp;ldquo;build tools&amp;rdquo;, and
nine dozen &amp;ldquo;static site generators&amp;rdquo;, each with their own bespoke &amp;ldquo;templating
system&amp;rdquo;.&lt;/p>
&lt;p>You are &lt;em>this close&lt;/em> to DM-ing the first person who green-dots in your
current Slack; &amp;ldquo;&lt;em>Please, can you help me?&lt;/em> I didn&amp;rsquo;t know. I&amp;rsquo;m so sorry. For
&lt;em>everything&lt;/em>. I just wanted a website&amp;hellip; &lt;em>Please???&lt;/em>.&amp;rdquo;.&lt;/p>
&lt;p>Okay, then&amp;hellip;&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#screw-that-gimme-a-site-already">&amp;ldquo;Screw that, gimme a site already&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="#what-s-the-plan">What&amp;rsquo;s the plan?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#what-is-a-static-website">What is a static website?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#hello-world-dot">Hello, world.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#peeking-under-the-browser-s-hood">Peeking under the browser&amp;rsquo;s hood&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-hello-world-is-not-enough">The hello-world is not enough&lt;/a>&lt;/li>
&lt;li>&lt;a href="#harness-html-dot-energy-to-model-our-would-be-site">Harness html.energy to model our would-be site&lt;/a>&lt;/li>
&lt;li>&lt;a href="#flip-the-model-into-a-full-website">Flip the model into a full website&lt;/a>&lt;/li>
&lt;li>&lt;a href="#what-next">What next?&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="screw-that-gimme-a-site-already">&amp;ldquo;Screw that, gimme a site already&amp;rdquo;&lt;/h2>
&lt;p>Certainly!&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;em>&lt;strong>&lt;a href="demo-2/index.html">site template&lt;/a>&lt;/strong>, hand-rolled and infused with pure html.energy&lt;/em>.
Just save each page and use any text editor to modify it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>&lt;a href="https://github.com/adityaathalye/shite">shite&lt;/a>&lt;/strong>, the tiny static site builder from shell.&lt;/em>
When the copy-pasta gets too much, a tiny Shell script can go a long way.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>TL;DR? Copy, use, modify at will.&lt;/p>
&lt;p>L;R? Follow me and I&amp;rsquo;ll show you how deep the rabbit hole goes.&lt;/p>
&lt;figure class="left" >
&lt;img src="morpheus-red-blue-pill.jpg" />
&lt;/figure>
&lt;h2 id="what-s-the-plan">What&amp;rsquo;s the plan?&lt;/h2>
&lt;p>To your credit, you will struggle and muddle and slap together a reasonable
site. I know I did. But you may also feel uneasy about the magic you used.
I know I did.&lt;/p>
&lt;p>Not today, though. Today we simplify, demystify, flow effortlessly, and end
up with&amp;hellip;&lt;/p>
&lt;p>Part 1: This blog:&lt;/p>
&lt;ul>
&lt;li>devise a decent, dead-simple HTML page template that you can fully grok,
and copy away to website success&lt;/li>
&lt;/ul>
&lt;p>Part 2: Next blog:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>grasp the problem space of making a static website (or, a website),&lt;/p>
&lt;/li>
&lt;li>
&lt;p>make &lt;em>shite: the website generator from Shell&lt;/em>, to automate the boring parts,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>do nothing that will surprise a Perl/PHP gentleperson hacker from the last
century. &amp;lsquo;twas a far more civilized time &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. I know because I&amp;rsquo;m from
the last century.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;Be water, my friend.&amp;quot;&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Bruce Lee.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="what-is-a-static-website">What is a static website?&lt;/h2>
&lt;p>Static simply means &lt;em>as-is&lt;/em>. Its inverse is &amp;ldquo;dynamic&amp;rdquo;, meaning in-transit.
The &amp;ldquo;static&amp;rdquo; part of &amp;ldquo;static website&amp;rdquo; corresponds to stored information. The
&amp;ldquo;website&amp;rdquo; part corresponds to where from and &lt;em>how&lt;/em>, the information gets to
one&amp;rsquo;s computer. A web-site is literally a place (site) on the World Wide Web,
whence our computer has to fetch the information we want.&lt;/p>
&lt;p>Fetching information, such as a web page, over the Internet is &amp;ldquo;dynamic&amp;rdquo; by
definition. Even just opening a file on your own computer&amp;rsquo;s disk is &amp;ldquo;dynamic&amp;rdquo;.
The very act of reading a digital file, and/or transmitting it, means copying
its bits from one place and showing them in another place &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>The &lt;em>Ultimate Static Site&lt;/em>, is a file that once written never changes. Thus,
once-received we never have to fetch it again (unless we lose it). Reality
is of course not so simple. But we will work with the &amp;ldquo;static means never
changing&amp;rdquo; mental model, because we can go pretty far with just that.&lt;/p>
&lt;p>We explore the &lt;em>making&lt;/em> of the &amp;ldquo;static&amp;rdquo; part; viz. the web pages. What could
these web pages convey? Well, any collection of words. A blog series.
A resume. A single essay. A tutorial. A presentation. A collection of books.
A portfolio. An artist&amp;rsquo;s statement. Or even a simple &amp;ldquo;Hello, world&amp;rdquo; message.
Your site, you choose!&lt;/p>
&lt;h2 id="hello-world-dot">Hello, world.&lt;/h2>
&lt;p>One of the simplest possible &amp;ldquo;static&amp;rdquo; websites is just a plain old text file
with a &lt;code>.html&lt;/code> file extension. Type a little &amp;lsquo;&lt;em>Hello, world&lt;/em>&amp;rsquo; message into
a text file (in Notepad or some other such text editor). Save it as &lt;em>hello.html&lt;/em>.
Open the file in a browser. Sure enough, we&amp;rsquo;ll see our little piece of text.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">Hello, world! I am @random on Twitter, Insta, FB, and LinkedIn. Look me up!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we put hello.html on a web server and have it serve the file as-is, well,
we just published a static website on the Internet.&lt;/p>
&lt;p>Some people enjoy these simple joys of life.&lt;/p>
&lt;p>For example, Adam Kelly &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>, m&amp;rsquo;colleague from the &lt;a href="./#footer">Recurse Center&lt;/a>
community, thinks their website &lt;a href="https://www.cthulahoops.org/">cthulahoops.org&lt;/a>
is just fine.&lt;/p>
&lt;p>And it is.&lt;/p>
&lt;figure class="left" >
&lt;img src="plain-static-website-cthulahoops.png" />
&lt;figcaption class="center" >Figure 1: Adam "Cthulahoops" Kelly makes you grin with just one line. (Retrieved Thu, 03 March, 2022).&lt;/figcaption>
&lt;/figure>
&lt;p>But you and I want more.&lt;/p>
&lt;h2 id="peeking-under-the-browser-s-hood">Peeking under the browser&amp;rsquo;s hood&lt;/h2>
&lt;p>Right now, let&amp;rsquo;s ignore this &amp;ldquo;server&amp;rdquo; business entirely. The &lt;em>Ultimate Static
Site&lt;/em> is usable from our computer, as-is. So let&amp;rsquo;s focus on the contents of
the site, and a general approach to assembling one.&lt;/p>
&lt;p>Our browser&amp;rsquo;s &amp;ldquo;View source&amp;rdquo; feature provides the first little clue. We see
something more than the plain text we typed into hello.html.&lt;/p>
&lt;p>The text of the &amp;lsquo;&lt;em>Hello, world&lt;/em>&amp;rsquo; message renders as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
Hello, world! I am @random on Twitter, Insta, FB, and LinkedIn. Look me up!
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>
&lt;figure class="left" >
&lt;img src="plain-static-website-cthulahoops-view-source.png" />
&lt;figcaption class="center" >Figure 2: Inside Adam's website.&lt;/figcaption>
&lt;/figure>
&lt;p>This immediately suggests a lesson, viz&amp;hellip;&lt;/p>
&lt;h2 id="the-hello-world-is-not-enough">The hello-world is not enough&lt;/h2>
&lt;p>The browser actually needs well-formed Hyper-Text Markup Language (HTML), to
correctly interpret and display content. But browsers also guess at content
type and apply rules to show content as sensibly as possible. In our dead-simple
case, the browser chose to wrap the plain text in the appropriate HTML tags.&lt;/p>
&lt;p>Unfortunately, typing plain text paragraphs into our hello.html file doesn&amp;rsquo;t
cut it because, to a browser, the whole thing is just one text node. It will
flatten the entire text file into single line. Browsers are clever in a very
narrow sense. Also there&amp;rsquo;s the small matter that a web server may refuse to
send HTML that it thinks is incomplete (malformed). So we&amp;rsquo;ll fix that first.&lt;/p>
&lt;p>So the next-simplest evolution of our static site would be to put appropriate
HTML around our text. &lt;code>&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/code> (paragraph) tags for instance, like a civilized
person from the last century would do.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">&amp;lt;p&amp;gt;Hello, world.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I am @random on Twitter, Insta, FB, and LinkedIn.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Look me up!&amp;lt;/p&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As before, the browser helpfully enclosed our incomplete html in the document
level tags (html, body).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Hello, world.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;I am @random on Twitter, Insta, FB, and LinkedIn.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Look me up!&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The browser somehow renders our text as neat paragraphs. That&amp;rsquo;s because it
automatically applies default style information to HTML elements it recognizes.
We can see this in the &amp;ldquo;Styles&amp;rdquo; tab when we &amp;ldquo;view source&amp;rdquo; (in Firefox).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#f92672">p&lt;/span> {
&lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">block&lt;/span>;
margin-block-start: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
margin-block-end: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
margin-inline-start: &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
margin-inline-end: &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s not magic. Have a look at the default style sheets to render HTML &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>:&lt;/p>
&lt;ul>
&lt;li>in the Chromium project: &lt;a href="https://chromium.googlesource.com/chromium/blink/+/master/Source/core/css/html.css">core/css/html.css&lt;/a>&lt;/li>
&lt;li>in the Firefox project: &lt;a href="https://searchfox.org/mozilla-central/source/layout/style/res/html.css">layout/style/res/html.css&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>So there it is. In the simplest case, we need only worry about the bare
essential content and HTML formatting, and rely on the browser to supply the
rest; wrapper HTML, and CSS style information.&lt;/p>
&lt;p>Further, even in this crude form, the browser has already planted the seed of
an idea in our minds. If &lt;em>we&lt;/em> supply just the content, &lt;em>something else&lt;/em> could
mechanically add in the boilerplate/repetitive HTML + CSS. A templating system.&lt;/p>
&lt;p>But we&amp;rsquo;re getting ahead of ourselves. If we want browsers to show our content
the way we intended, then we must remove guesswork by wrapping the content in
well-formed HTML syntax.&lt;/p>
&lt;h2 id="harness-html-dot-energy-to-model-our-would-be-site">Harness html.energy to model our would-be site&lt;/h2>
&lt;p>The web is meant to be a publishing medium. HTML, its lingua franca, has become
a highly standardized, feature-rich, and expressive language.&lt;/p>
&lt;p>Modern HTML aims to be &amp;ldquo;semantic&amp;rdquo;, i.e. it allows us to organize and describe
various parts of our website in HTML tags that are well-accepted &lt;strong>and&lt;/strong> machine-
friendly &lt;strong>and&lt;/strong> meaningful to humans. A lot can be done with very little &lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>CSS too has evolved a lot. But we will focus more on the HTML bits, because
that&amp;rsquo;s at the heart of all web layouts and we can rely on browsers to supply
reasonable styling information automatically.&lt;/p>
&lt;p>So, we may rifle through the HTML reference page and come up with some sort
of a model of our would-be site.
See the &lt;a href="demo/index.html">live demo&lt;/a> and compare with the markup anatomy
described below.&lt;/p>
&lt;figure class="left" >
&lt;img src="shite-demo-1.png" />
&lt;figcaption class="center" >Figure 3: a model page for the shite&lt;/figcaption>
&lt;/figure>
&lt;p>Note: I used the HTML and CSS I did simply because I picked up a few tricks
after reading half a book. You may do it differently. The important thing is
to construct a &lt;em>good enough model&lt;/em> to help us think.&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="829563147" type="checkbox" checked />
&lt;label for="829563147">
&lt;span class="collapsable-code__language">html&lt;/span>
&lt;span class="collapsable-code__title">Anatomy of the markup&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-html" >&lt;code>
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;!-- Some basic hygiene meta-data --&amp;gt;
&amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt;
&amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt;
&amp;lt;title&amp;gt;A Shtatic Shite&amp;lt;/title&amp;gt;
&amp;lt;meta name=&amp;#34;author&amp;#34; content=&amp;#34;Yours Truly&amp;#34;&amp;gt;
&amp;lt;meta name=&amp;#34;description&amp;#34; content=&amp;#34;In which we work our way to world domination the hard way.&amp;#34;&amp;gt;
&amp;lt;!-- Some bare bones style information. Ignore details, it&amp;#39;s just for show. --&amp;gt;
&amp;lt;!-- Read &amp;lt;https://every-layout.dev&amp;gt; for true CSS enlightenment. --&amp;gt;
&amp;lt;style&amp;gt;
:root {
color: #1a2639;
background-color: #f0ece2;
font-family: sans-serif;
}
,\* {
background-color: lightyellow;
}
a {
color: darkred;
}
body {
_\* Constrain body width. \*_
max-width: 72ch;
_\* Prevent content from sticking to inside edges of body. \*_
padding: 1.5rem;
_\* Position body in the middle of the screen. \*_
margin-top: 1.5rem;
margin-left: auto;
margin-right: auto;
}
nav {
display: flex;
gap: 1rem;
margin-top: 1rem;
margin-bottom: 1rem;
}
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;header id=&amp;#34;site-header&amp;#34;&amp;gt;
&amp;lt;h1&amp;gt;A &amp;#34;Hello, World&amp;#34; website by Yours Truly.&amp;lt;/h1&amp;gt;
&amp;lt;nav&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;a href=&amp;#34;index.html&amp;#34;&amp;gt;Blog&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;a href=&amp;#34;about.html&amp;#34;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;a href=&amp;#34;resume.html&amp;#34;&amp;gt;Resume&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/nav&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;main&amp;gt;
&amp;lt;h1&amp;gt;Blog posts&amp;lt;/h1&amp;gt;
&amp;lt;article id=&amp;#34;article-hello-world&amp;#34;&amp;gt;
&amp;lt;h2&amp;gt;Hello, world.&amp;lt;/h2&amp;gt;
&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;
In which we greet the world.
&amp;lt;/summary&amp;gt;
&amp;lt;p&amp;gt;Hello, world.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I&amp;#39;m here.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;And I&amp;#39;m going to take you head-on...&amp;lt;/p&amp;gt;
&amp;lt;nav&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;sub&amp;gt;^ &amp;lt;a href=&amp;#34;#article-hello-world&amp;#34;&amp;gt;title&amp;lt;/a&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;sub&amp;gt;^ &amp;lt;a href=&amp;#34;#site-header&amp;#34;&amp;gt;menu&amp;lt;/a&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/nav&amp;gt;
&amp;lt;/details&amp;gt;
&amp;lt;/article&amp;gt;
&amp;lt;article id=&amp;#34;article-wtf-world&amp;#34;&amp;gt;
&amp;lt;h2&amp;gt;Wtf, world?!&amp;lt;/h2&amp;gt;
&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;
In which we marvel at the various insanties of life and the living.
&amp;lt;/summary&amp;gt;
&amp;lt;p&amp;gt;Wtf, world.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I&amp;#39;m here.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;And I&amp;#39;m just... How do you even work?&amp;lt;/p&amp;gt;
&amp;lt;nav&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;sub&amp;gt;^ &amp;lt;a href=&amp;#34;#article-hello-world&amp;#34;&amp;gt;title&amp;lt;/a&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;sub&amp;gt;^ &amp;lt;a href=&amp;#34;#site-header&amp;#34;&amp;gt;menu&amp;lt;/a&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/nav&amp;gt;
&amp;lt;/details&amp;gt;
&amp;lt;/article&amp;gt;
&amp;lt;article id=&amp;#34;article-goodbye-world&amp;#34;&amp;gt;
&amp;lt;h2&amp;gt;Goodybe, world.&amp;lt;/h2&amp;gt;
&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;
In which we bid adieu to the world.
&amp;lt;/summary&amp;gt;
&amp;lt;p&amp;gt;Goodbye, world.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;It was nice being here.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I hope we meet again...&amp;lt;/p&amp;gt;
&amp;lt;nav&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;sub&amp;gt;^ &amp;lt;a href=&amp;#34;#article-goodbye-world&amp;#34;&amp;gt;title&amp;lt;/a&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span&amp;gt;&amp;lt;sub&amp;gt;^ &amp;lt;a href=&amp;#34;#site-header&amp;#34;&amp;gt;menu&amp;lt;/a&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/nav&amp;gt;
&amp;lt;/details&amp;gt;
&amp;lt;/article&amp;gt;
&amp;lt;/main&amp;gt;
&amp;lt;footer&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;p&amp;gt;Copyright, Yours Truly.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;All content is MIT licensed, except where specified otherwise.&amp;lt;/p&amp;gt;
&amp;lt;/footer&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Our model already contains much html.energy. We&amp;rsquo;re almost done.&lt;/p>
&lt;h2 id="flip-the-model-into-a-full-website">Flip the model into a full website&lt;/h2>
&lt;p>In all honesty, the above structure could serve you well for many blog posts
and pages. You can just copy-paste the HTML and modify the content, styles,
meta &amp;mdash;anything, really&amp;mdash; to create new pages.&lt;/p>
&lt;p>Like this &lt;a href="demo-2/index.html">other live demo&lt;/a>.&lt;/p>
&lt;p>See? Cute, right? (Fine, I also made &lt;em>just one&lt;/em> little tweak for colour effect.
I couldn&amp;rsquo;t help it, OK?).&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="shite-demo-2-index.png" alt="">&lt;/td>
&lt;td>&lt;img src="shite-demo-2-about.png" alt="">&lt;/td>
&lt;td>&lt;img src="shite-demo-2-resume.png" alt="">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="what-next">What next?&lt;/h2>
&lt;p>Well, you can&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>write a pleasantly styled private diary that lives just on your computer, or&lt;/li>
&lt;li>email any page, or the whole thing to anyone you like, or&lt;/li>
&lt;li>share the site via dropbox or suchlike, with close friends and family, or&lt;/li>
&lt;li>publish it to the WWW &lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup> for all to behold&lt;/li>
&lt;/ul>
&lt;p>But why stop here? I wish you and your site grow ever richer. And why stop
at one? I wish your ambition grows to make many sites of all shapes and sizes.&lt;/p>
&lt;p>Either way, may the copy pasta stop being cute very fast. May it cause you
to seek ways to automate away the tedious bits of site-building. Because it&amp;rsquo;s
too much fun!&lt;/p>
&lt;p>In next and concluding part, I draw a blueprint you could crib from, should
you choose this virtuous adventure in artisanal automation. Something dead-simple.
That you &lt;em>fully&lt;/em> grok. That you can change at will. That is therefore timeless.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Even Joe Armstrong &lt;a href="https://www.youtube.com/watch?v=lKXe3HUG2l4">gave up after &amp;ldquo;the local Grunt&amp;rdquo; wouldn&amp;rsquo;t work&lt;/a>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Recently, a friend told me matter-of-fact-ly that they know people who were spinning up a Kubernetes cluster for their static website. For scale and all, you know. (If you don&amp;rsquo;t know what any of that means, it&amp;rsquo;s fine. I don&amp;rsquo;t either.)&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://wesleyac.com/">Wesley A-C.&lt;/a>, m&amp;rsquo;colleague from the Recurse Center community, has more to say about the &lt;a href="https://blog.wesleyac.com/posts/no-static-websites">static/dynamic divide&lt;/a>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>Thanks to &lt;a href="https://github.com/cthulahoops">Adam Kelly&lt;/a>, for permission to use their site as example.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>Someone on the html.energy discord pointed to this truth buried in The Source.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>Visit &lt;a href="https://html.energy/home.html">html.energy&lt;/a> to learn the truth, &lt;a href="https://gossipsweb.net/">gossipsweb&lt;/a> to experience it, and the &lt;a href="https://512kb.club/">512KB Club&lt;/a> to meet the lightweight elite.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>This blog post &lt;a href="https://alignedleft.com/resources/cheap-web-hosting">Cheap or Free Static Website Hosting&lt;/a> suggests several options. The neocities.org way seems easiest for a simple website like ours. You&amp;rsquo;ll also find plenty of help for &lt;a href="https://pages.github.com/">publishing with github pages&lt;/a>. Alternatively, there seems to be a way to publish direct from your Google Drive or Dropbox etc. &lt;a href="https://www.freecodecamp.org/news/how-to-deploy-a-static-website-for-free-in-only-3-minutes-with-google-drive/">using Fast.io&lt;/a>.&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content></item><item><title>Dismal Arithmetic in Dyalog APL and Clojure</title><link>/posts/dismal-arithmetic-dyalog-apl-clojure/</link><pubDate>Fri, 25 Feb 2022 16:29:33 +0530</pubDate><guid>/posts/dismal-arithmetic-dyalog-apl-clojure/</guid><description>&lt;p>Throwback: Jan 2018.&lt;/p>
&lt;p>I learned of &lt;em>&lt;a href="https://arxiv.org/abs/1107.1130">Dismal Arithmetic&lt;/a>&lt;/em> from &lt;a href="https://twitter.com/rdivyanshu">@rdivyanshu&lt;/a> who posed it as a
programming problem in a Slackroom of local gentlenerds.&lt;/p>
&lt;p>As the linked paper describes it:&lt;/p>
&lt;blockquote>
&lt;p>Dismal arithmetic is just like the arithmetic you learned in school, only
simpler: there are no carries, when you add digits you just take the largest,
and when you multiply digits you take the smallest. This paper studies basic
number theory in this world, including analogues of the primes, number of
divisors, sum of divisors, and the partition function.&lt;/p>
&lt;/blockquote>
&lt;p>I thought it might be fun to implement it in APL for kicks, but I wrote it in
Clojure first, because I wasn&amp;rsquo;t sure of my APL-fu. And I&amp;rsquo;m glad I wrote the
Dyalog APL version because I learned something about trains, and also because
I stumbled on the idea of &amp;ldquo;inverse of a function&amp;rdquo; which melted my mind a bit.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#examples-of-dismal-addition-and-multiplication">Examples of Dismal Addition and Multiplication&lt;/a>&lt;/li>
&lt;li>&lt;a href="#dismal-arithmetic-in-clojure">Dismal Arithmetic in Clojure&lt;/a>&lt;/li>
&lt;li>&lt;a href="#dismal-arithmetic-in-dyalog-apl">Dismal Arithmetic in Dyalog APL&lt;/a>&lt;/li>
&lt;li>&lt;a href="#addendum-the-of-inverse">Addendum: The ⍣ of inverse&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted --></description><content>&lt;p>Throwback: Jan 2018.&lt;/p>
&lt;p>I learned of &lt;em>&lt;a href="https://arxiv.org/abs/1107.1130">Dismal Arithmetic&lt;/a>&lt;/em> from &lt;a href="https://twitter.com/rdivyanshu">@rdivyanshu&lt;/a> who posed it as a
programming problem in a Slackroom of local gentlenerds.&lt;/p>
&lt;p>As the linked paper describes it:&lt;/p>
&lt;blockquote>
&lt;p>Dismal arithmetic is just like the arithmetic you learned in school, only
simpler: there are no carries, when you add digits you just take the largest,
and when you multiply digits you take the smallest. This paper studies basic
number theory in this world, including analogues of the primes, number of
divisors, sum of divisors, and the partition function.&lt;/p>
&lt;/blockquote>
&lt;p>I thought it might be fun to implement it in APL for kicks, but I wrote it in
Clojure first, because I wasn&amp;rsquo;t sure of my APL-fu. And I&amp;rsquo;m glad I wrote the
Dyalog APL version because I learned something about trains, and also because
I stumbled on the idea of &amp;ldquo;inverse of a function&amp;rdquo; which melted my mind a bit.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#examples-of-dismal-addition-and-multiplication">Examples of Dismal Addition and Multiplication&lt;/a>&lt;/li>
&lt;li>&lt;a href="#dismal-arithmetic-in-clojure">Dismal Arithmetic in Clojure&lt;/a>&lt;/li>
&lt;li>&lt;a href="#dismal-arithmetic-in-dyalog-apl">Dismal Arithmetic in Dyalog APL&lt;/a>&lt;/li>
&lt;li>&lt;a href="#addendum-the-of-inverse">Addendum: The ⍣ of inverse&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="examples-of-dismal-addition-and-multiplication">Examples of Dismal Addition and Multiplication&lt;/h2>
&lt;p>OK, so first, a disclaimer. The code doesn&amp;rsquo;t explore all of the paper, just
addition, multiplication along with commutative, associative, distributive
properties thereof, because that&amp;rsquo;s all the Mathematics I understand :) I had
fun struggling through the paper anyway mainly because of the funny name.
(More papers should have more wryness and less dryness.)&lt;/p>
&lt;p>Anyway, the rules of the game are:&lt;/p>
&lt;ul>
&lt;li>arithmetic as in school, except that&lt;/li>
&lt;li>there there are no carries,&lt;/li>
&lt;li>when you add digits you just take the largest,&lt;/li>
&lt;li>and when you multiply digits you take the smallest&lt;/li>
&lt;/ul>
&lt;p>Dismal addition: 169 + 248 = 269, because&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"> 1 6 9
+ 2 4 8
-------
2 6 9
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dismal Multiplication: 169 * 248 = 12468, because&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"> 1 6 9
x 2 4 8
---------
1 6 8
1 4 4
1 2 2
---------
1 2 4 6 8
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The tasks:&lt;/p>
&lt;ul>
&lt;li>Write function for dismal addition
&lt;ul>
&lt;li>Takes two positive integer returns dismal sum&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Write function for dismal multiplication
&lt;ul>
&lt;li>Takes two positive integer returns dismal multiplication&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="dismal-arithmetic-in-clojure">Dismal Arithmetic in Clojure&lt;/h2>
&lt;p>Here I explored the basic properties of addition and multiplication. Yeah,
sorry got to slog through some encoding/decoding prerequisites first.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-clojure" data-lang="clojure">(&lt;span style="color:#66d9ef">ns &lt;/span>dismal-arithmetic)
(&lt;span style="color:#66d9ef">defn &lt;/span>n-&amp;gt;digits
&lt;span style="color:#e6db74">&amp;#34;Really dismal :sobbing:
&lt;/span>&lt;span style="color:#e6db74"> Will turn the number 12345 into the sequence (1 2 3 4 5).&amp;#34;&lt;/span>
[n]
(&lt;span style="color:#66d9ef">loop &lt;/span>[n n
xs (&lt;span style="color:#a6e22e">list&lt;/span>)]
(&lt;span style="color:#66d9ef">if &lt;/span>(&amp;lt; n &lt;span style="color:#ae81ff">10&lt;/span>) &lt;span style="color:#75715e">; ensure we split 10 also, into 1 and 0&lt;/span>
(conj xs (-&amp;gt; n Math/floor Math/round))
(&lt;span style="color:#a6e22e">recur&lt;/span> (/ n &lt;span style="color:#ae81ff">10&lt;/span>)
(conj xs
(-&amp;gt; n (rem &lt;span style="color:#ae81ff">10&lt;/span>) Math/floor Math/round))))))
&lt;span style="color:#75715e">;; Check...&lt;/span>
&lt;span style="color:#f92672">#&lt;/span>_(map n-&amp;gt;digits [&lt;span style="color:#ae81ff">169&lt;/span> &lt;span style="color:#ae81ff">248&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>])
(&lt;span style="color:#66d9ef">defn &lt;/span>digits-&amp;gt;n
&lt;span style="color:#e6db74">&amp;#34;Will turn the sequence (1 2 3 4 5) into the number 12345.&amp;#34;&lt;/span>
[dxs]
(reduce (&lt;span style="color:#66d9ef">fn &lt;/span>[r dx] (+ (* r &lt;span style="color:#ae81ff">10&lt;/span>) dx))
dxs))
(&lt;span style="color:#66d9ef">defn &lt;/span>dismal-add
&lt;span style="color:#e6db74">&amp;#34;x and y can have any number of digits&amp;#34;&lt;/span>
[x y]
(&lt;span style="color:#66d9ef">let &lt;/span>[nxs (&lt;span style="color:#a6e22e">n-&amp;gt;digits&lt;/span> x)
nys (&lt;span style="color:#a6e22e">n-&amp;gt;digits&lt;/span> y)
cxs (count nxs)
cys (count nys)
dxys (&lt;span style="color:#a6e22e">Math/abs&lt;/span> (- cxs cys))
dzs (repeat dxys &lt;span style="color:#ae81ff">0&lt;/span>)
[nxs nys] (&lt;span style="color:#66d9ef">if &lt;/span>(&amp;gt; cxs cys)
[nxs (concat dzs nys)]
[(concat dzs nxs) nys])]
(&lt;span style="color:#a6e22e">-&amp;gt;&amp;gt;&lt;/span> nys
(map max nxs)
digits-&amp;gt;n)))
(&lt;span style="color:#66d9ef">defn &lt;/span>dismal-mul
&lt;span style="color:#e6db74">&amp;#34;Like politics and war, multiplication is just addition
&lt;/span>&lt;span style="color:#e6db74"> by other means. No?&amp;#34;&lt;/span>
[x y]
(&lt;span style="color:#66d9ef">let &lt;/span>[nxs (&lt;span style="color:#a6e22e">n-&amp;gt;digits&lt;/span> x)
nys (&lt;span style="color:#a6e22e">n-&amp;gt;digits&lt;/span> y)
diagonal-summable
(reduce (&lt;span style="color:#66d9ef">fn &lt;/span>[rs y]
(conj rs (map &lt;span style="color:#f92672">#&lt;/span>(min y %) nys)))
[]
nxs)
transpose-matrix (&lt;span style="color:#66d9ef">fn &lt;/span>[matrix]
(into []
(apply map vector matrix)))
summable-matrix (&lt;span style="color:#a6e22e">transpose-matrix&lt;/span> diagonal-summable)
summables (reverse (map digits-&amp;gt;n summable-matrix))
summables (&lt;span style="color:#a6e22e">map-indexed&lt;/span> (&lt;span style="color:#66d9ef">fn &lt;/span>[idx x]
(* x (&lt;span style="color:#a6e22e">Math/round&lt;/span> (&lt;span style="color:#a6e22e">Math/pow&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> idx))))
summables)]
(reduce dismal-add summables)))
(&lt;span style="color:#a6e22e">comment&lt;/span>
&lt;span style="color:#75715e">;; Given test cases:&lt;/span>
(= (&lt;span style="color:#a6e22e">dismal-add&lt;/span> &lt;span style="color:#ae81ff">169&lt;/span> &lt;span style="color:#ae81ff">248&lt;/span>)
&lt;span style="color:#ae81ff">269&lt;/span>)
(= (&lt;span style="color:#a6e22e">dismal-mul&lt;/span> &lt;span style="color:#ae81ff">169&lt;/span> &lt;span style="color:#ae81ff">248&lt;/span>)
&lt;span style="color:#ae81ff">12468&lt;/span>)
&lt;span style="color:#75715e">;; Other numbers:&lt;/span>
(&lt;span style="color:#a6e22e">dismal-add&lt;/span> &lt;span style="color:#ae81ff">123&lt;/span> &lt;span style="color:#ae81ff">45678&lt;/span>)
(&lt;span style="color:#a6e22e">dismal-mul&lt;/span> &lt;span style="color:#ae81ff">123&lt;/span> &lt;span style="color:#ae81ff">45678&lt;/span>)
&lt;span style="color:#75715e">;; Associative?&lt;/span>
(= (&lt;span style="color:#a6e22e">dismal-add&lt;/span> &lt;span style="color:#ae81ff">169&lt;/span> (&lt;span style="color:#a6e22e">dismal-add&lt;/span> &lt;span style="color:#ae81ff">248&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>))
(&lt;span style="color:#a6e22e">dismal-add&lt;/span> (&lt;span style="color:#a6e22e">dismal-add&lt;/span> &lt;span style="color:#ae81ff">169&lt;/span> &lt;span style="color:#ae81ff">248&lt;/span>) &lt;span style="color:#ae81ff">100&lt;/span>))
(= (&lt;span style="color:#a6e22e">dismal-mul&lt;/span> &lt;span style="color:#ae81ff">169&lt;/span> (&lt;span style="color:#a6e22e">dismal-mul&lt;/span> &lt;span style="color:#ae81ff">248&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>))
(&lt;span style="color:#a6e22e">dismal-mul&lt;/span> (&lt;span style="color:#a6e22e">dismal-mul&lt;/span> &lt;span style="color:#ae81ff">169&lt;/span> &lt;span style="color:#ae81ff">248&lt;/span>) &lt;span style="color:#ae81ff">100&lt;/span>))
&lt;span style="color:#75715e">;; Commutative?&lt;/span>
(= (reduce dismal-add [&lt;span style="color:#ae81ff">169&lt;/span> &lt;span style="color:#ae81ff">248&lt;/span> &lt;span style="color:#ae81ff">12345&lt;/span>])
(reduce dismal-add [&lt;span style="color:#ae81ff">248&lt;/span> &lt;span style="color:#ae81ff">12345&lt;/span> &lt;span style="color:#ae81ff">169&lt;/span>])
(reduce dismal-add [&lt;span style="color:#ae81ff">12345&lt;/span> &lt;span style="color:#ae81ff">169&lt;/span> &lt;span style="color:#ae81ff">248&lt;/span>]))
(= (reduce dismal-mul [&lt;span style="color:#ae81ff">169&lt;/span> &lt;span style="color:#ae81ff">248&lt;/span> &lt;span style="color:#ae81ff">12345&lt;/span>])
(reduce dismal-mul [&lt;span style="color:#ae81ff">248&lt;/span> &lt;span style="color:#ae81ff">12345&lt;/span> &lt;span style="color:#ae81ff">169&lt;/span>])
(reduce dismal-mul [&lt;span style="color:#ae81ff">12345&lt;/span> &lt;span style="color:#ae81ff">169&lt;/span> &lt;span style="color:#ae81ff">248&lt;/span>]))
&lt;span style="color:#75715e">;; Distributive?&lt;/span>
(= (&lt;span style="color:#a6e22e">dismal-mul&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
(&lt;span style="color:#a6e22e">dismal-add&lt;/span> &lt;span style="color:#ae81ff">169&lt;/span> &lt;span style="color:#ae81ff">248&lt;/span>))
(&lt;span style="color:#a6e22e">dismal-add&lt;/span> (&lt;span style="color:#a6e22e">dismal-mul&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#ae81ff">169&lt;/span>)
(&lt;span style="color:#a6e22e">dismal-mul&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#ae81ff">248&lt;/span>)))
)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dismal-arithmetic-in-dyalog-apl">Dismal Arithmetic in Dyalog APL&lt;/h2>
&lt;p>Here, I managed to implement addition, discovered how to write &amp;ldquo;inverse of a
function&amp;rdquo; and my mind melted.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-dyalog" data-lang="dyalog"> da ← 10⊥(⌈/10⊥⍣¯1⊢)
da 169 248
269
&lt;/code>&lt;/pre>&lt;p>Yes, that&amp;rsquo;s the entire solution to dismal addition. &lt;code>⍣¯1&lt;/code> is APL for &amp;ldquo;inverse&amp;rdquo;.
Here is the solution explained in parts. I first did it with dfns, because my
brain is stuck inside Lisp / traditional functional programming style.&lt;/p>
&lt;p>Apart from built-in support for numeric encoding/decoding, notice the automatic
zero-padding.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-dyalog" data-lang="dyalog"> {10(⊤⍣¯1)⍵}∘{⌈/⍵}∘{10(⊥⍣¯1)⍵}⊢ 100000 10000 1000 100 10 1
111111
{10(⊤⍣¯1)⍵}∘{⌈/⍵}∘{10(⊥⍣¯1)⍵}⊢ 1 10 100 1000 10000 100000
111111
da ← 10⊥(⌈/10⊥⍣¯1⊢)
da 1 10 100 1000 10000 100000
111111
&lt;/code>&lt;/pre>&lt;p>&lt;em>However&lt;/em>, there is something deeply unsatisfying about using dfns in APL, when
you know trains exist.&lt;/p>
&lt;p>So I muddled about and managed to express the whole idea as a single unit, viz.
this lovely little expression &lt;code>10⊥(⌈/10⊥⍣¯1⊢)&lt;/code> which says &amp;ldquo;Dismal Arithmetic&amp;rdquo;
in fewer characters than the name &lt;em>and is also&lt;/em> a working partial implementation.
Here is how it breaks down in my FP-addled brain:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-dyalog" data-lang="dyalog">decode ← 10(⊥⍣¯1)⊢
reducemax ← ⌈/
encode ← 10(⊤⍣¯1)⊢
encode reducemax decode 169 248
269
&lt;/code>&lt;/pre>&lt;h2 id="addendum-the-of-inverse">Addendum: The ⍣ of inverse&lt;/h2>
&lt;p>Aaaron Hsu helped me understand what was going on, and wrote about
&amp;ldquo;&lt;a href="https://www.sacrideo.us/decoding-inverses/">Decoding Inverses&lt;/a>&amp;rdquo; at his blog.&lt;/p></content></item><item><title>Shell ain't a bad place to FP: part 0/N: Introduction</title><link>/posts/shell-aint-a-bad-place-to-fp-part-0-intro/</link><pubDate>Wed, 23 Feb 2022 01:55:11 +0530</pubDate><guid>/posts/shell-aint-a-bad-place-to-fp-part-0-intro/</guid><description>&lt;p>Or, &lt;em>&lt;strong>Supremely Functional Bash Programming&lt;/strong>, an exploration in N parts&amp;hellip;&lt;/em>&lt;/p>
&lt;p>Once upon a time, while fiddling with a log processing shell pipeline, it hit me
that the UNIX Way is a Surprisingly Functional Way, and so Functional Programming
(FP) and Bash must be a natural fit. They fit. The world was never the same again.&lt;/p>
&lt;p>Now I believe it so much, that I will go on a limb and assert that it is
highly inappropriate to write imperative-style Bash when we can just as easily
write &lt;em>supremely&lt;/em> functional Bash. Why? Because it makes for supremely &lt;em>better&lt;/em>
Bash (more reusable, more composable, more scalable, more enjoyable).&lt;/p>
&lt;p>Yes, I truly believe.&lt;/p>
&lt;p>Yes, I&amp;rsquo;m sane.&lt;/p>
&lt;p>No? Well OK, humour me&amp;hellip;&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#obligatory-mea-culpa">Obligatory mea culpa&lt;/a>&lt;/li>
&lt;li>&lt;a href="#an-outline-of-the-n-parts">An outline of the &amp;ldquo;N&amp;rdquo; parts&lt;/a>&lt;/li>
&lt;li>&lt;a href="#prelude-seeing-the-unix-tools-philosophy-as-a-functional-design-philosophy">Prelude: Seeing the UNIX tools philosophy as a functional design philosophy&lt;/a>&lt;/li>
&lt;li>&lt;a href="#screw-that-show-me-your-code">&amp;ldquo;Screw that, show me your code&amp;rdquo;&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted --></description><content>&lt;p>Or, &lt;em>&lt;strong>Supremely Functional Bash Programming&lt;/strong>, an exploration in N parts&amp;hellip;&lt;/em>&lt;/p>
&lt;p>Once upon a time, while fiddling with a log processing shell pipeline, it hit me
that the UNIX Way is a Surprisingly Functional Way, and so Functional Programming
(FP) and Bash must be a natural fit. They fit. The world was never the same again.&lt;/p>
&lt;p>Now I believe it so much, that I will go on a limb and assert that it is
highly inappropriate to write imperative-style Bash when we can just as easily
write &lt;em>supremely&lt;/em> functional Bash. Why? Because it makes for supremely &lt;em>better&lt;/em>
Bash (more reusable, more composable, more scalable, more enjoyable).&lt;/p>
&lt;p>Yes, I truly believe.&lt;/p>
&lt;p>Yes, I&amp;rsquo;m sane.&lt;/p>
&lt;p>No? Well OK, humour me&amp;hellip;&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#obligatory-mea-culpa">Obligatory mea culpa&lt;/a>&lt;/li>
&lt;li>&lt;a href="#an-outline-of-the-n-parts">An outline of the &amp;ldquo;N&amp;rdquo; parts&lt;/a>&lt;/li>
&lt;li>&lt;a href="#prelude-seeing-the-unix-tools-philosophy-as-a-functional-design-philosophy">Prelude: Seeing the UNIX tools philosophy as a functional design philosophy&lt;/a>&lt;/li>
&lt;li>&lt;a href="#screw-that-show-me-your-code">&amp;ldquo;Screw that, show me your code&amp;rdquo;&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="obligatory-mea-culpa">Obligatory mea culpa&lt;/h2>
&lt;p>Because I&amp;rsquo;m am going to lazy-stream this in N parts. Because my original post
was growing to &amp;ldquo;never gonna ship&amp;rdquo; size. But &lt;em>&lt;strong>not&lt;/strong>&lt;/em> because &amp;ldquo;Bash ain&amp;rsquo;t a &lt;em>real&lt;/em>
programming language&amp;rdquo;. (Besides, in our post-reality world, we get to make
our own reality.)&lt;/p>
&lt;h3 id="nothing-here-will-be-novel-dot">Nothing here will be novel.&lt;/h3>
&lt;ul>
&lt;li>&lt;em>&lt;strong>I&amp;rsquo;ve not invented anything that follows.&lt;/strong>&lt;/em> There are too many influences to
enumerate fully. I&amp;rsquo;ll provide references as I go along.&lt;/li>
&lt;li>&lt;em>&lt;strong>I expect to revise&lt;/strong>&lt;/em>, correct, add to this series as I learn more over time.&lt;/li>
&lt;li>&lt;em>&lt;strong>Code in the post assumes Bash 4+&lt;/strong>&lt;/em>, because that&amp;rsquo;s what I&amp;rsquo;ve been using
over the last 8-odd years.&lt;/li>
&lt;/ul>
&lt;h3 id="your-mileage-may-vary-dot">Your Mileage May Vary.&lt;/h3>
&lt;ul>
&lt;li>&lt;em>&lt;strong>The Bash code will be both message and medium.&lt;/strong>&lt;/em> but I will describe
general FP thinking, and Bash sure isn&amp;rsquo;t the only medium. Please replicate
solutions in your favourite language (in a UNIX-like way)!&lt;/li>
&lt;li>&lt;em>&lt;strong>I won&amp;rsquo;t go crazy with Bash-isms&lt;/strong>&lt;/em>, so the ideas and most of the code should
generalise to most UNIXy shells. That said, I haven&amp;rsquo;t used other shells to
make equally confident claims about FP in them.&lt;/li>
&lt;/ul>
&lt;h3 id="fp-suffuses-my-very-being-dot-m">&lt;strong>FP &lt;a href="http://evalapply.org/posts/what-makes-functional-programming-systems-functional/">suffuses my very being&lt;/a>.&lt;/strong> \m/&lt;/h3>
&lt;ul>
&lt;li>And I&amp;rsquo;m fairly confident the FP ideas will translate broadly, because I use
them all the time; in my code (Clojure, APL, Ruby, JS, Python, SML&amp;hellip;), in
my designs for logging systems, infra-as-code systems, CI/CD systems, as
well as designing human/communication workflows for teams.&lt;/li>
&lt;li>But it&amp;rsquo;s possible I&amp;rsquo;ve lived my life all wrong.&lt;/li>
&lt;/ul>
&lt;h2 id="an-outline-of-the-n-parts">An outline of the &amp;ldquo;N&amp;rdquo; parts&lt;/h2>
&lt;p>This (zeroth) post is about why the UNIX Way is the way of functional-style
design &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. &lt;em>&lt;code>N&lt;/code>&lt;/em> more posts are brewing, with examples and techniques.
Likely one per topic:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A &lt;em>rad&lt;/em> example from 1986 to motivate the rest of the series.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Deep-dive into bash functions and function design techniques&lt;/p>
&lt;ul>
&lt;li>Using functions to craft one&amp;rsquo;s own Bytes-sized UNIX tools&lt;/li>
&lt;li>Using them interactively like regular UNIX tools&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Pipelining all the things&lt;/p>
&lt;ul>
&lt;li>How we automatically get map / filter / reduce / early termination&lt;/li>
&lt;li>Automatic streaming (regular pipes, tee, named pipes etc&amp;hellip;)&lt;/li>
&lt;li>Ways to do pipeline-friendly domain design, and to translate that into
pipeline-friendly functions.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Avoiding manual state management with intelligent use of:&lt;/p>
&lt;ul>
&lt;li>Variables, scopes, program invariants&lt;/li>
&lt;li>Command substitution&lt;/li>
&lt;li>Process substitution&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Declarative programming&lt;/p>
&lt;ul>
&lt;li>Templating with heredocs and herestrings&lt;/li>
&lt;li>Trickshots with things like &lt;code>seq&lt;/code>, &lt;code>paste&lt;/code> etc.&lt;/li>
&lt;li>Reasonable uses of pattern matching&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Environment isolation in detail&lt;/p>
&lt;ul>
&lt;li>Lists and sub-shells&lt;/li>
&lt;li>in Pipelines&lt;/li>
&lt;li>Session portability&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Designing idempotent / restart-friendly solutions&lt;/p>
&lt;ul>
&lt;li>Because things can and will fail.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Maybe parallelism&lt;/p>
&lt;ul>
&lt;li>Mainly because I haven&amp;rsquo;t &lt;em>had to&lt;/em> &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> write parallel Bash, but it will
be fun to mess with.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Maybe sundry topics like associative arrays (Bash-only), job control,
namespacing, metaprogramming, flame-bait like &amp;ldquo;pipes are monads&amp;rdquo; etc.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="prelude-seeing-the-unix-tools-philosophy-as-a-functional-design-philosophy">Prelude: Seeing the UNIX tools philosophy as a functional design philosophy&lt;/h2>
&lt;p>The many remarkable aspects of UNIX Nature were discovered over half a century
worth of versions, revisions, disasters, and reincarnations. While many avatars
of UNICES and UNIX-likes have come and gone, the UNIX Way (articulated by the
1990s) has thrived through the ravages of time. Here it is, embodied in the
form of the UNIX Tools Philosophy.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;em>&lt;strong>Most importantly, do one thing&lt;/strong>&lt;/em>, and do it well (just like a function).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Consume and emit &lt;em>&lt;strong>plain data&lt;/strong>&lt;/em> (just like a function).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>Output the same data format as is received at input&lt;/strong>&lt;/em> (formerly only plain
lines of text, but now also structured literal data like JSON, EDN etc.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;strong>Don&amp;rsquo;t be chatty&lt;/strong>&lt;/em> (i.e. avoid side-effects, again, just like a function).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Be line-oriented, which design choice turns out to be &lt;em>&lt;strong>naturally streaming&lt;/strong>&lt;/em>,
with &lt;em>&lt;strong>automatic support for map/filter/reduce&lt;/strong>&lt;/em>, which we will use a lot.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Favour &lt;em>&lt;strong>universal composition&lt;/strong>&lt;/em> via standard interfaces like file descriptors,
standard IN/OUT/ERROR, line-orientation, and UNIX pipes (quite monadic, an
argument for much later).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Be as &lt;em>&lt;strong>general-purpose&lt;/strong>&lt;/em> as possible for wide reusability, in any context.
This pushes tools away from imposing internal structure on input data, as
also from maintaining persistent or shared internal state.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ideally have sane behaviour like environment isolation, idempotence, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Last but not least, when out-of-the-box solutions are not good enough, it
encourages us to detour to building our own tools. And these can be simple
Bash functions, usable interactively at the command line, just like full
standalone programs!&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Of course, practice can diverge from the ideal, but not by too much (many tools
have to work with stateful objects like files and sockets, some may rely on
lock-files, some should be idempotent but aren&amp;rsquo;t, others may grow to do more
than one thing and do everything badly etc.). Besides, not even Haskellers
escape this reality, so there.&lt;/p>
&lt;p>It stands that the UNIX Way strongly encourages us to create laser-focused,
composable, purely functional, data-flow oriented programs that we can remix
at will into surprisingly powerful solutions with surprisingly little ceremony.&lt;/p>
&lt;p>This &lt;em>Way&lt;/em> has proven to be very useful at scales several orders of magnitude
apart; from in-program 1-liner functions, to 1 kilobyte tools, to operating
systems, to planet-wide distributed systems. This unreasonable effectiveness
is why UNIX People have long valued these values.&lt;/p>
&lt;h2 id="screw-that-show-me-your-code">&amp;ldquo;Screw that, show me your code&amp;rdquo;&lt;/h2>
&lt;p>Sorry! I feel ya&amp;hellip; no code, no dice. Here is some of my FP-style Bash.
I plan to crib liberally from these to illustrate the posts-to-come.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://github.com/adityaathalye/bash-toolkit">bash-toolkit&lt;/a>&lt;/strong>:
a &amp;ldquo;Swiss Army Toolkit&amp;rdquo; of functions I&amp;rsquo;ve been accumulating over the years.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a href="https://github.com/adityaathalye/oxo">oxo&lt;/a>&lt;/strong>:
a retro-style noughts and crosses game in Bash (and it speaks!).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next up: &lt;strong>&lt;a href="https://evalapply.org/posts/shell-aint-a-bad-place-to-fp-part-1-doug-mcilroys-pipeline/">Shell ain&amp;rsquo;t a bad place to FP: part 1/N&lt;/a>&lt;/strong>
in which we take apart Douglas McIlroy&amp;rsquo;s famous pipeline from 1986, to
motivate the rest of the series. &amp;ldquo;Take apart&amp;rdquo; in the sense of &amp;ldquo;Design is
about taking things apart.&amp;rdquo;. A most respectful sense.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>May the Source be with us.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Recently I went on for a bit in general about &lt;a href="https://www.evalapply.org/posts/what-makes-functional-programming-systems-functional/">what does it even mean to be &amp;ldquo;functional&amp;rdquo;?&lt;/a> Read that if it pleases you, because it informs my approach to &lt;em>Supremely Functional&lt;/em> Bash programming.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>There was the one time I could have, at a $DAYJOB, but I was quite green, and had deadline, and it was a one time log analysis thing, and I a large EC2 box to waste, which I hogged for half a day, and came away stunned that my crappy shell pipeline chewed through ~600 GiB (gzipped) without crashing anything.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content></item><item><title>What makes Functional Programs and Systems "Functional"?</title><link>/posts/what-makes-functional-programming-systems-functional/</link><pubDate>Tue, 22 Feb 2022 15:36:52 +0530</pubDate><guid>/posts/what-makes-functional-programming-systems-functional/</guid><description>&lt;p>In which we ponder the Functional Nature of Life, The Universe, and Everything.
Please feel free to follow through the weeds, or jump straight to the bottom
for my 2 nano BTC on the matter. (Or my current state of mind, at any rate.)&lt;/p>
&lt;p>Disclaimer: I live in the Land of Lisp, meditate in the Church of Alonzo, and
am ever-wary of The State. Only converts &lt;em>might&lt;/em> find some entertainment value.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;For the love of State is the root of all evil: which while some coveted after,&lt;/em>
&lt;em>they have erred from Lambda the Ultimate, and pierced themselves through with&lt;/em>
&lt;em>many sorrows.&amp;quot;&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#is-it-already-suffusing-your-very-being">Is it already suffusing your very being?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-mathematics">Is it Mathematics?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-being-declarative">Is it being &amp;ldquo;declarative&amp;rdquo;?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-being-data-oriented">Is it being &amp;ldquo;data-oriented&amp;rdquo;?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-about-statelessness">Is it about &amp;ldquo;Statelessness&amp;rdquo;?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-about-managed-environments">Is it about &amp;ldquo;managed&amp;rdquo; environments?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-about-following-some-discipline-and-maybe-automating-it">Is it about following some discipline, and maybe automating it?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#my-2-nano-btc-on-the-matter">My 2 nano BTC on the matter&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted --></description><content>&lt;p>In which we ponder the Functional Nature of Life, The Universe, and Everything.
Please feel free to follow through the weeds, or jump straight to the bottom
for my 2 nano BTC on the matter. (Or my current state of mind, at any rate.)&lt;/p>
&lt;p>Disclaimer: I live in the Land of Lisp, meditate in the Church of Alonzo, and
am ever-wary of The State. Only converts &lt;em>might&lt;/em> find some entertainment value.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;For the love of State is the root of all evil: which while some coveted after,&lt;/em>
&lt;em>they have erred from Lambda the Ultimate, and pierced themselves through with&lt;/em>
&lt;em>many sorrows.&amp;quot;&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#is-it-already-suffusing-your-very-being">Is it already suffusing your very being?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-mathematics">Is it Mathematics?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-being-declarative">Is it being &amp;ldquo;declarative&amp;rdquo;?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-being-data-oriented">Is it being &amp;ldquo;data-oriented&amp;rdquo;?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-about-statelessness">Is it about &amp;ldquo;Statelessness&amp;rdquo;?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-about-managed-environments">Is it about &amp;ldquo;managed&amp;rdquo; environments?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-about-following-some-discipline-and-maybe-automating-it">Is it about following some discipline, and maybe automating it?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#my-2-nano-btc-on-the-matter">My 2 nano BTC on the matter&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="is-it-already-suffusing-your-very-being">Is it already suffusing your very being?&lt;/h2>
&lt;p>Because so-called &amp;ldquo;Functional Programming&amp;rdquo; started becoming pretty sexy over
the 2010s. By the 2020s, it started infiltrating all the things, small and big
and hyperscaled.&lt;/p>
&lt;p>Now you can&amp;rsquo;t get people to shut up about their declarative infrastructure-as-code
as-YAML microservices-first infinitely elastic shared-nothing event-sourced
map-reducing lambda architecture marvels.&lt;/p>
&lt;p>Now your VCs and your board nod sagely when these words flash past in your slick
OKR plan vision strategy slide decks. Now they further &lt;em>&amp;ldquo;Hey, quick question&amp;rdquo;&lt;/em>
you to same-page on your strategy for blockchain and smart contracts. And
general web3 readiness. So does every novice hire it seems, no matter their role.&lt;/p>
&lt;p>Now&amp;mdash;and be honest, OK?&amp;mdash;don&amp;rsquo;t you feel like everybody should just mentally
lie down for a few minutes in their metaverse, pass around the meta-ayahuasca,
and after the purge just ask simple meta-questions about FP and life for a
change? Because, for the love of lambda, we haven&amp;rsquo;t even gotten a breather
from the fast-nearing AI supremacy?&lt;/p>
&lt;p>No? OK, consider the following incomplete list of traits commonly attributed
to the &amp;ldquo;Functional&amp;rdquo; paradigm of programming languages and of systems. Alongside,
consider:&lt;/p>
&lt;ul>
&lt;li>Which traits does your pet programming language (or system) provide by default?&lt;/li>
&lt;li>Which traits do you create yourself in your programs (and systems)?&lt;/li>
&lt;li>Which traits draw the hard line between &amp;ldquo;Functional&amp;rdquo; and other kinds of
programs (and systems)?&lt;/li>
&lt;li>Which traits &lt;em>really&lt;/em> matter?&lt;/li>
&lt;li>Why would you even want any of it in the first place?&lt;/li>
&lt;/ul>
&lt;p>And will we really achieve world domination with FP? (Yes, we will.)&lt;/p>
&lt;h2 id="is-it-mathematics">Is it Mathematics?&lt;/h2>
&lt;p>Is it about writing &amp;ldquo;pure&amp;rdquo; functions?&lt;/p>
&lt;p>This is a bit of a tautology. A function is &amp;ldquo;pure&amp;rdquo; by definition. It specifies
a fixed mapping of an input domain to an output domain. When invoked, it
changes nothing about the state of the world. Which begs the question, how can
a thing that &lt;em>does&lt;/em> nothing be computationally useful? (Spoiler: it isn&amp;rsquo;t in
isolation, unless of course, you figure out a way to use the computational
uselessness to turn staggeringly larger amounts of electricity into progressively
smaller fragments of your imagination, on a blockchain somewhere). But I digress&amp;hellip;&lt;/p>
&lt;p>Must we further also have &amp;ldquo;first-class&amp;rdquo; functions?&lt;/p>
&lt;p>Ones that we can pass around as values? This lets us describe all manner of
deferred computations, including un-computable absurdities like infinite sequences,
and partial applications that will sit around forever if we don&amp;rsquo;t complete them.&lt;/p>
&lt;p>And do we absolutely &lt;em>need&lt;/em> the solid ground of Lambda Calculus or Category
Theory to &lt;em>pre-exist&lt;/em>?&lt;/p>
&lt;p>That&amp;rsquo;s an easy one to refute, but these things have become rather holy grail-y
now. If you don&amp;rsquo;t know your monad laws, I&amp;rsquo;m sorry you&amp;rsquo;re not permitted near
functions any more. Oh, and what about proofs? These are in the process of
holy-grailing too&amp;hellip;&lt;/p>
&lt;h2 id="is-it-being-declarative">Is it being &amp;ldquo;declarative&amp;rdquo;?&lt;/h2>
&lt;p>Reduce/ravel/plan/derive/goal-seek?&lt;/p>
&lt;p>To be &amp;ldquo;declarative&amp;rdquo; is to want to write down a set of constraints or rules
or input-output relationships, and leave it to the system to figure out not
only &lt;em>what operations&lt;/em> to perform, but also &lt;em>how&lt;/em> and &lt;em>when&lt;/em> to perform them.&lt;/p>
&lt;p>The declarative world is thrice-removed from the &amp;ldquo;procedural&amp;rdquo; world, where we
have to tell the computer the what, how, and when in excruciating detail.&lt;/p>
&lt;p>SQL, Prolog, APL are seen as &amp;ldquo;highly declarative&amp;rdquo; languages. CSS is also a
highly declarative language (which, I feel, is why people have a really hard
time with it&amp;mdash;CSS is a &lt;em>constraint mechanism&lt;/em> but our minds are strongly
conditioned for procedural thinking).&lt;/p>
&lt;p>And maybe AI is the currently-ultimate expression of being &amp;ldquo;declarative&amp;rdquo;. We
declare that we don&amp;rsquo;t even know what to declare, and write a meta-declaration
and hope to Lambda that it will figure out the declaration that we should have
fed to the computer in the first place.&lt;/p>
&lt;h2 id="is-it-being-data-oriented">Is it being &amp;ldquo;data-oriented&amp;rdquo;?&lt;/h2>
&lt;p>viz., choosing to work in terms of inert &amp;ldquo;literal&amp;rdquo; entities like JSON or EDN
or XML or some structured binary encoding, instead of &amp;ldquo;live&amp;rdquo; objects with
internal state? Asynchronous message-passing instead of synchronous remote
procedure calls (whether through object graphs, or across computer networks)?&lt;/p>
&lt;p>Is it about adhering to the principle of referential transparency; i.e. the
equivalence of evaluated functions and literal data?&lt;/p>
&lt;h2 id="is-it-about-statelessness">Is it about &amp;ldquo;Statelessness&amp;rdquo;?&lt;/h2>
&lt;p>No machine registers? No place-oriented &amp;ldquo;mutable&amp;rdquo; state? No pointers? No
shared references? No side effects? Yes laziness? Yes append-only storage?
Yes event sourcing?&lt;/p>
&lt;h2 id="is-it-about-managed-environments">Is it about &amp;ldquo;managed&amp;rdquo; environments?&lt;/h2>
&lt;p>Language mechanisms that relieve us of the burden and perils of malloc/free?&lt;/p>
&lt;p>Garbage collection? Immutable persistent data structures? Type-directed
compile-time memory access/use control? Multi-Version Concurrency Control?&lt;/p>
&lt;p>Kubernetes?&lt;/p>
&lt;h2 id="is-it-about-following-some-discipline-and-maybe-automating-it">Is it about following some discipline, and maybe automating it?&lt;/h2>
&lt;p>viz. a &lt;em>system&lt;/em> or a design philosophy of doing things, such as:&lt;/p>
&lt;ul>
&lt;li>An accountant-like state management practice.&lt;/li>
&lt;li>Carefully manipulating state only when absolutely necessary.&lt;/li>
&lt;li>Hard-wiring FP traits into a programming language / system.&lt;/li>
&lt;li>Choosing a strict single-process, non-branching, forward-looping-only
method of flow control.&lt;/li>
&lt;li>Having standard, highly general purpose compositional interfaces oriented
around streaming data flow?&lt;/li>
&lt;li>Eiffel-like Design-By-Contract? (Which is surprisingly &amp;ldquo;functional&amp;rdquo;.)&lt;/li>
&lt;li>Continuation-passing style?&lt;/li>
&lt;li>&amp;hellip; etc?&lt;/li>
&lt;/ul>
&lt;h2 id="my-2-nano-btc-on-the-matter">My 2 nano BTC on the matter&lt;/h2>
&lt;p>I think all of our popular programming systems are object-oriented &lt;em>and&lt;/em>
imperative by default, whether explicitly or implicitly. Now they all seem
to be adding &amp;ldquo;functional&amp;rdquo; looking features too. But to me, the functional-ness
of a language (or a system) is not about the feature set, but fundamentally
about its default (automatic) relationship with The State (of the world).&lt;/p>
&lt;p>&lt;strong>The &amp;ldquo;Object-Oriented&amp;rdquo; way&lt;/strong> inexorably pushes us to clone reality.&lt;/p>
&lt;p>We ingest and manage as much state and behaviour as possible, in order to
emulate the world. This, by construction, requires us to operate based on
theories and assumptions (internal state) doomed to always lag and diverge
from reality. In other words, it&amp;rsquo;s a synchronization problem mixed with the
impossible ideal of wanting to make the actual run-time look like the apparent
run-time. Concurrency quickly reveals the difficulties of trying this.&lt;/p>
&lt;p>&lt;strong>The &amp;ldquo;Imperative&amp;rdquo; way&lt;/strong> is more like doing open heart surgery.&lt;/p>
&lt;p>We have to get in there and manually orchestrate control flow, interrupt things,
and get the whole of it to mutate in-place &lt;em>while it is running&lt;/em>. The race
condition is always imminent&amp;mdash;will we close first, or will it stop first?
We never &lt;em>really&lt;/em> know if the seemingly routine procedure will cause something
totally unrelated to blow up in our faces this time around. Meanwhile we have
very sharp instruments in hand, and have to do a lot of it by &lt;em>fingerspitzengefühl&lt;/em>
because half the time we literally can&amp;rsquo;t see where to cut or clamp or suture.
I didn&amp;rsquo;t train for this but I hope you have. For at least 10 years. You have,
right? &amp;hellip; Right?&lt;/p>
&lt;p>&lt;strong>The &amp;ldquo;Functional&amp;rdquo; way&lt;/strong> wants to completely invert these models.&lt;/p>
&lt;p>It tries to expel all system state from inside to the outside. In so doing, it
immerses itself in world-state and tries to be a new conduit for different
parts of outside reality to communicate, hoping to make it behave to our liking.
This, by construction, forces us to think explicitly in terms of events
(discrete sensing and sequencing of world updates, i.e. facts), messaging
(encoding and transmitting facts as data), and time (asynchronicity, consistency,
consensus).&lt;/p>
&lt;p>The functional way is also totally different from how we experience the world.
The world is a concurrent, recurrent, parallel, fractal distributed system of
systems. And it is also stochastic and full of discontinuities. We have evolved
to form just-about-good-enough models of reality in our heads, in very bounded
contexts, to the extent necessary for survival. These internal models smooth
over all sorts of discontinuities, resist change while survival odds feel good,
and determine how we behave regardless of what might actually be out there.
We learn imperatively by poking and prodding the world around us while it hums
along. I think this is why it takes serious effort to learn the &amp;ldquo;functional&amp;rdquo;
way. We have to upend our entire mental model of how to do things in the world.&lt;/p>
&lt;p>&lt;strong>Maybe pure data at rest&lt;/strong> is the only truly &amp;ldquo;functional&amp;rdquo; thing?&lt;/p>
&lt;p>Maybe not. Like a pure function, pure data at rest does nothing and so is
useless to us when dormant. Besides, it is &amp;ldquo;pure&amp;rdquo; &lt;em>only&lt;/em> for the duration
entropy permits its complete un-corrupted recovery. Ultimately, the laws of
Physics will always win. To muddy the waters a bit more, even the purest of
pure functional systems contain state; signals in flight or some in-progress
computation.&lt;/p>
&lt;p>The only saving grace is that in a highly functional system, any run-time
state is entirely recoverable, reproducible, discrete, and isolated.&lt;/p>
&lt;p>&lt;strong>All said, everything mutates sooner or later.&lt;/strong>&lt;/p>
&lt;p>I don&amp;rsquo;t know how to navigate this, except to remind myself about The Thing
That Actually Matters&amp;hellip; to always remember that The State is the frenemy.&lt;/p>
&lt;p>So while it pleases me that so many wish to eagerly embrace the Functional Way,
it is good to be soberly mindful of scopes, lifetimes, margins, error budgets,
and bounds of reality (state) and of data (information about reality). Good
situational awareness will lead us to build highly functional systems that
keep The State where it belongs, and still do useful things with it.&lt;/p>
&lt;p>And all &lt;em>that&lt;/em> said, I leave you with this prayer:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">O Lambda the Ultimate,
bless the reader of these words.
That their core be functional,
and their functions be pure.
That their data be immutable,
so they may know the value of values.
That their systems be composable,
so they may grow and scale with grace.
That their States only mutate
in pleasantly surprising ways.
For otherwise nothing lives.
Nothing evolves.
In the name of the alpha,
the beta, and the eta...
(λx.x x) (λx.x x)
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Baby don't hurry, don't stop (feat. Melancholy)</title><link>/posts/dont-hurry-dont-stop-sad-version/</link><pubDate>Mon, 14 Feb 2022 10:24:39 +0530</pubDate><guid>/posts/dont-hurry-dont-stop-sad-version/</guid><description>&lt;p>This is how I struggle from time to time. It is not pretty. These days it&amp;rsquo;s
been a lot more. Thankfully, it is not a constant. Instead of reading this,
you should want to listen to Alain de Botton.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=Aw1oLtuJOXQ">on Pessimism&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=jJ6K%5Ff7oSdg">on Love&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=W9X7u-MeJz0">on an Emotional Education&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>For here lies melancholy that I put to paper from a particularly deep hole,
not too long ago. It may ruin your day, or it may make you feel a little bit
understood about your dark moments. And it&amp;mdash;unlike Alain&amp;rsquo;s teachings&amp;mdash;will
certainly not help you find a way through.&lt;/p>
&lt;p>Your mileage &lt;em>will&lt;/em> vary.&lt;/p></description><content>&lt;p>This is how I struggle from time to time. It is not pretty. These days it&amp;rsquo;s
been a lot more. Thankfully, it is not a constant. Instead of reading this,
you should want to listen to Alain de Botton.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=Aw1oLtuJOXQ">on Pessimism&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=jJ6K%5Ff7oSdg">on Love&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=W9X7u-MeJz0">on an Emotional Education&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>For here lies melancholy that I put to paper from a particularly deep hole,
not too long ago. It may ruin your day, or it may make you feel a little bit
understood about your dark moments. And it&amp;mdash;unlike Alain&amp;rsquo;s teachings&amp;mdash;will
certainly not help you find a way through.&lt;/p>
&lt;p>Your mileage &lt;em>will&lt;/em> vary.&lt;/p>
&lt;hr>
&lt;p>Today was one of those days.&lt;/p>
&lt;p>When the feeling hit like a slap in the face. Again. Just how much of my
youth burned in self-doubt, fear, self-shame, akrasia.&lt;/p>
&lt;p>Twenty years of young adulthood incinerated by mine own hand, before my own
eyes, and I did nothing to save it.&lt;/p>
&lt;p>Sigh.&lt;/p>
&lt;p>This life is singular. It is not ours to have. It is not ours to end. It is
ours to embrace as a gift to give away.&lt;/p>
&lt;p>The gift is a chance to become all that we can become. We cannot become, if we
keep staring down at ourselves from imagined imaginations of others. What if
I can&amp;rsquo;t do it? What if I fail? What if nobody likes me? I am not &lt;em>this&lt;/em>. I am
not &lt;em>that&lt;/em>. I&amp;rsquo;ll never get &lt;em>there&lt;/em>. &lt;em>I&lt;/em> am not even someone. That is the root
of all self-doubt and fear and shame. A never-being in the here and now. A
never-learning about oneself. A never-knowing of feeling alive. The kind of
poverty that material things cannot end.&lt;/p>
&lt;p>Looking from the outside makes us pressure and twist ourselves into the imagined
mould. But the mould changes before we&amp;rsquo;re done. And we start again. The cycle is
endless, relentless. We go faster, but it changes faster. And we forget ourselves.&lt;/p>
&lt;p>If there is one gift we can give to another, especially a young one, it would
be to show them how to live this: &amp;ldquo;Don&amp;rsquo;t hurry, don&amp;rsquo;t stop.&amp;rdquo;. To learn to &lt;em>do&lt;/em>,
without fearing the unknown, knowing failure without shame, with kindness, with
oneself, without hurry.&lt;/p>
&lt;p>Hurry forces pause. Not pausing breaks us. So many break forever. Never becoming.&lt;/p>
&lt;p>So many learn too late, that they only know to hurry, that they can&amp;rsquo;t slow down.
Once perhaps, long ago, they peered inside their mould and saw nothing. It&amp;rsquo;s
not that nothing exists, it&amp;rsquo;s that they never learned to see. And so all that
remained was to dwell in the future; remoulding faster and faster until the
breakdown. Or worse, to delve into the past, in endless revisions of discarded
moulds to reach an imagined now that never will come to pass. If there is a
metaverse, it is this.&lt;/p>
&lt;p>This prisoners' game of imagined imaginations.&lt;/p>
&lt;p>Fantasies rooted in fantasy.&lt;/p>
&lt;p>Maybe it&amp;rsquo;s not too late for you. Maybe it&amp;rsquo;s not too late for me.&lt;/p>
&lt;p>I hope it isn&amp;rsquo;t.&lt;/p>
&lt;p>But if it is too late, then I hope we come back, you and I.&lt;/p>
&lt;p>For a rebirth requires a death.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>“It is better to do something continuously, perpetually and untiringly than to hustle and fail.”&lt;/em>&lt;/p>
&lt;p>&lt;em>“If you hurry, you must rest. If you want to keep going without resting, then you mustn’t hurry.”&lt;/em>&lt;/p>
&lt;p>&lt;em>“Don’t hurry, don’t stop”&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Kintar%C5%8D%5FHattori">Kintarō Hattori&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></content></item><item><title>people > culture > values > strategy > technology</title><link>/posts/people-culture-values-strategy-technology/</link><pubDate>Fri, 11 Feb 2022 15:32:21 +0530</pubDate><guid>/posts/people-culture-values-strategy-technology/</guid><description>&lt;p>The premise:&lt;/p>
&lt;p>-&amp;gt; People create culture.&lt;/p>
&lt;p>-&amp;gt; Culture shapes values.&lt;/p>
&lt;p>-&amp;gt; Values inform strategy.&lt;/p>
&lt;p>-&amp;gt; Technology is Strategy actualised.&lt;/p></description><content>&lt;p>The premise:&lt;/p>
&lt;p>-&amp;gt; People create culture.&lt;/p>
&lt;p>-&amp;gt; Culture shapes values.&lt;/p>
&lt;p>-&amp;gt; Values inform strategy.&lt;/p>
&lt;p>-&amp;gt; Technology is Strategy actualised.&lt;/p>
&lt;hr>
&lt;p>The implication:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Worst case&lt;/th>
&lt;th>Best case&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;gt; Destructive technology results&lt;/td>
&lt;td>&amp;gt; Constructive technology results&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt; from violent strategy&lt;/td>
&lt;td>&amp;gt; from enlightened strategy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt; borne of pathological values&lt;/td>
&lt;td>&amp;gt; borne of generative values&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt; normalized by vile culture&lt;/td>
&lt;td>&amp;gt; normalized by alive culture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt; catalysed by fear-based &lt;em>leadership&lt;/em> (verb-form)&lt;/td>
&lt;td>&amp;gt; catalysed by trust-based &lt;em>leadership&lt;/em> (verb-form)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt; enabled by hapless bystanders&lt;/td>
&lt;td>&amp;gt; co-created by highly engaged participants&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unfortunately widespread, easily achieved.&lt;/td>
&lt;td>Fortunately achievable, though high-effort.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Hallmark of negative performance.&lt;/td>
&lt;td>Hallmark of elite performance.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Wouldn&amp;rsquo;t it be nice if the &amp;ldquo;Best case&amp;rdquo; happened most of the time?&lt;/p>
&lt;p>Wouldn&amp;rsquo;t you like to be the sort of leader who makes it happen? A person of
whom people genuinely say &amp;ldquo;&lt;em>I did some of the best work of my life because of
their leadership.&lt;/em>&amp;rdquo;? I&amp;rsquo;ve had one or two of those in my life so far. Enough to
&lt;em>believe&lt;/em>.&lt;/p>
&lt;p>Here&amp;rsquo;s the thing, though.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>It requires a lot of self-work, but you can&amp;rsquo;t go it alone.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There are no roads, but there are landmarks, GPSes, and gyroscopes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There are no formulas, but there are stories, clues, and feedback loops.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There are few such leaders, but there are many followers, and leadership is
teachable. Anyone going on this quest will discover the surprising array of
people who want to rally around to help them succeed. I know I would!&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>There are many places to look. Here&amp;rsquo;s just one such bag full of some pretty
good clues.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;em>Westrum&amp;rsquo;s typology of organizational culture&lt;/em> (table below), as &lt;a href="https://cloud.google.com/architecture/devops/devops-culture-westrum-organizational-culture">presented here&lt;/a>
in context of Google&amp;rsquo;s DORA research, but which is generally applicable to any
team within any organisation, as well as to any org of any size in any industry.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dr. Ron Westrum in conversation with Gene Kim at the &lt;em>Idealcast&lt;/em>, for aural
accompaniment during the day&amp;rsquo;s perambulations:&lt;/p>
&lt;ul>
&lt;li>Part 1: &lt;a href="https://itrevolution.podbean.com/e/the-sociology-and-typologies-of-organizations-and-technical-maestros-with-dr-ron-westrum/">The Sociology and Typologies of Organizations, and Technical Maestros&lt;/a>&lt;/li>
&lt;li>Part 2: &lt;a href="https://itrevolution.podbean.com/e/patterns-of-generative-cultures-how-they-can-be-destroyed-and-the-importance-of-trust-with-dr-ron-westrum/">Patterns of Generative Cultures: How They Can Be Destroyed and the Importance of Trust&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pathological&lt;/th>
&lt;th>Bureaucratic&lt;/th>
&lt;th>Generative&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Power oriented&lt;/td>
&lt;td>Rule oriented&lt;/td>
&lt;td>Performance oriented&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Low cooperation&lt;/td>
&lt;td>Modest cooperation&lt;/td>
&lt;td>High cooperation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Messengers &amp;ldquo;shot&amp;rdquo;&lt;/td>
&lt;td>Messengers neglected&lt;/td>
&lt;td>Messengers trained&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Responsibilities shirked&lt;/td>
&lt;td>Narrow responsibilities&lt;/td>
&lt;td>Risks are shared&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bridging discouraged&lt;/td>
&lt;td>Bridging tolerated&lt;/td>
&lt;td>Bridging encouraged&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Failure leads to scapegoating&lt;/td>
&lt;td>Failure leads to justice&lt;/td>
&lt;td>Failure leads to inquiry&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Novelty crushed&lt;/td>
&lt;td>Novelty leads to problems&lt;/td>
&lt;td>Novelty implemented&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Table: &lt;em>&lt;strong>The Westrum organizational typology model: How organizations process
information&lt;/strong> (Source: Ron Westrum, &amp;ldquo;&lt;a href="https://qualitysafety.bmj.com/content/13/suppl%5F2/ii22.short">A typology of organisation culture&lt;/a>),&amp;quot;&lt;/em>
&lt;em>BMJ Quality &amp;amp; Safety 13, no. 2 (2004), &amp;lt;10.1136/qshc.2003.009522&amp;gt;.)&lt;/em>&lt;/p>
&lt;p>Happy generative acculturing! _\\//&lt;/p>
&lt;p>(And if you&amp;rsquo;re on quest to build a generative software organization, and you
wish for some &lt;em>eval/apply&lt;/em> assistance, hit me up&amp;hellip; &lt;em>adi&lt;/em> at this domain!)&lt;/p></content></item><item><title>Poor man's Reader App with Pandoc and Bash</title><link>/posts/reader-app-pandoc-bash/</link><pubDate>Thu, 10 Feb 2022 22:10:43 +0530</pubDate><guid>/posts/reader-app-pandoc-bash/</guid><description>&lt;p>Throwback, June 27, 2020.&lt;/p>
&lt;p>Every so often, I want to avoid opening a website in a browser, for &amp;hellip; reasons.&lt;/p>
&lt;p>Curl alone presents too much html. I want to try and read stuff.&lt;/p>
&lt;p>Today, I was playing with Igor Chubin&amp;rsquo;s &lt;strong>awesome&lt;/strong> terminal services (wttr.in,
cht.sh etc.), and it hit me:&lt;/p>
&lt;p>&amp;ldquo;WAIT, there&amp;rsquo;s pandoc, what if I just &amp;hellip; &amp;quot;&lt;/p></description><content>&lt;p>Throwback, June 27, 2020.&lt;/p>
&lt;p>Every so often, I want to avoid opening a website in a browser, for &amp;hellip; reasons.&lt;/p>
&lt;p>Curl alone presents too much html. I want to try and read stuff.&lt;/p>
&lt;p>Today, I was playing with Igor Chubin&amp;rsquo;s &lt;strong>awesome&lt;/strong> terminal services (wttr.in,
cht.sh etc.), and it hit me:&lt;/p>
&lt;p>&amp;ldquo;WAIT, there&amp;rsquo;s pandoc, what if I just &amp;hellip; &amp;quot;&lt;/p>
&lt;hr>
&lt;p>&amp;hellip;
&amp;hellip;
&amp;hellip; and an hour later&amp;hellip; a terrible idea manifested itself.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">www_to_md&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
pandoc --wrap&lt;span style="color:#f92672">=&lt;/span>none -f html -t markdown &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
drop_noise&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e"># remove pesky divs&lt;/span>
grep -v -E &lt;span style="color:#e6db74">&amp;#34;(&amp;lt;div|&amp;lt;/div).*[&amp;gt;]?|*.&amp;gt;&amp;#34;&lt;/span> |
&lt;span style="color:#75715e"># squeeze multiple blank lines into one&lt;/span>
cat -s
&lt;span style="color:#f92672">}&lt;/span>
cache_site&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local sitecache&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1:?&lt;span style="color:#e6db74">&amp;#39;Fail. Path to create cache.&amp;#39;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local mdfilename&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>2&lt;span style="color:#66d9ef">:-&lt;/span>&lt;span style="color:#e6db74">&amp;#39;this.md&amp;#39;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local evict_cache_qmark&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>3&lt;span style="color:#66d9ef">:-&lt;/span>no&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
mkdir -p &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sitecache&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> -f &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sitecache&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mdfilename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>evict_cache_qmark&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;no&amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span>
&lt;span style="color:#66d9ef">then&lt;/span> tee
&lt;span style="color:#66d9ef">else&lt;/span> tee &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sitecache&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mdfilename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
panwww&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local siteurl&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local evict_cache_qmark&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>2&lt;span style="color:#66d9ef">:-&lt;/span>no&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local sitename&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>siteurl/http*:&lt;span style="color:#ae81ff">\/\/&lt;/span>/www.&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local sitecache&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/tmp/panwwwcache/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sitename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local mdfilename&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;this.md&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> -f &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sitecache&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mdfilename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>evict_cache_qmark&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;no&amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span>
&lt;span style="color:#66d9ef">then&lt;/span> local cmd&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cat &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sitecache&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mdfilename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span> local cmd&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;www_to_md &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>siteurl&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
$cmd | drop_noise | cache_site &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sitecache&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mdfilename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>evict_cache_qmark&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>so that &amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">panwww &lt;span style="color:#e6db74">&amp;#34;https://www.recurse.com/&amp;#34;&lt;/span> | less &lt;span style="color:#75715e"># fetches site the first time&lt;/span>
panwww &lt;span style="color:#e6db74">&amp;#34;https://www.recurse.com/&amp;#34;&lt;/span> | less &lt;span style="color:#75715e"># looks up &amp;#34;cache&amp;#34;&lt;/span>
panwww &lt;span style="color:#e6db74">&amp;#34;https://www.recurse.com/&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;refetch&amp;#34;&lt;/span> | less
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>How To Not Die By A Thousand Cuts. Or, How To Think About Software Quality.</title><link>/posts/how-to-not-die-by-a-thousand-cuts/</link><pubDate>Thu, 03 Feb 2022 15:20:41 +0530</pubDate><guid>/posts/how-to-not-die-by-a-thousand-cuts/</guid><description>&lt;p>First off, what even is Quality?&lt;/p>
&lt;p>All things emerge, change, and die. I think &lt;em>Quality&lt;/em> is the experience of the
process. The idea of &lt;em>Good Quality&lt;/em> essentially boils down to performing the
process with grace, and leaving the place better than we found it.&lt;/p>
&lt;p>Further, the process of emergence and change&amp;mdash;i.e. living&amp;mdash;is also the process
of dying. It follows that to think clearly about the Quality of the former one
must think clearly about the Quality of the latter. The saddest way it can unfold
is a slow painful degradation without healing succour meaning or hope. The
proverbial death by a thousand cuts. I hope you never witness such a passing,
even from afar.&lt;/p>
&lt;p>Ok, that got dark fast, and if we&amp;rsquo;re not careful, we will produce a 300 page
Zen dialogue on Motorcycle Maintenance. So we will distract ourselves with the
much smaller, lighter&amp;mdash;and I&amp;rsquo;d argue, even pleasant&amp;mdash;task of contemplating
Quality of software products.&lt;/p>
&lt;p>None of what follows is novel, but I feel the message &lt;em>and&lt;/em> its surrounding
context bears repeating, because if it is not obvious already, software fails
us all the time. Far too often with terrible consequences.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#what-is-the-nature-of-software-products">What is the nature of software products?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#whom-to-hold-responsible-for-software-quality-assurance">Whom to hold responsible for Software Quality Assurance?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#why">Why?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-different-for-different-kinds-of-products">Is it different for different kinds of products?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#how-to-destroy-quality">How to destroy Quality?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#how-to-create-quality">How to create Quality?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-first-skill-is-to-learn-to-suffer-constructively-dot">The first skill is to learn to suffer constructively.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#caveats-mea-culpa-etc-dot">Caveats, mea culpa, etc.&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted --></description><content>&lt;p>First off, what even is Quality?&lt;/p>
&lt;p>All things emerge, change, and die. I think &lt;em>Quality&lt;/em> is the experience of the
process. The idea of &lt;em>Good Quality&lt;/em> essentially boils down to performing the
process with grace, and leaving the place better than we found it.&lt;/p>
&lt;p>Further, the process of emergence and change&amp;mdash;i.e. living&amp;mdash;is also the process
of dying. It follows that to think clearly about the Quality of the former one
must think clearly about the Quality of the latter. The saddest way it can unfold
is a slow painful degradation without healing succour meaning or hope. The
proverbial death by a thousand cuts. I hope you never witness such a passing,
even from afar.&lt;/p>
&lt;p>Ok, that got dark fast, and if we&amp;rsquo;re not careful, we will produce a 300 page
Zen dialogue on Motorcycle Maintenance. So we will distract ourselves with the
much smaller, lighter&amp;mdash;and I&amp;rsquo;d argue, even pleasant&amp;mdash;task of contemplating
Quality of software products.&lt;/p>
&lt;p>None of what follows is novel, but I feel the message &lt;em>and&lt;/em> its surrounding
context bears repeating, because if it is not obvious already, software fails
us all the time. Far too often with terrible consequences.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#what-is-the-nature-of-software-products">What is the nature of software products?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#whom-to-hold-responsible-for-software-quality-assurance">Whom to hold responsible for Software Quality Assurance?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#why">Why?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-different-for-different-kinds-of-products">Is it different for different kinds of products?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#how-to-destroy-quality">How to destroy Quality?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#how-to-create-quality">How to create Quality?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-first-skill-is-to-learn-to-suffer-constructively-dot">The first skill is to learn to suffer constructively.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#caveats-mea-culpa-etc-dot">Caveats, mea culpa, etc.&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="what-is-the-nature-of-software-products">What is the nature of software products?&lt;/h2>
&lt;p>See? This is already easier than asking &amp;ldquo;What is the nature of life?&amp;rdquo;.&lt;/p>
&lt;p>Like any other machine, a software product is wrought of the labour of many
minds and hands, and it requires maintenance and upkeep throughout its life.&lt;/p>
&lt;p>Unlike &lt;em>all&lt;/em> other machines, it is pure concept, and as such it is infinitely
malleable and mutable. And mutate it does, all the time.&lt;/p>
&lt;p>Sometimes, &amp;ldquo;finished&amp;rdquo; software emerges, only needing minor fixes and patches,
but remaining the same in purpose, interface, and behaviour. Many Unix tools
fall in this category. Some projects like ZeroMQ make it their explicit goal.
Many Clojure programmers value such &amp;ldquo;finished-ness&amp;rdquo;. Such scattered examples
exist.&lt;/p>
&lt;p>Most software does not have this luxury. Most software must change indefinitely
because the world it must serve changes indefinitely. The Emacs editor is a
software product that has evolved non-stop for &lt;em>nearly half a century&lt;/em> since
it emerged in 1976, and it continues to thrive. This post was written in Emacs.&lt;/p>
&lt;p>There is a strong reinforcing feedback loop too. Software changes the world
fast, forcing software to change faster. The current reincarnation of Machine
Learning and AI can be viewed as an expression of this process. We&amp;rsquo;re basically
saying it&amp;rsquo;s all accelerating so much that it is getting humanly &lt;em>impossible&lt;/em>
to write and revise software fast enough, to out-OODA the pace of change.
So we must instead find algorithms that sense the world and then dynamically
generate or revise other algorithms to achieve system objectives (viz. alter
the world further in our favour).&lt;/p>
&lt;p>We have to wonder, how do we make sure our product continues to thrive and
succeed under such unrelenting pressure of constant and sometimes violent change?
And who&amp;rsquo;s neck should be on the line for it?&lt;/p>
&lt;h2 id="whom-to-hold-responsible-for-software-quality-assurance">Whom to hold responsible for Software Quality Assurance?&lt;/h2>
&lt;p>The Usual Suspects?&lt;/p>
&lt;ul>
&lt;li>Those &amp;ldquo;Quality Assurance&amp;rdquo; boffins? Developers? UX people? DevOps?&lt;/li>
&lt;/ul>
&lt;p>The Less Usual Suspects?&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Product managers? Analysts? Customer success? Sales? Marketing?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The CEO?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The AI?&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Consider the scenarios below. All of them directly impact customers, making
them think &amp;ldquo;bad quality&amp;rdquo;. Consider who is responsible for the underlying
problem (or more likely, problems)?&lt;/p>
&lt;ul>
&lt;li>Your app framework is extremely performant and glitch-free. Your app bombs.&lt;/li>
&lt;li>A feature does exactly what it promises, but people fail to use it right.&lt;/li>
&lt;li>Your company committed half of itself to ship a second product in record time,
but customers never really wanted it.&lt;/li>
&lt;li>A huge update was pushed out on a do-or-die basis. Naturally it misbehaves,
can&amp;rsquo;t be rolled back, costs 5x as much to get right as it took to ship, and
the rework effectively adds months to your plan of world domination.&lt;/li>
&lt;li>Your service fails to scale. You discover there were no benchmarks.&lt;/li>
&lt;li>A deployment breaks production. You discover a bad configuration.&lt;/li>
&lt;li>A feature leaks data to unintended users and breaks SLAs / regulations. Your
CEO releases a statement blaming a DevOps engineer.&lt;/li>
&lt;li>A several-hour glitch goes un-monitored, causing serious widespread data
corruption.&lt;/li>
&lt;li>Your production noticeably degrades often. A large sea mammal is your mascot.&lt;/li>
&lt;li>Your production seldom degrades, but when it does, it takes down half the
known Internet along with it.&lt;/li>
&lt;li>and on and on&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>In a quiet moment of honest self-reflection, you may confess to the mirror that
the thousand cuts metaphor applies. That any of the above scenarios were likely
the product of corner-cuts, often near-invisible to the naked eye in the moment.
Corner-cuts that added up&amp;mdash;nay, &lt;em>compounded&lt;/em>&amp;mdash;over time; slowly as band-aids,
then as stitches and casts, and then suddenly as gangrene. And maybe the whole
thing died of those cuts, or continued as a barely alive entity until someone
had the heart to pull the plug (or offer a bail out).&lt;/p>
&lt;p>You may even confess that maybe, just &lt;em>maybe&lt;/em>, the job of assuring the goodness
of a product belongs to &lt;em>every function involved in the product&amp;rsquo;s life&lt;/em>.&lt;/p>
&lt;h2 id="why">Why?&lt;/h2>
&lt;p>Suppose we model a traditional software production workflow, i.e. Analysis -&amp;gt;
Product requirements -&amp;gt; UX/Design -&amp;gt; Development -&amp;gt; &amp;ldquo;QA&amp;rdquo; -&amp;gt; Production.&lt;/p>
&lt;p>Such a strictly linear model is common in the software industry at large.
This is what it translates to in terms of time, complexity, costs, and risks.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"> ^ Feedback
Analysis -&amp;gt; Product -&amp;gt; UX/Design -&amp;gt; Dev -&amp;gt; &amp;#34;QA&amp;#34; -&amp;gt; Prod --./--&amp;gt; arrives
/ too late
/-
/-
/- ^
/-- | Price of fixing
/-- | errors and
/--- ^ | corner cuts.
/--- | |
/---- ^ | | ~ AND/OR ~
/---- | | | Compounding of
/------ ^ | | | software debt.
/-------- | | | |
---------- ^ | | | | ~ AND/OR ~
^ | | | | | Increasing odds
| | | | | | of being wrong.
---+--------------+------------+----------+-------+-----+----------------&amp;gt;
Time, Complexity, Sunk costs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Visualising a linear workflow this way suggests some things:&lt;/p>
&lt;ul>
&lt;li>All the risk is actually front-loaded at the Analysis stage. If that is
wrong, then everything is wrong.&lt;/li>
&lt;li>The workflow looks linear, but has a compounding growth debt/risk profile.&lt;/li>
&lt;li>By tasking a single group with &amp;ldquo;assuring&amp;rdquo; product quality, we maximize our
odds of being too wrong too late, as well as of entirely failing to spot
bad news.&lt;/li>
&lt;/ul>
&lt;p>What&amp;rsquo;s not obvious from the picture is that the risk is rooted in &lt;em>feedback
delays&lt;/em>. Weak signals die when the deliver pressure is high.&lt;/p>
&lt;p>Our death-by-cuts risk profile will look the same, if the workflow is strictly
linear as depicted above. It doesn&amp;rsquo;t matter if we do it slowly in big batches
over months, or faster as smaller batches over days. Small linearised batches
may even worsen the aggregate risk profile, such as when market feedback loops
are delayed or discontinuous. The smaller the batch, the more likely it is
that feedback about several batches ago gets to us now. Such delayed feedback
tends to severely disrupt strictly linear flows.&lt;/p>
&lt;p>The above picture is also incomplete. For the full story, we need to talk
deeply about systems (a longer conversation, for another day). We can make a
small start by doing scenarios. Consider points on a product spectrum, ways
to destroy/create quality, and what might help us go from worse to better?&lt;/p>
&lt;h2 id="is-it-different-for-different-kinds-of-products">Is it different for different kinds of products?&lt;/h2>
&lt;p>Suppose we contrast two typical ends of the product spectrum defined by
primary customer. Which one risks death by a thousand cuts?&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Trait&lt;/th>
&lt;th>Enterprise Product&lt;/th>
&lt;th>Consumer Product&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Key growth metric&lt;/td>
&lt;td>Revenue Growth&lt;/td>
&lt;td>User Growth&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Key sales driver&lt;/td>
&lt;td>Referrals + executive credibility&lt;/td>
&lt;td>Referrals + Friends-and-family experiences&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Customer risk&lt;/td>
&lt;td>High risk/reward per account&lt;/td>
&lt;td>Tiny unit economics per account&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Contract risk&lt;/td>
&lt;td>SLAs with crippling penalties&lt;/td>
&lt;td>1 EULA / ToS that users don&amp;rsquo;t read&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>etc &amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Well, here&amp;rsquo;s the thing. Not only does all software mutate, we &lt;em>also&lt;/em> end up
performing all kinds of deep surgery on the &lt;em>organisation&lt;/em> that produces it.
The whole thing&amp;mdash;product and org&amp;mdash;is &lt;em>simultaneously&lt;/em> flexed, reconfigured,
and even totally redesigned in-place with rapidity that is very uncommon in
other industries. Why? Because software fundamentally is peoples' thoughts
being played on repeat.&lt;/p>
&lt;p>So however we break it down, the common theme is this. Every hotfix is a cut.
Every complaint is a cut. Every app crash is a cut. Every service outage is
a cut. And so on. Each cut heals slowly and destroys Quality and value(ation).&lt;/p>
&lt;h2 id="how-to-destroy-quality">How to destroy Quality?&lt;/h2>
&lt;p>It&amp;rsquo;s useful to come up with ways to destroy quality, so that we may contrast
those with ways to generate quality. I&amp;rsquo;ve seen and heard all of the following
in work life so far (hopefully without actively perpetrating them, but memory
is a fickle beast).&lt;/p>
&lt;ul>
&lt;li>Misconstrue and mislabel Software Testing as Quality Assurance. Testing is
&lt;em>not&lt;/em> &amp;ldquo;Quality Assurance&amp;rdquo;.&lt;/li>
&lt;li>Ostensibly make all teams responsible for their &amp;ldquo;QA&amp;rdquo;, which really means
make the least experienced people do it day-to-day.&lt;/li>
&lt;li>Create a culture where it&amp;rsquo;s normal to say things like this):
&lt;ul>
&lt;li>&amp;ldquo;Hey I&amp;rsquo;m adding this to the sprint. It&amp;rsquo;s a small thing, so let&amp;rsquo;s not slip
our deadline.&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;Testing is boring.&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;We&amp;rsquo;ll fix it if customers complain.&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;Who the f*#$ wrote this code?&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;Ah yes, those are known flaky tests. Just re-trigger the build.&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;You don&amp;rsquo;t know your job. Ship this.&amp;rdquo; (This one stung. I&amp;rsquo;ll tell you over
beer/coffee :).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ensure designers, developers, and testers work on tasks and priorities set by others.&lt;/li>
&lt;li>Ensure someone catches the blame for mistakes.&lt;/li>
&lt;li>Set up incentives to make departments compete with each other.&lt;/li>
&lt;li>Hire a Vogon or a Darth Vader CEO.&lt;/li>
&lt;li>Further &lt;a href="https://danluu.com/wat/">normalise all kinds of deviance&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>This was just a shortlist of things I recalled while writing this post. Think
up as many ways as you can. #protip for inspiration: read CIA&amp;rsquo;s now-declassified
&lt;a href="https://www.gutenberg.org/files/26184/page-images/26184-images.pdf">Simple Sabotage Field Manual&lt;/a>.
Pay special attention to part 11: &lt;em>General Interference with Organisations
and Production&lt;/em>.&lt;/p>
&lt;h2 id="how-to-create-quality">How to create Quality?&lt;/h2>
&lt;p>One clue is to &lt;em>not&lt;/em> do quality-destroying things. Another is to do the &lt;em>inverse&lt;/em>
of quality-destroying things (e.g. share know-how instead of hoarding it.)
A third is to notice whether high-quality product producing organisations have
any common traits (they do). Most important, perhaps, is to understand that
there is no formula for how to acquire those traits.&lt;/p>
&lt;p>To design and build high quality software products, it is imperative to design
and build high quality organisation-wide systems and culture. We have many
tools, frameworks, fundamental ideas at our disposal. But no &amp;ldquo;best practices&amp;rdquo;
process or methodology or &amp;ldquo;one weird trick&amp;rdquo; style intervention can fix broken
systems and broken people.&lt;/p>
&lt;p>The &amp;ldquo;way&amp;rdquo; has to be co-evolved:&lt;/p>
&lt;ul>
&lt;li>by collaborative stakeholders,&lt;/li>
&lt;li>spread across the org,&lt;/li>
&lt;li>appropriate to the org&amp;rsquo;s unique context,&lt;/li>
&lt;li>along with customers, partners, and the immediate ecosystem.&lt;/li>
&lt;/ul>
&lt;p>This is universally a very difficult process, with challenges surprisingly
similar to what it takes to recover fitness after a year of slacking off. It
requires mindset, leadership, and persistent holistic intelligent &lt;em>eval/apply&lt;/em>
behaviour. And all of that derives from &lt;em>perspective&lt;/em>.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;&lt;em>Perspective is worth 80 IQ points.&lt;/em>&amp;rdquo;&lt;/p>
&lt;ul>
&lt;li>Alan Kay&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>So, if we are to chart a course from Worse Quality to Better Quality, then it
must be our first duty to purposely get really uncomfortable by seeking out
new-to-us, diverse, status-quo-challenging perspective. And &amp;hellip;&lt;/p>
&lt;h2 id="the-first-skill-is-to-learn-to-suffer-constructively-dot">The first skill is to learn to suffer constructively.&lt;/h2>
&lt;p>We suffer, you and I.&lt;/p>
&lt;p>It is inevitable. Yet, it is also why life flourishes. &lt;em>&amp;ldquo;Why are we suffering?&amp;quot;&lt;/em>
is a great discussion to have, because constructive suffering yields quality
outcomes.&lt;/p>
&lt;p>OK, back to the real world&amp;hellip;&lt;/p>
&lt;p>The path to recovering a &lt;em>previous&lt;/em> fitness peak after a year of slacking off
is filled with sore muscles, cursing at the alarm clock, far too many days of
being a generally irritable snappy person, and a constant mental battle against
mainlining deliciously easy instant gratification. It gets harder before it
gets easier. Then we reach the top of the previous S-curve. And we must begin
the cycle again, to climb the next one.&lt;/p>
&lt;p>We are very fortunate.&lt;/p>
&lt;p>Fellow sufferers have been fostering quality-generative conversation and change
all around us. We have access to a growing body of top-notch industry research
&lt;em>and&lt;/em> experience reports. Without exaggerating, very many of these lessons
have been paid for in tears, blood, lives. Let&amp;rsquo;s augment our intuitions with
these power tools. Those hard-won &lt;em>80 extra IQ points&lt;/em> are ours for the taking.&lt;/p>
&lt;p>Some selected resources.&lt;/p>
&lt;p>Many inputs have shaped my thinking about Quality (well, all the things,
because everything is connected); people, events, books, lectures etc. If
you&amp;rsquo;re wondering where to go. These are not prescriptions, but a sort of
sampling platter. Triggers for your own searches. Please send me more!&lt;/p>
&lt;p>Systems:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.chelseagreen.com/product/thinking-in-systems/">Thinking in Systems&lt;/a>
is a great primer.&lt;/li>
&lt;/ul>
&lt;p>Software complexity:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://shaffner.us/cs/papers/tarpit.pdf">Out of The Tar Pit&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cgl.ucsf.edu/Outreach/pc204/NoSilverBullet.html">No Silver Bullet&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://ecoplexity.org/files/uploads/Simon.pdf">The Architecture of Complexity&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=LKtk3HCgTa8&amp;amp;list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr&amp;amp;index=18">Simple made Easy&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Failure:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.researchgate.net/publication/228797158%5FHow%5Fcomplex%5Fsystems%5Ffail">How Complex Systems Fail&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.amazon.in/Human-Error-James-Reason/dp/0521314194/">Human Error&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://safetydifferently.com/">Safety Differently&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Doing Together:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/13629.The%5FMythical%5FMan%5FMonth">The Mythical Man Month&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/6667514-the-checklist-manifesto">The Checklist Manifesto&lt;/a>&lt;/li>
&lt;li>Critical Chain Project Management
(&lt;a href="https://www.goodreads.com/book/show/113934.The%5FGoal">The Goal&lt;/a> is a fine place
to start, if you have no idea what CCPM is.)&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/1501427.Managing%5FThe%5FDesign%5FFactory">Managing the Design Factory&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/6278270-the-principles-of-product-development-flow">The Principles of Product Development Flow&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/">Mature Optimization&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.kaner.com/pdfs/GoodTest.pdf">What is a Good Test Case?&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Oneself (heavily biased, because I identify as a software programmer):&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/">On Being a Senior Engineer&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.arl.wustl.edu/projects/fpx/research/HowToBeAProgrammer.pdf">How to Be A Programmer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/213233.Better">Better: A Surgeon&amp;rsquo;s Notes on Performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=f84n5oFoZBc&amp;amp;list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr&amp;amp;index=9">Hammock Driven Development&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&amp;ldquo;Practical philosophy&amp;rdquo;, for lack of better words:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=QCwqnjxqfmY&amp;amp;list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr&amp;amp;index=19">Design, Composition, Performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/324750.High%5FOutput%5FManagement">High Output Management&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.semanticscholar.org/paper/Destruction-and-Creation-Boyd/483359fa9420efcddde5a17da597f462c2a788c2">Destruction and Creation&lt;/a>&lt;/li>
&lt;li>Stuff from &lt;em>&lt;a href="https://www.theschooloflife.com/">The School of Life&lt;/a>&lt;/em> (corny name,
yes, but give it a chance :)&lt;/li>
&lt;/ul>
&lt;p>I recently discovered Gene Kim&amp;rsquo;s podcast, &lt;a href="https://itrevolution.com/the-idealcast-podcast/">The Idealcast&lt;/a>.
Gene is gathering fantastic people and resources in one place. Definitely have
a look-see.&lt;/p>
&lt;h2 id="caveats-mea-culpa-etc-dot">Caveats, mea culpa, etc.&lt;/h2>
&lt;p>I am very much a work-in-progress, and this post is my current intuition.&lt;/p>
&lt;p>The post is heavily coloured by many witting and uwitting eval/apply loops
comprised of personal failures, ignorant mistakes, and occasional wins, over
the last about 20 years of professional life. And well, life life. It is also
informed by the good fortune of having learned by working with people who
understand the world far better than I do. And obviously a lot of reading,
thinking, talking, frequently &amp;ldquo;in anger&amp;rdquo; after having hit walls and obstacles.&lt;/p>
&lt;p>So please take what is useful, and discard the rest.&lt;/p>
&lt;p>May the source be with you _\\//&lt;/p></content></item><item><title>How To Be a Totally Natural Conference Speaker?</title><link>/posts/how-to-give-a-conference-talk/</link><pubDate>Thu, 03 Feb 2022 01:56:02 +0530</pubDate><guid>/posts/how-to-give-a-conference-talk/</guid><description>&lt;p>A friend and I were chatting recently about speaking at conferences. Now this
person is smart and I&amp;rsquo;ve learned a thing or two from his in-depth engineering
blog posts. Yet there he was, telling me I&amp;rsquo;m so super good at communicating
ideas (implying he&amp;rsquo;s &lt;em>not&lt;/em> so super good), and besides he has nothing to say
worthy of a conference talk.&lt;/p>
&lt;p>Huh?!&lt;/p>
&lt;p>Uncalled for praise is jarring, but I took it&amp;mdash;2021 was heartless, OK? Still,
the subtext of &lt;em>magic&lt;/em> bothered me. That I am somehow special. A born natural.
So I told him my secret formula. And now I&amp;rsquo;m telling you.&lt;/p>
&lt;p>Here is how to be a totes natural conference speaker&amp;hellip;&lt;/p></description><content>&lt;p>A friend and I were chatting recently about speaking at conferences. Now this
person is smart and I&amp;rsquo;ve learned a thing or two from his in-depth engineering
blog posts. Yet there he was, telling me I&amp;rsquo;m so super good at communicating
ideas (implying he&amp;rsquo;s &lt;em>not&lt;/em> so super good), and besides he has nothing to say
worthy of a conference talk.&lt;/p>
&lt;p>Huh?!&lt;/p>
&lt;p>Uncalled for praise is jarring, but I took it&amp;mdash;2021 was heartless, OK? Still,
the subtext of &lt;em>magic&lt;/em> bothered me. That I am somehow special. A born natural.
So I told him my secret formula. And now I&amp;rsquo;m telling you.&lt;/p>
&lt;p>Here is how to be a totes natural conference speaker&amp;hellip;&lt;/p>
&lt;hr>
&lt;ol>
&lt;li>
&lt;p>Mope around &lt;em>all the time&lt;/em> about how you don&amp;rsquo;t &lt;em>really&lt;/em> know [Topic X].
Sooner or later an opportune Call For Proposals will slide into your Twitter
stream or Slack or Discord. (It is very important to mope around &lt;em>all&lt;/em> the
time. Also, please cultivate several topics to mope around about. This
guarantees that every moment is an opportune moment to propose a talk.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Foolishly jump at the chance. Write a proposal to talk (or teach a class)
about said [Topic X].&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Congratulations! You have now made a public commitment, and opted into the
specter of falling flat on your face before all and sundry. Let the feeling
sink in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When it does, panic and feel obligated to start making something already,
because what if you can&amp;rsquo;t actually figure out [Topic X]? Because then you
must recuse yourself before it&amp;rsquo;s too late. Proceed to have trouble starting,
toss and turn in bed many nights in a row, and finally start typing
something&amp;mdash;anything&amp;mdash;into your computer.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Make and trash at least 3 shitty first drafts. Feel like an impostor and
&lt;em>almost&lt;/em> withdraw your proposal as many times.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If your proposal gets selected, GOTO 3 and start over. If it doesn&amp;rsquo;t, GOTO 8.
If you are back here after the do-over, GOTO 7. If you got here and you don&amp;rsquo;t
know why, well that&amp;rsquo;s because GOTOs are Considered Harmful.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Somehow arrive at a version you don&amp;rsquo;t totally hate. Then make minor edits
and tweaks for days and days until you&amp;rsquo;re fed up. (Actually you are fed up
because the talk is just a week away by now, and you haven&amp;rsquo;t rehearsed even
once.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Corral friends who are way smarter than you, and get them to hear you out.
(Actually there&amp;rsquo;s a step zero. Get very lucky in life and land up with such
friends).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Listen to them and don&amp;rsquo;t make any more edits.&lt;/em> Seriously. Try to rehearse.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Second-guess yourself 48 hours before your talk, mid-way through your first
&lt;em>actual&lt;/em> rehearsal. Proceed to commit the cardinal sin of refactoring the
whole bloody thing &amp;ldquo;before shipping to production&amp;rdquo;, because apparently it&amp;rsquo;s
all completely &lt;em>wrong&lt;/em> now. Don&amp;rsquo;t sleep much, of course.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wake up with a start on D-day. Curse at yourself in the mirror. Drink an
unconscionable quantity of coffee, while feverishly reviewing your material.
Entirely miss the &amp;ldquo;hallway track&amp;rdquo; and fail to make new friends or to have
a good time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Somehow make it to the other end of your presentation. It&amp;rsquo;s OK, everybody
forgets half the material (especially those painstakingly crafted turns of
phrase and clever asides), and still somehow runs out of time. Spend the
rest of the day in a growing fog because the adrenaline wore off, but the
caffeine didn&amp;rsquo;t, but you&amp;rsquo;re wiped-out from the excitement and sleep-deprived.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Luckily, that also means you forget everything you did on your talk day.
Now you just have to make sure you never ever watch the recording of your
talk, if they publish it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bask in the certain knowledge that you too have become a 100% Totally Natural
Conference Speaker. (As a veteran of this process, I can tell you it works.
Every. Single. Time.)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Jokes apart, it really is like that. There is no magic. Only student syndrome.&lt;/p>
&lt;p>Just remember that you always know more about something than someone, and/or
almost certainly have a &lt;em>different, unique take&lt;/em> on something that you believe
to be common knowledge. Not infrequently, I find someone&amp;rsquo;s interpretation of
something I am intimately familiar with, and the interpretation remarkably
changes how I see/feel/understand/relate with the thing. (Frequently it does
not, and it&amp;rsquo;s rubbish, but that&amp;rsquo;s fine. I&amp;rsquo;m not the one for that one.)&lt;/p>
&lt;p>Why? Well because no topic is objectively too small or too silly or too useless,
for the right audience in the right context.
Look no further than &lt;a href="https://bangbangcon.com/program.html">!!Con&lt;/a>, for example.
People have i!!ega! amounts of fun there!&lt;/p>
&lt;p>So do yourself a favour. Allow yourself chances to suggest your [Topic X] to
the world, even when it&amp;rsquo;s just your take on your favourite thing that maybe
everybody already knows. Because maybe the world will say&amp;hellip;&lt;/p>
&lt;p>&amp;ldquo;Sure, why not?&amp;rdquo;.&lt;/p></content></item><item><title>Technical Debt is really Software Debt. And it's a AAA-rated CDO.</title><link>/posts/software-debt/</link><pubDate>Thu, 20 Jan 2022 09:43:26 +0530</pubDate><guid>/posts/software-debt/</guid><description>&lt;p>I&amp;rsquo;ve long struggled with the &lt;em>Technical Debt&lt;/em> metaphor. It was immediately
useful when I first heard it. I still think it is useful, albeit as a starting
point. The more I worked with software, the more infuriatingly incomplete it
started to feel.&lt;/p>
&lt;p>Some years ago I found myself in a rabbit hole, researching the 2008 financial
crisis. It reminded me of other insane stories like Knight Capital, and further
back, about how Enron imploded (because Enron India&amp;rsquo;s meltdown was shocking,
and destructive. And because a dear friend, in his past life, was on the team
at Lehman Bros. that structured financing for Enron India. So come 2008, when
Lehman imploded, I got to hear about the hard-chargin' super-leveraged
risk-takin' days from someone who was there in the early part of the so-called
Dick Fuld era. It was all very fascinating, but I digress&amp;hellip;).&lt;/p>
&lt;p>Down in the rabbit hole, a slow realization began.&lt;/p>
&lt;p>One source of my unease is that I think discussions of Technical Debt don&amp;rsquo;t
sufficiently examine the nature of the &lt;em>Risk&lt;/em> of the underlying challenge.
The other is that the concept skews and pigeonholes the &lt;em>Responsibility&lt;/em> part
of the underlying challenge. Here&amp;rsquo;s what I&amp;rsquo;m thinking.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#framing-pigeonholes-responsibility-dot">Framing pigeonholes Responsibility.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-packages-risk-dot-we-need-better-mental-models-of-that-risk-dot">Software debt packages risk. We need better mental models of that risk.&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#software-debt-risk-perception-is-muddied-by-personal-bias-dot">Software debt risk perception is muddied by personal bias.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-rooted-in-complexity-dot-we-abhor-complexity-dot">Software debt is rooted in complexity. We abhor complexity.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-inevitable-dot">Software debt is &lt;em>inevitable&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-always-compounds-dot">Software debt always &lt;em>compounds&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-layered-dot">Software debt is &lt;em>layered&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-networked-dot">Software debt is &lt;em>networked&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-like-a-complex-opaque-financial-derivative-dot">Software debt is like a complex opaque financial derivative.&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#1-000-words-in-1-picture-xkcd-summarizes-it-best-dot">1,000 words in 1 picture: xkcd summarizes it best.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#stories-of-debt-and-destruction">Stories of Debt and Destruction&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>Note: In this post, I have software organisations in mind, viz. ones that exist
mainly because of the software they make and ship (whether priced or gratis).&lt;/p></description><content>&lt;p>I&amp;rsquo;ve long struggled with the &lt;em>Technical Debt&lt;/em> metaphor. It was immediately
useful when I first heard it. I still think it is useful, albeit as a starting
point. The more I worked with software, the more infuriatingly incomplete it
started to feel.&lt;/p>
&lt;p>Some years ago I found myself in a rabbit hole, researching the 2008 financial
crisis. It reminded me of other insane stories like Knight Capital, and further
back, about how Enron imploded (because Enron India&amp;rsquo;s meltdown was shocking,
and destructive. And because a dear friend, in his past life, was on the team
at Lehman Bros. that structured financing for Enron India. So come 2008, when
Lehman imploded, I got to hear about the hard-chargin' super-leveraged
risk-takin' days from someone who was there in the early part of the so-called
Dick Fuld era. It was all very fascinating, but I digress&amp;hellip;).&lt;/p>
&lt;p>Down in the rabbit hole, a slow realization began.&lt;/p>
&lt;p>One source of my unease is that I think discussions of Technical Debt don&amp;rsquo;t
sufficiently examine the nature of the &lt;em>Risk&lt;/em> of the underlying challenge.
The other is that the concept skews and pigeonholes the &lt;em>Responsibility&lt;/em> part
of the underlying challenge. Here&amp;rsquo;s what I&amp;rsquo;m thinking.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#framing-pigeonholes-responsibility-dot">Framing pigeonholes Responsibility.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-packages-risk-dot-we-need-better-mental-models-of-that-risk-dot">Software debt packages risk. We need better mental models of that risk.&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#software-debt-risk-perception-is-muddied-by-personal-bias-dot">Software debt risk perception is muddied by personal bias.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-rooted-in-complexity-dot-we-abhor-complexity-dot">Software debt is rooted in complexity. We abhor complexity.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-inevitable-dot">Software debt is &lt;em>inevitable&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-always-compounds-dot">Software debt always &lt;em>compounds&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-layered-dot">Software debt is &lt;em>layered&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-networked-dot">Software debt is &lt;em>networked&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-like-a-complex-opaque-financial-derivative-dot">Software debt is like a complex opaque financial derivative.&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#1-000-words-in-1-picture-xkcd-summarizes-it-best-dot">1,000 words in 1 picture: xkcd summarizes it best.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#stories-of-debt-and-destruction">Stories of Debt and Destruction&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>Note: In this post, I have software organisations in mind, viz. ones that exist
mainly because of the software they make and ship (whether priced or gratis).&lt;/p>
&lt;hr>
&lt;h2 id="framing-pigeonholes-responsibility-dot">Framing pigeonholes Responsibility.&lt;/h2>
&lt;p>I find the &lt;em>Technical&lt;/em> part problematic because it is too narrow a context,
and that narrow framing leads to real trouble in software orgs.&lt;/p>
&lt;p>It inadvertently paints a small set of people as the &amp;ldquo;owners&amp;rdquo; of the &amp;ldquo;debt&amp;rdquo;,
which is not untrue, but it is incomplete, and the framing by its construction
inadvertently places the rest of the organisation in the role of creditor.
The framing further pigeonholes our thinking about risk, and causes us to set
up adversarial objectives and communication structures among the organisation&amp;rsquo;s
many functions and layers.&lt;/p>
&lt;p>Narrow framing is bad because software orgs&amp;ndash;especially fast growing ones&amp;ndash;are
always in a state of churn, conflict internally and with the outside world,
and a state of partial failure. Because a running, live software system is
as much a fermenting vat full of culture, opinion, future-thinky bets with
people constantly dipping in for a taste, as it is bit-flippin' transistors
mindlessly following truth tables.&lt;/p>
&lt;p>We have since invented other terms like &amp;ldquo;organisational&amp;rdquo; debt to prod people
to think more holistically. I prefer to say &amp;ldquo;software debt&amp;rdquo;, and mean it to
apply to the whole of any given software organisation, because of how I have
come to think of the &lt;em>debt&lt;/em> bit of software things (and org things in general).&lt;/p>
&lt;p>Sadly, narrow framing abounds, and we end up producing malfunctioning software
organisations far too frequently.&lt;/p>
&lt;p>And so, far too many learn what it feels like to try and get the big bank to
refinance that home loan when the world suddenly became hostile to them, and
they were too little, too alone, and too powerless to engineer a central
government bail out. The best they (we) can do is to vote for a government
that hopefully reforms policy and simplifies tax regimes and does generally
smart stuff such that more people come out of poverty, fewer sink back into
it, and more people achieve prosperity. Become a &amp;ldquo;Generative&amp;rdquo; type of org,
in terms of Westrum&amp;rsquo;s typology of organisational cultures.&lt;/p>
&lt;p>At the same time, personal responsibility is not waived away. The least we
(they) can do is to not be foolish in the first place. Resist those easy
temptations. Not bite chunks we can&amp;rsquo;t chew. Not eat what we can&amp;rsquo;t digest.&lt;/p>
&lt;p>Say No To (Software) Debts.&lt;/p>
&lt;h2 id="software-debt-packages-risk-dot-we-need-better-mental-models-of-that-risk-dot">Software debt packages risk. We need better mental models of that risk.&lt;/h2>
&lt;p>Within the frame of &amp;ldquo;technical&amp;rdquo; debt, we frequently discuss the &amp;ldquo;debt&amp;rdquo; in terms
of code quality (cleanliness, understandability, efficiency, maintainability),
and architectural quality (the goodness of domain models, core abstractions,
application boundaries and interfaces etc.).&lt;/p>
&lt;p>This is a sort of human indebtedness, as in, are we being kind to each other,
and helping each other be productive? Because if we are productive, then we
will get more done with less effort (leverage), be able to ship more, faster
(throughput), and respond to market needs more creatively (innovate).&lt;/p>
&lt;p>These are undeniably important considerations. But&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>they are certainly not firewalled off from the rest of the organisation.
For example, to a good first-order approximation, we tend to &amp;ldquo;ship our
organisational structure&amp;rdquo;.&lt;/li>
&lt;li>they are second-order outcomes of a more fundamental kind of thinking, viz.
one about risks and associated trade-offs.&lt;/li>
&lt;/ul>
&lt;p>So I think it&amp;rsquo;s worth framing a notion of &lt;em>Software&lt;/em> Debt, to re-scope the
discussion at an organisational level, and to find a better mental model of
the risk packaged by the debt.&lt;/p>
&lt;h3 id="software-debt-risk-perception-is-muddied-by-personal-bias-dot">Software debt risk perception is muddied by personal bias.&lt;/h3>
&lt;p>Part of my unease, and I suspect yours, stems from how the idea of debt is
anchored in our heads.&lt;/p>
&lt;p>We struggle with this bias when pricing things. We sell to our wallet. If we
are used to buying most things for 10 tokens, we balk at the idea that someone
else is fine charging 100 tokens for basically the same things, and that others
are fine&amp;mdash;delighted, even&amp;mdash;to fork over the requested quantity of tokens.&lt;/p>
&lt;p>Likewise, the word &amp;ldquo;debt&amp;rdquo; is strongly anchored to a &lt;!-- raw HTML omitted -->personal&lt;!-- raw HTML omitted --> sense of financial
debt; our &lt;del>credit&lt;/del> loan cards, home loans, equated monthly installments. Small,
familiar ideas. Safe-sounding numbers. A warm feeling absorbed and internalised
through delightfully tempting messages of better lives, buttressed by the
approval of friends and family when we get that car or house or desirable object.&lt;/p>
&lt;p>Given the sheer amount of personal financial debt, our frequency of involvement
with it, and the normalisation of it being &lt;em>fine&lt;/em> to always be indebted to one
or more financiers, I suspect this anchoring bias is widespread. And it clouds
our risk perception when thinking about software debt.&lt;/p>
&lt;h3 id="software-debt-is-rooted-in-complexity-dot-we-abhor-complexity-dot">Software debt is rooted in complexity. We abhor complexity.&lt;/h3>
&lt;p>Complexity is to software what mass is to a rocket; the hard limiting factor of
growth in any dimension you choose to measure (shipping velocity, headcount,
revenue, cash flow, account expansion; anything). This is the sort of thing that
demands tree-recursive, networked thinking we are not good at doing explicitly
and deliberately. Something that our education actively disables by drilling
us to think in simplistic linear terms in which correlation amounts to causation.&lt;/p>
&lt;p>So much so that we have a visceral negative reaction to the self-control and
effort needed to think hard, think deep, and think persistently with focus,
constantly refining, testing, challenging, updating our mental models of reality.
You just had a visceral negative reaction simply by reading this description,
didn&amp;rsquo;t you?&lt;/p>
&lt;h3 id="software-debt-is-inevitable-dot">Software debt is &lt;em>inevitable&lt;/em>.&lt;/h3>
&lt;p>Complexity is inevitable. Thus risk is inevitable. Thus debt is inevitable.&lt;/p>
&lt;p>Like rocket mass, the more we scale it, the more we pack in, and the more we
make it do, the more complexity we accrue. But also like rocket mass, we &lt;em>want&lt;/em>
some kinds of complexity; the kind that is at the heart of wherever it is that
we aim to go. That is, we want to take on essential risks, but ruthlessly
reject non-essential risks.&lt;/p>
&lt;p>This is not easy at all, but it is a critical function of people making software,
especially because it is &lt;em>so easy&lt;/em> to create complexity. Put a network between
two single-core computers, and boom, you just made a distributed system fraught
with undecidable problems. Add mutable state to your program, and boom, now
you have to &lt;em>also&lt;/em> remember the past to make sense of the present. Add an extra
CPU thread to your two computers and you have a stateful concurrent/parallel
networked system on you hands. And now you have to think in non-sequential
time about distributed problems with multiple pasts and multiple futures.&lt;/p>
&lt;p>Most of us don&amp;rsquo;t &lt;em>have&lt;/em> to, because we benefit&amp;ndash;often unwittingly&amp;ndash;from &lt;em>very&lt;/em>
generous error budgets and low-impact risks. But make no mistake, &lt;em>someone&lt;/em>
had to, and someone &lt;em>did&lt;/em>, which is why you and I can ride the coattails of
risk curves all our lives and be paid handsomely for their troubles.&lt;/p>
&lt;h3 id="software-debt-always-compounds-dot">Software debt always &lt;em>compounds&lt;/em>.&lt;/h3>
&lt;p>In simple terms, all debt reduces down to three key components: A principal
amount, a rate of interest, and terms of payment (including repayment period,
cadence etc.). The combination of interest and terms price the risk for both
parties.&lt;/p>
&lt;p>In software terms, we may think of each piece of tech in the stack as raw mass,
adding to the principal amount. The more we add, the more we risk, even if
the rate of interest remains constant. But really, each decision to add or
remove items from &lt;!-- raw HTML omitted -->any&lt;!-- raw HTML omitted --> part of the system changes the principal &lt;em>and&lt;/em> the
rate of interest &lt;em>and&lt;/em> the repayment terms.&lt;/p>
&lt;p>This alone should cause sleepless nights. Compounding debt grows and grows.
Slowly, creepingly at first, and then very fast. And suddenly you lose everything.&lt;/p>
&lt;h3 id="software-debt-is-layered-dot">Software debt is &lt;em>layered&lt;/em>.&lt;/h3>
&lt;p>Because software parts compose into software &amp;ldquo;stacks&amp;rdquo; and hierarchies, and
each part mutates/evolves up and down the towers.&lt;/p>
&lt;p>Say we only ever have a fixed set of software parts&amp;ndash;say one kind of server-side
application, backed by one kind of database, serving one kind of client,
via one kind of server, on one kind of operating system. Sooner or later,
each part is guaranteed to update in-place, and/or do more work, thus forcing
a change in their operating environment.&lt;/p>
&lt;p>The database gets more data. The application handles more edge cases. The
server balances more concurrent load. The OS gets security patches. The
clients want to do more so everything accrues more features. On and on,
mutating forever, exhibiting accretion, sedimentation, erosion, and tectonic
upheavals. Not to mention the parallel layers of brains of the people making
decisions about these things; the Top Dog, the Fresh Recruit, and the squishy
organisational cake between those two.&lt;/p>
&lt;figure class="left" >
&lt;img src="clojure-codebase-introduction-retention-code.png" />
&lt;figcaption class="center" >Figure 1: Clojure codebase--Introduction and retention of code. Rich Hickey. 2020. A History of Clojure.&lt;/figcaption>
&lt;/figure>
&lt;p>See also: &lt;a href="https://erikbern.com/2016/12/05/the-half-life-of-code.html">The half-life of code &amp;amp; the Ship of Theseus&lt;/a>&lt;/p>
&lt;h3 id="software-debt-is-networked-dot">Software debt is &lt;em>networked&lt;/em>.&lt;/h3>
&lt;p>Because software itself is networked, even inside applications. There are call
graphs, object hierarchies, and effects-at-a-distance. These often interact
in ways that surprise us. Small &lt;em>local&lt;/em> changes can turn into literal chain
reactions of events that have stunningly large impacts on the state of the
physical world we walk in. The meltdown of Knight Capital stands out starkly
as an example of unmitigated, un-hedged software debt.&lt;/p>
&lt;p>It goes way beyond in-app networks, of course, because we have come to depend
on global software supply chains. These are quite unlike logistical supply
chains, as:&lt;/p>
&lt;ul>
&lt;li>they demand almost no capital to participate as creator and/or as consumer,&lt;/li>
&lt;li>they place no barrier on becoming a critical node (aheam, left-pad), and&lt;/li>
&lt;li>they afford no reaction time when things go bad. Failures and compromises
affect the world near-instantaneously, at the speed information travels.&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s insane that we have become habituated to the idea that adding a single
library to one&amp;rsquo;s project can pull in tens or even hundreds of transitive
dependencies, and that&amp;rsquo;s &lt;em>fine&lt;/em>.&lt;/p>
&lt;p>I&amp;rsquo;m writing this in the wake of the aftermath of the disclosure of the log4j
zero-day vulnerability. But this is only a recent example of just one kind
of networked risk.&lt;/p>
&lt;p>With managed services we effectively add one more level to the &lt;em>Inception&lt;/em>
world of our software organisation. We outsource nice big chunks of supply
chain risk management, but we in-source a &lt;em>different&lt;/em> risk of depending
&lt;em>critically&lt;/em> on entities that we do not control and cannot fix if they fail.&lt;/p>
&lt;p>Not to mention the fact that change ripples through the parallel yet deeply
enmeshed dimensions of cyberspace and meatspace. Code running on hardware is
inexorably tied to concepts running in wetware. Of course, at this level of
abstraction, the notion applies to any field of human endeavour. Yet, it is
so much more true of software. Because software is essentially the thoughts
of people being played on repeat.&lt;/p>
&lt;figure class="left" >
&lt;img src="STELLAReportFinalFinal_Coping_With_Complexity.png" />
&lt;figcaption class="center" >Figure 2: "The System". Page 11, Report from the SNAFUcatchers Workshop on Coping With Complexity. a.k.a. the "Stella report".&lt;/figcaption>
&lt;/figure>
&lt;p>See also: the &lt;a href="https://drive.google.com/file/d/0B7kFkt5WxLeDTml5cTFsWXFCb1U/view?resourcekey=0-0s0iD6n-ctyaB6cGlw6ogw">Stella Report&lt;/a> found via
John Allspaw&amp;rsquo;s &lt;a href="//itrevolution.com/john-allspaw-how-your-systems-keep-running-day-after-day/">How Your Systems Keep Running Day After Day&lt;/a>.&lt;/p>
&lt;h3 id="software-debt-is-like-a-complex-opaque-financial-derivative-dot">Software debt is like a complex opaque financial derivative.&lt;/h3>
&lt;p>To me, unchecked creation of software debt is exactly analogous to how the
2008 financial crisis came to be. It was wrought of &amp;ldquo;simple&amp;rdquo; debt packaged
and repackage in inscrutable derivative ways, stacked into towers of debt,
where the aggregate collateral backing it looked sound, but which actually
had very shaky foundations, that the abstraction obscured. The crazy thing
is, the trouble at the bottom was apparently sitting around in plain sight,
to terrify anybody who cared to &lt;em>literally walk over&lt;/em> and &lt;em>look&lt;/em> at it. The
current state of our software supply chains look uncomfortably similar,
for example.&lt;/p>
&lt;p>But as it happens, growth forgives all sins. We fall in love with the thrill.
We fail to stay a little paranoid. Our position becomes increasingly leveraged.
The tail risks compound (demand swings, malicious actors, regulatory change,
supply chain exposure, &amp;hellip;), and so do the odds of any one of those risks
exploding in our faces.&lt;/p>
&lt;p>Our system, as in, the integrated networked whole of compute infrastructure,
managed services, libraries, product management, design, operations, sales,
marketing, org strategy start looking like piles of debt obligations. Each
represents part of a promise made to the outside world, and here&amp;rsquo;s the kicker;
our rate of growth is collateral. Small deceleration of growth rates magnify
into large percentage drops of &amp;ldquo;valuation&amp;rdquo; (however it is measured). Since
bad news travels farther and faster than good news, the negative bias tends
to be stronger. We seldom gain value as much, or as quickly, as we devalue.&lt;/p>
&lt;p>So, if we are not ruthlessly pragmatic and strategic about software debt,
you and I will keep accruing the &lt;em>bad risk&lt;/em> kind of debt. One day, at the
least convenient time, the world will come a-calling, demanding what we owe.
And if we can&amp;rsquo;t cough it up, it will take everything away. All moments are
least convenient when that happens.&lt;/p>
&lt;p>Much as I dislike all this doom-speak, I have to acknowledge it is material,
and to side with Andy Grove. Only the paranoid survive.&lt;/p>
&lt;p>The only real hedge we have is the creativity and intelligence of our people.&lt;/p>
&lt;h2 id="1-000-words-in-1-picture-xkcd-summarizes-it-best-dot">1,000 words in 1 picture: xkcd summarizes it best.&lt;/h2>
&lt;p>&lt;img src="https://imgs.xkcd.com/comics/dependency.png" alt="Someday ImageMagick will finally break for good and we&amp;rsquo;ll have a long period of scrambling as we try to reassemble civilization from the rubble.">
&lt;a href="https://xkcd.com/2347">XKCD: Dependency&lt;/a>&lt;/p>
&lt;h2 id="stories-of-debt-and-destruction">Stories of Debt and Destruction&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/danluu/post-mortems">A list of Post-mortems&lt;/a> curated by Dan Luu, Nat Welch and others.&lt;/li>
&lt;li>A list of &lt;em>&amp;ldquo;Events that have the dark debt signature&amp;rdquo;,&lt;/em> in the aforementioned
&amp;ldquo;&lt;em>&lt;a href="https://drive.google.com/file/d/0B7kFkt5WxLeDTml5cTFsWXFCb1U/view?resourcekey=0-0s0iD6n-ctyaB6cGlw6ogw">Stella report&lt;/a>&lt;/em>&amp;rdquo;.
&lt;ul>
&lt;li>Knight Capital, August 2012&lt;/li>
&lt;li>AWS, October 2012&lt;/li>
&lt;li>Medstar, April 2015&lt;/li>
&lt;li>NYSE, July 2015&lt;/li>
&lt;li>UAL, July 2015&lt;/li>
&lt;li>Facebook, September 2015&lt;/li>
&lt;li>GitHub, January 2016&lt;/li>
&lt;li>Southwest Airlines, July 2016&lt;/li>
&lt;li>Delta, August 2016&lt;/li>
&lt;li>SSP Pure broking, August 2016&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></item><item><title>Scale, Value, Systems</title><link>/posts/systems-scale-value/</link><pubDate>Sat, 13 Nov 2021 00:00:00 +0530</pubDate><guid>/posts/systems-scale-value/</guid><description>&lt;p>Creating things is a delicate endeavour, fraught with peril. People struggle
forward through crazy marketplace and environmental complexities just to get
from one day to the other.&lt;/p>
&lt;p>Yet I can&amp;rsquo;t shake off the feeling that we make it harder for ourselves than
it should be. I&amp;rsquo;ve been trying to work out why. There&amp;rsquo;s a lot to unpack. This
post is a start at thinking about it in public. My thinking is coloured by
working in the tech startup scene for these last few years, and rooted in
a small mistake my parents made bringing me up.&lt;/p>
&lt;p>I&amp;rsquo;m going to amble along a wavy line of thought through Story, Metaphor, Model,
and Example. Please join the noodling-over and ambling-off into tangents.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#story-damaging-the-children">Story: Damaging the children&lt;/a>&lt;/li>
&lt;li>&lt;a href="#archetypes-as-metaphor-a-vogon-and-slartibartfast">Archetypes as Metaphor: A Vogon and Slartibartfast&lt;/a>&lt;/li>
&lt;li>&lt;a href="#model-a-picture-is-worth-a-1-000-points">Model: A picture is worth a 1,000 % points&lt;/a>&lt;/li>
&lt;li>&lt;a href="#example-what-s-cooler-than-10-bn-100-bn-dot">Example: What&amp;rsquo;s cooler than 10 Bn? 100 Bn.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#tying-it-together-dot-trying-it-together">Tying it together. Trying it together?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#food-for-thought">Food for thought&lt;/a>&lt;/li>
&lt;li>&lt;a href="#acknowledgments">Acknowledgments&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted --></description><content>&lt;p>Creating things is a delicate endeavour, fraught with peril. People struggle
forward through crazy marketplace and environmental complexities just to get
from one day to the other.&lt;/p>
&lt;p>Yet I can&amp;rsquo;t shake off the feeling that we make it harder for ourselves than
it should be. I&amp;rsquo;ve been trying to work out why. There&amp;rsquo;s a lot to unpack. This
post is a start at thinking about it in public. My thinking is coloured by
working in the tech startup scene for these last few years, and rooted in
a small mistake my parents made bringing me up.&lt;/p>
&lt;p>I&amp;rsquo;m going to amble along a wavy line of thought through Story, Metaphor, Model,
and Example. Please join the noodling-over and ambling-off into tangents.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#story-damaging-the-children">Story: Damaging the children&lt;/a>&lt;/li>
&lt;li>&lt;a href="#archetypes-as-metaphor-a-vogon-and-slartibartfast">Archetypes as Metaphor: A Vogon and Slartibartfast&lt;/a>&lt;/li>
&lt;li>&lt;a href="#model-a-picture-is-worth-a-1-000-points">Model: A picture is worth a 1,000 % points&lt;/a>&lt;/li>
&lt;li>&lt;a href="#example-what-s-cooler-than-10-bn-100-bn-dot">Example: What&amp;rsquo;s cooler than 10 Bn? 100 Bn.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#tying-it-together-dot-trying-it-together">Tying it together. Trying it together?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#food-for-thought">Food for thought&lt;/a>&lt;/li>
&lt;li>&lt;a href="#acknowledgments">Acknowledgments&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="story-damaging-the-children">Story: Damaging the children&lt;/h2>
&lt;p>My parents are deeply systems-oriented thinkers &lt;em>and&lt;/em> doers. Biased to
thoughtful execution; whether short-or-long-range. Connoisseurs of checklists.&lt;/p>
&lt;p>They&amp;rsquo;ve done it all, and then some, with their systems-oriented minds&amp;hellip;
Buying a car, planning a wedding, building warships, running schools and R&amp;amp;D
institutes, organizing large events, helping feed stranded migrant workers,
producing textbooks, caring for their elderly and infirm, helping their
network build lives, teaching their children independence. And I gleefully
imagine, also some top-secret classified stuff my dad can&amp;rsquo;t tell me about,
because then he would have to kill me. (Kid-me read too many spy novels :)).&lt;/p>
&lt;p>At the big-picture level, in this household, keeping an up-to-date &amp;ldquo;death file&amp;rdquo;
is not morbid or fatalist, but a simple plan for &lt;em>after the inevitable&lt;/em>. An
act of care and kindness. At the microscopic level, I cannot recall a single
day growing up, going without a fresh hot meal on the table whether my mom was
home, or away, or sick. Together, they seemingly never missed a beat even against
steep odds, or even if one of them was failing, or was out of commission. And
here I am, barely keeping it together. Apples do fall far from trees.&lt;/p>
&lt;p>They never made the mistake of coddling us, but they did err by wiring us&amp;ndash;my
sibling and I&amp;ndash;with &lt;em>standards&lt;/em> for our actions and output. They failed to stop
at ethical conduct, kindness, and good manners. We had to also pay attention
to detail. Run what-if scenarios. Write things down. Be accountable to our
surroundings and the people in there. Own our successes and failures. In several
cases they had to push us (teenagers gonna teenage). In many others they led
by example.&lt;/p>
&lt;p>They also erred by letting us rifle through Daddy&amp;rsquo;s Awesome Cabinet of Books
and letting us borrow action-packed thrillers like &amp;ldquo;How Things Work&amp;rdquo; (Volumes 1
&lt;em>and&lt;/em> 2), and &amp;ldquo;Systems in Action&amp;rdquo;. Maybe my sibling was spared, I don&amp;rsquo;t know.
I certainly wasn&amp;rsquo;t. You&amp;rsquo;re a boy. And you worship your dad. And you want to be
like him. So damn straight you will devour daddy&amp;rsquo;s books. But you&amp;rsquo;re an 8th
grader, and can&amp;rsquo;t know better. To what extent that material might infiltrate
your brain. And the many ways that influence will &lt;em>mess you up&lt;/em> in adult life.&lt;/p>
&lt;p>To be clear, I adore my parents, but I don&amp;rsquo;t mean to gloat about some superior
upbringing. For millennia, traditional societies have been bringing up their
young sensitised to cause/effect, feedback loops, and the interconnectedness of
all things. My chance mental conditioning merely has different set and setting.&lt;/p>
&lt;p>Nor am I advocating the merits of my superior mammalian brain. We are all
monkeys. We absorb a tremendous amount by osmosis and proximity. I simply
was (am) around them and they are a certain kind of people. So, monkey see,
monkey do, monkey programmed for life.&lt;/p>
&lt;p>Remember this for later.&lt;/p>
&lt;h2 id="archetypes-as-metaphor-a-vogon-and-slartibartfast">Archetypes as Metaphor: A Vogon and Slartibartfast&lt;/h2>
&lt;p>Unfortunately, enterprise demise is rarely merciful.&lt;/p>
&lt;p>Even the best systems-oriented organisations can fail through mistakes or
forces outside their control. Systems-disoriented ones, though, are almost
certain to end. The best case end-state is a mercifully swift death. The
worst case is akin to eternal hell.&lt;/p>
&lt;p>It is easy to spot hellish organisations. They are ones who mistook bureaucracy
for systems. They erect tall barb-wire fences of paperwork and procedure (and
of actual barb-wire, too, come to think of it). They make Byzantine mazes of
confounding rules and approvals. Elaborate rituals with no memory of why.
Their customers puzzle through the madness. Their staff dutifully tend to these,
because that&amp;rsquo;s what procedure, fences, and mazes are for, after all; to be
tended to, ritually.&lt;/p>
&lt;p>Unfortunately, bureaucracies frequently succeed and turn pathological.&lt;/p>
&lt;p>Bureaucracies are the ones that successfully pulled off the reality-escape
magic trick of turning into axiomatic self-perpetuating ever-expanding entities.
And they are frequently pathological. They exist because they exist. They make
rules because they make rules. They don&amp;rsquo;t grow, they metastasise. Vogons.&lt;/p>
&lt;p>Unfortunately, systems people look like bureaucrats at first glance.&lt;/p>
&lt;p>It is often hard to understand, or indeed believe, what these so-called systems
people are going on about. They appear to be infuriatingly reluctant to
&lt;em>just do&lt;/em> stuff. They want us to think of this feedback loop and that delay
and the other thing&amp;mdash;reservoir something. They ask too many questions and
engage in that perversion of holism which our education weaned us off long ago.&lt;/p>
&lt;p>Unfortunately, consummate bureaucrats are camouflage experts.&lt;/p>
&lt;p>They don the colours of systems-builders (it makes for great press, and randomly
it can actually become true through no fault of said consummate bureaucrat).
But really it is all in service of the pathological bureaucracy that kowtows
the whims of some great dictator high above. The consummate &lt;em>and&lt;/em> competent
bureaucrat is an endangered animal.&lt;/p>
&lt;p>How, pray tell, is the hapless commoner to discern the master of Machiavellian
machinations, from the grappler of vexing problems of far-reaching import?
One who sees through the Eye of Sauron versus one who has vision? One who is
capable of thinking &lt;strong>and&lt;/strong> of creating?&lt;/p>
&lt;p>When suddenly confronted with an alive, organic whole wrought of systems
harmonised of systems, we can be forgiven for getting lost in a single detail
amidst infinite splendour. Like Arthur Dent trying to comprehend the copy of
Earth suspended before him, and finally finding succour in a familiar cup of
tea in his own replicated home. &amp;ldquo;Amazed and lost&amp;rdquo; is quite unlike &amp;ldquo;lost in a
maze&amp;rdquo;. The systems-builder, meanwhile, looks on with kind empathy for our
sudden loss of tongue. Silently joyous about what was realized through them.
Slartibartfast. Now you&amp;rsquo;re gagging aren&amp;rsquo;t you? Not at the name, but at the
Utopian idealism of this whole paragraph? Stay with the feeling. That&amp;rsquo;s your
prickly adult conditioning suppressing your intelligent, curious 13-year-old
inner self.&lt;/p>
&lt;p>A Vogon&amp;rsquo;s employer and A Slartibartfast&amp;rsquo;s employer both produce and perpetuate
grand structures, intricately patterned, with unfathomable puzzles and games
of life that could keep us occupied forever, and perhaps even drive us to
insanity. Yet one is a simulacrum of the other.&lt;/p>
&lt;p>With reference to &lt;em>Westrum typology&lt;/em>, the Vogon Empire would be a Pathological
Bureaucracy. So lets just say that if I were fated to go stark raving mad,
and I had to choose between these opposite archetypes, I&amp;rsquo;d rather lose my
mind working for a Slartibartfast. And if you find yourself under a Vogon&amp;hellip;&lt;/p>
&lt;p>Do Panic.&lt;/p>
&lt;h2 id="model-a-picture-is-worth-a-1-000-points">Model: A picture is worth a 1,000 % points&lt;/h2>
&lt;p>&lt;em>Scale&lt;/em> is where it&amp;rsquo;s at, these days. It so obviously &lt;em>right&lt;/em> to &lt;em>want&lt;/em> to
&lt;em>scale&lt;/em> all the things all the time.&lt;/p>
&lt;p>Try to loudly diss &amp;ldquo;scaling&amp;rdquo;. See if you don&amp;rsquo;t get funny looks and wry remarks
about &amp;ldquo;lifestyle business&amp;rdquo; or something appropriately classifying. Luckily,
that&amp;rsquo;s not what I&amp;rsquo;m going to do today. Also this is the last time fish,
reptiles, dermatology, or the insides of boilers will appear in this piece.
Business thinks of scaling as growing bigger &lt;!-- raw HTML omitted -->and&lt;!-- raw HTML omitted --> doing so faster. And we
mean business here, okay?&lt;/p>
&lt;p>But we&amp;rsquo;re in a spot of trouble, aren&amp;rsquo;t we? The word &lt;em>fucked&lt;/em> comes to mind.&lt;/p>
&lt;p>&amp;ldquo;Systems&amp;rdquo;, &amp;ldquo;complexity&amp;rdquo;, and &amp;ldquo;perspective&amp;rdquo; feel like dirty epithets in polite
(board)rooms (or indeed, most rooms). And heaven forfend if you&amp;rsquo;re an engineer
given to worrying about such stuff. (Engineers can actually verify their
Enterprise F-word Factor real quick. Use those words in your next executive
meeting, and closely watch superior eyes. If they light up, count your lucky
stars.)&lt;/p>
&lt;p>Yet people know deep down, that such things really exist, that they matter,
that we are part of the equation. But even if everyone cares, where is the
time or incentive to ferret out their presence in our organisations, much less
map out and observe their mechanics? We&amp;rsquo;re so focused and &lt;em>busy&lt;/em> pushing the
numbers that denote scaling for us.&lt;/p>
&lt;p>Fortunately, people have an intuitive feel for the aggregate effect of their
scaling efforts.&lt;/p>
&lt;p>This &amp;ldquo;effective scaling effect&amp;rdquo;, for lack of better words, is measurable in
gut-feels, and I bet, also as hard numbers in terms of &lt;strong>net resources expended&lt;/strong>
&lt;strong>to convert net inputs into net outputs&lt;/strong>. Such a &lt;em>lens of net effect&lt;/em> would
abstract over systems thinking mechanics of flows, feedback loops, buffers,
controls, and relationships.&lt;/p>
&lt;p>The following picture is not meant to capture system dynamics, but to think
about net effects of system dynamics&amp;hellip; a sort of contrast material to compare
one&amp;rsquo;s current trajectory.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"> NET INPUTS NET RESOURCES CONSUMED NET OUTPUTS
+----------------------+ +----------------------+ +----------------------+
| . | | | | . |
| . | | | | . |
| . | | | | . |
| . | | | | . |
| . | | | | . |
| . | | | | . |
| . | | /----| | . |
SCALING |. . . | |____ /--------- | | . . . |
+----------------------+ +----------------------+ +----------------------+
+----------------------+ +----------------------+ +----------------------+
| | | | | |
| /--| | /--| | /--|
| /-- | | /-- | | /-- |
| /-- | | /-- | | /-- |
| /-- | | /-- | | /-- |
| /-- | | /-- | | /-- |
| /-- | | /-- | | /-- |
STASIS | /-- | | /-- | | /-- |
+----------------------+ +----------------------+ +----------------------+
+----------------------+ +----------------------+ +----------------------+
| | | . | | |
| /--| | . | | /--|
| /-- | | . | | /-- |
| /-- | | . | | /-- |
| /-- | | . | | /-- |
| /-- | | . | | /-- |
| /-- | | . | | /-- |
DEATH | /-- | |.. . | | /-- |
+----------------------+ +----------------------+ +----------------------+
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I worry for us, you know.&lt;/p>
&lt;p>In our great civilization-scale hustle, we&amp;rsquo;ve lost the greater (systemic)
perspective. Perspective crucial to the control and management of giant grizzly
bears of self-made complexity. Everything seems to be on fire at all scales,
but we all seem to feel&amp;hellip; fine.&lt;/p>
&lt;p>Maybe I just have a morbid eye. Please tell me I&amp;rsquo;m wrong.&lt;/p>
&lt;h2 id="example-what-s-cooler-than-10-bn-100-bn-dot">Example: What&amp;rsquo;s cooler than 10 Bn? 100 Bn.&lt;/h2>
&lt;p>The way tech startups function in India drives me to despair.&lt;/p>
&lt;p>I think founders and staff lose a tremendous amount of value to avoidable chaos,
needless complexity, excessive cargo-culting of tech and business ideas, severe
under-investment in human capacity-building, and quite frankly rather poor
attention to detail. One can very well count their true burn rate not in dollar
terms, but in minds wasted, and bodies spent.&lt;/p>
&lt;p>Operating in India is ridiculously hard as it is, and founders must struggle
forward through crazy marketplace/environmental complexities. I think those
other factors I stated previously compound to make things far worse that they
need to be. It&amp;rsquo;s like death by a thousand cuts.&lt;/p>
&lt;p>For example, people look at me funny when I say I think that the poster-child
sale of Flipkart to Walmart was a tragedy. To me, that was a $100 Bn company
(or bigger!) that didn&amp;rsquo;t happen. Anecdotally, I believe many similar tragedies
are in progress as we speak. Value erosion of a colossal scale. Maybe I&amp;rsquo;m
too much of an idealist? Or worse, maybe I&amp;rsquo;m too much of an engineer? What
could I &lt;em>possibly&lt;/em> know about things way above my pay grade?&lt;/p>
&lt;p>Unfortunately for me, I can&amp;rsquo;t help thinking there must be a better way.&lt;/p>
&lt;h2 id="tying-it-together-dot-trying-it-together">Tying it together. Trying it together?&lt;/h2>
&lt;p>Software &lt;em>is&lt;/em> extreme leverage.&lt;/p>
&lt;p>Transmuting real-world idioms and processes into bits and API calls is literally
game-changing. This we know to be true to experience.&lt;/p>
&lt;p>However, any enormously high-leverage intervention routinely produces every
conceivable externality, positive or negative or just&amp;hellip; alien. So often,
we don&amp;rsquo;t even know what we&amp;rsquo;re really looking at. &lt;em>New&lt;/em>. &lt;em>NFT&lt;/em>. &lt;em>WTF&lt;/em>. &lt;em>Wow&lt;/em>.
That&amp;rsquo;s what you get when a model in a computer can thumb its nose at the laws
of Physics. Crazy variance of outcome. Power law inversions of control away
from the world of brick and mortar and atoms and societies into power-centers
capable of planet-scale rearrangement.&lt;/p>
&lt;p>People don&amp;rsquo;t scale, systems do.&lt;/p>
&lt;p>Scaling begets complexity. Systems create leverage. Systems-oriented people
create ways to thrive in complex worlds. Organisations that invest deeply in
systems-oriented people have a shot at greatness at scale. Those that don&amp;rsquo;t,
risk unchecked destruction of value for self and ecosystem. It&amp;rsquo;s a muscle to
build. It takes persistent work. You need the stomach for it.&lt;/p>
&lt;p>Unfortunately, you will likely build a bureaucracy.&lt;/p>
&lt;p>And build it fast. Actually, you don&amp;rsquo;t even need to &amp;ldquo;build&amp;rdquo; one, you just have
to do nothing and let it manifest itself. Easy-peasy.&lt;/p>
&lt;p>Suppose you suddenly learn that you are now a founder hustlin' a red-hot tech
startup, and suddenly find yourself in possession of gobs of money, and honestly
not much leadership experience, you may very quickly also find yourself in
possession of small armies of people. The pressure to &amp;ldquo;grow&amp;rdquo; will be immense.
So will be the weight of responsibility. You may feel trapped, your only recourse
being to open wide and swallow as much as you can as fast as you can. You will
make the cardinal mistake of adding more people to your already late launch.
And when it&amp;rsquo;s all threatening to go sideways, you will discover your inner
Great Dictator.&lt;/p>
&lt;p>It will be tempting. You feel the hurt, but you also feel the power. You tell
yourself it will somehow all work out in the end. That growth will forgive all
sins. It won&amp;rsquo;t. Resist the urge to command and control. Resist becoming a Vogon.
Resist the slippery slope to the hell of pathological bureaucracies. Strive
to be a Slartibartfast. A creative, generative leader.&lt;/p>
&lt;p>&lt;em>&amp;ldquo;Power over rules is real power.&amp;quot;&lt;/em>&lt;/p>
&lt;p>&lt;em>&amp;ldquo;If you want to understand the deepest malfunctions of systems, pay attention
to the rules and to who has power over them.&amp;quot;&lt;/em> - Donella Meadows, Thinking in
Systems.&lt;/p>
&lt;p>We are all monkeys, remember? You may be the top dog, but I bet you watch your
authority figures. Just as your people watch you. What are you absorbing?
What are you disseminating?&lt;/p>
&lt;p>You are also &lt;em>in&lt;/em> the system. You are bound by its laws, even if you created
it. Especially if you created it. But if you created it, you may have power
to change the rules. You may even have the greatest power; the power to
set/reset its goals.&lt;/p>
&lt;p>How will you wield your power?&lt;/p>
&lt;h2 id="food-for-thought">Food for thought&lt;/h2>
&lt;p>&lt;strong>Practice.&lt;/strong> Or, applied systems thinking.&lt;/p>
&lt;ul>
&lt;li>Forgsen, Humble, Kim: &lt;a href="https://www.goodreads.com/en/book/show/35747076-accelerate">Accelerate: Building and Scaling High-Performing Technology Organizations&lt;/a>&lt;/li>
&lt;li>Donella Meadows: &lt;a href="https://www.chelseagreen.com/product/thinking-in-systems/">Thinking in Systems&lt;/a>&lt;/li>
&lt;li>Marianne Belotti: &lt;a href="https://www.youtube.com/watch?v=XoEfV0kXXDY">We Killed These Things With Fire&lt;/a>&lt;/li>
&lt;li>John Allspaw: &lt;a href="https://www.youtube.com/watch?v=xA5U85LSk0M&amp;amp;t=0s">How Your Systems Keep Running Day After Day&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Perspective.&lt;/strong> Or, 80 IQ points.&lt;/p>
&lt;ul>
&lt;li>Joe Armstrong:
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=ed7A7r6DBsM">The How and Why of Fitting Things Together&lt;/a>, and&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=lKXe3HUG2l4">The Mess We&amp;rsquo;re In&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Alan Kay:
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=YyIQKBzIuBY">Programming and Scaling&lt;/a>, and&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=oKg1hTOQXoY">The Computer Revolution hasn&amp;rsquo;t happened yet&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Zeitgeist.&lt;/strong>: Or, stories from now.&lt;/p>
&lt;ul>
&lt;li>Dan Luu:
&lt;ul>
&lt;li>&lt;a href="https://danluu.com/people-matter/">Individuals Matter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://danluu.com/culture/">Culture Matters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://danluu.com/wat/">Normalization of Deviance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Tiger Global: &amp;ldquo;&lt;a href="https://www.readthegeneralist.com/briefing/tiger-global">value in the software asset class [was] mispriced&lt;/a>&amp;rdquo;
(i.e. &amp;ldquo;You&amp;rsquo;re still thinking too small&amp;rdquo;)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Satire.&lt;/strong> Or, a mirror to the culture.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Yes%5FMinister">Yes Minister&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/The%5FOffice">The Office&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Blackadder">Blackadder&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/A%5FBit%5Fof%5FFry%5F%26%5FLaurie">A Bit of Fry and Laurie&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/The%5FGreat%5FDictator">The Great Dictator&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="acknowledgments">Acknowledgments&lt;/h2>
&lt;p>Thanks to Julia and Radhika for writing feedback.&lt;/p></content></item><item><title>In the beginning, was the domain name</title><link>/posts/hello-world/</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0530</pubDate><guid>/posts/hello-world/</guid><description>&lt;p>How this blog came to be is a minor miracle. Long story short, I conned myself
into believing nobody will find &lt;em>and&lt;/em> read it. But you&amp;rsquo;re here, aren&amp;rsquo;t you?
And you&amp;rsquo;re reading this. Aren&amp;rsquo;t You?&lt;/p>
&lt;p>Confucamus.&lt;/p>
&lt;p>Well, here&amp;rsquo;s how you got here.&lt;/p></description><content>&lt;p>How this blog came to be is a minor miracle. Long story short, I conned myself
into believing nobody will find &lt;em>and&lt;/em> read it. But you&amp;rsquo;re here, aren&amp;rsquo;t you?
And you&amp;rsquo;re reading this. Aren&amp;rsquo;t You?&lt;/p>
&lt;p>Confucamus.&lt;/p>
&lt;p>Well, here&amp;rsquo;s how you got here.&lt;/p>
&lt;hr>
&lt;p>You see, I&amp;rsquo;ve been&amp;hellip; was&amp;hellip; e-sober for a measurable fraction of the
Internet era.&lt;/p>
&lt;p>It&amp;rsquo;s been over ten years since I took down my last (and first) blog. Eight
since I nuked my FB with extreme prejudice, discovering in the bargain a fine
capacity for smug satisfaction, when the chagrin of aghast friends and sundry
affected me not one whit. Nary a tweet-song has erupted, five years and
counting.&lt;/p>
&lt;p>The WWW had gotten A Bit Too Much. I wanted to say nothin' to nobody on it.
I was content writing the occasional long email to friends and randoms.
I was &lt;em>fine&lt;/em>. &lt;em>Everything was.&lt;/em>&lt;/p>
&lt;p>Mother nature, though. She tests us.&lt;/p>
&lt;p>Predictably, she sprung A Rather Big Surprise at the least-convenient moment
in the least-convenient century (for me, at any rate).
That-which-shall-not-be-named imposed a period of involuntary house arrest.&lt;/p>
&lt;p>It was then, in that long dark tea time of the soul, will weakened, that I
snagged a domain on impulse.&lt;/p>
&lt;p>This very domain. Just for my email, mind you. To de-google myself. Or something.&lt;/p>
&lt;p>Oh, how little did I know. &lt;a href="http://garann.com/dev/2013/how-to-blog-about-code-and-give-zero-fucks/">Insidious&lt;/a> &lt;a href="https://sites.google.com/site/steveyegge2/you-should-write-blogs">thoughts&lt;/a> &lt;a href="https://applieddivinitystudies.com/2020/09/09/journaling/">started&lt;/a> invading my consciousness
through my soothingly red-shifted displays. The Feature Creep crept up slowly,
subtly erecting neon hoardings to subvert the fog my mind had gladly embraced.
&lt;em>&amp;ldquo;Does your domain apologetically redirect to your github?&amp;rdquo;.&lt;/em>
&lt;em>&amp;ldquo;Your site can be more. Do more. So much more.&amp;rdquo;.&lt;/em>
&lt;em>&amp;ldquo;If a reader fell upon this site and no form was around to comment in,
did they make a sound?&amp;rdquo;.&lt;/em>
Foggy the mind was, yes.&lt;/p>
&lt;p>That&amp;rsquo;s when it gripped me. The desire to write. And it started gnawing away
inside. It was all The Feature Creep&amp;rsquo;s doing, of course, but I didn&amp;rsquo;t know
it then.&lt;/p>
&lt;p>Luckily, my terror of looking like an idiot&amp;ndash;nay, an &lt;em>impostor&lt;/em>&amp;ndash;was far more
potent than The FC&amp;rsquo;s gnawing at my anemic will. I narrowly avoided working up
the nerve to just point the damn domain to Wordpress and slam publish like it
was 2005 again.&lt;/p>
&lt;p>Days turned to weeks. Weeks glommed into months. Some uncalled for hair loss
occurred and a year passed. Meanwhile, the domain redirected reliably,
unaware of the mayhem within and without.&lt;/p>
&lt;p>Still The FC gnawed on. The Feature Creep never tires, never lies down, and
never dies, you see.&lt;/p>
&lt;p>Slyly (or so I thought), I fooled it by quietly typing into my Emacs. More
days turned to weeks turned to months. Words accreted in my org-mode files.
Wee notes. Snippets. Factoids squirreled away. Mostly harmless bits and bobs.
Someone paying attention might have smelled trouble brewing and stopped right
there. But, oh how little did I know.&lt;/p>
&lt;p>Unwittingly, I started penning lofty thoughts too. I caught on soon enough,
but I kept doing it, despite now being acutely aware that I&amp;rsquo;d wake up feeling
dirty the morning after. My confidence, though. My, did it grow supreme. It
took perverse delight in jotting down opinions way above my pay grade because,
after all, nobody would find out. It was all on my computer. Even if I
didn&amp;rsquo;t &lt;em>shred&lt;/em> it all, bitrot would certainly destroy every last trace of
my misadventures. And I&amp;rsquo;d safely take my little secret life to my grave.
Yes, I&amp;rsquo;d get away with it.&lt;/p>
&lt;p>But then my partner found out and started telling me things, whispering words
of encouragement (somehow, &lt;em>&amp;ldquo;egged on&amp;rdquo;&lt;/em> seems more apt).
The fault is all mine though; why we&amp;rsquo;re here. For shortly after, in a
momentary lapse of judgment, I also told a friend.
And then, fatally, I failed to continue keeping mum before other friends.
Now they want to read it all, and not privately, but &amp;ldquo;on your bloody blog,
dummy&amp;rdquo;. That&amp;rsquo;s when I &lt;em>knew&lt;/em>. The Feature Creep had me dead to rights
from the get go.&lt;/p>
&lt;p>The obvious moral here is if you want to continue &lt;em>not&lt;/em> writing on the WWW,
don&amp;rsquo;t under &lt;em>any&lt;/em> circumstance impulse-purchase that domain, and if you do,
don&amp;rsquo;t secretly type in your computer, and if you do, for the love of your Gods,
don&amp;rsquo;t wed or befriend anyone.&lt;/p>
&lt;p>Anyhow, it was too late for me. Feeling suitably cornered and wretched,
much moping around ensued, until it hit me; &amp;ldquo;Wait a minute, I &lt;em>am&lt;/em> an idiot,
but I also &lt;em>want&lt;/em> to be &lt;a href="https://danluu.com/look-stupid/">less of one&lt;/a>.&amp;rdquo;
So this is&amp;hellip; also fine. Maybe they will even tell me HowTo Not Idiot, if
they&amp;rsquo;re still here, reading.&lt;/p>
&lt;p>So I submitted. That domain I impulse-bought stopped redirecting, pointing
to this instead. Then with infinite improbability, your browser pointed to
that and served this up. And now you know exactly how you got here. And&amp;hellip;&lt;/p>
&lt;p>You&amp;rsquo;re still reading, aren&amp;rsquo;t you?&lt;/p>
&lt;p>Your readership graces this site. To me, writing was thinking. Apparently it
can also be a process of becoming. So thank you for being here (bows deeply).
Several word collections are in progress. Please stay as long as you wish.&lt;/p>
&lt;p>I&amp;rsquo;ll pause here to doff my hat to some heroes that I draw inspiration from;
&lt;a href="https://bellmar.medium.com/">bellmar&lt;/a> &amp;amp; &lt;a href="https://danluu.com">danluu&lt;/a> &amp;amp; &lt;a href="https://jvns.ca/">b0rk&lt;/a> &amp;amp; &lt;a href="https://www.gwern.net/index">gwern&lt;/a> &amp;amp; &lt;a href="https://aphyr.com/tags/writing">aphyr&lt;/a> &amp;amp; &lt;a href="https://www.kitchensoap.com/">allspaw&lt;/a> &amp;amp; &lt;a href="https://xkcd.com/">randall&lt;/a> &amp;amp; &lt;a href="https://twitter.com/foone">foone&lt;/a>,
and a hundred more&amp;hellip; Much to learn, have I.
But we here now, an' we gon' try. We gon' try, to eval/apply.&lt;/p>
&lt;p>There will be some technical words, some code play, some HowTos, some WhyTos,
pondering-upons of some real doozies like &amp;ldquo;Systems, Scale, Value&amp;rdquo;,
&amp;ldquo;Technical Debt is a CDO&amp;rdquo;, &amp;ldquo;Envelope of control&amp;rdquo;, &amp;ldquo;Why was the misbehaving
system behaving itself?&amp;rdquo; and so forth. No pundering at all, if you&amp;rsquo;re
wondering.&lt;/p>
&lt;p>Enroute, maybe your eye catches something iffy and twitches. Perhaps a whiff
of bull causes your nostrils to flare slightly. Maybe something really gets
your goose and your brain screams &amp;ldquo;NO. Don&amp;rsquo;t. Type. You &lt;strong>promised&lt;/strong> you&amp;rsquo;re
done with these Internet randos who are SO BLOODY WRONG.&amp;rdquo;.&lt;/p>
&lt;p>That&amp;rsquo;s why I&amp;rsquo;m helping you by not having a comment form.&lt;/p>
&lt;p>But I&amp;rsquo;ll be delighted to hear from you at &lt;em>weblog (at) evalapply (dot) org&lt;/em>
if it strikes your fancy! (Or &lt;em>youresobloodywrong (at) evalapply (dot) org&lt;/em>
if it&amp;rsquo;s just &lt;em>that&lt;/em> kind of a day and you can&amp;rsquo;t stand it any more.
I know the feeling. I&amp;rsquo;m here, listening :).&lt;/p>
&lt;p>Thank you for swinging by!&lt;/p>
&lt;p>&lt;a href="https://xkcd.com/386/">&lt;img src="https://imgs.xkcd.com/comics/duty%5Fcalls.png" alt="What do you want me to do? LEAVE? Then they&amp;rsquo;ll keep being wrong!">&lt;/a>
&lt;a href="https://xkcd.com/386/">xkcd: Duty Calls&lt;/a>&lt;/p></content></item></channel></rss>