<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>eval/apply for fun and … fun on eval/apply</title><link>/</link><description>Recent content in eval/apply for fun and … fun on eval/apply</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 16 Feb 2022 01:15:15 +0530</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>What makes Functional Programming and/or Functional Systems "Functional"?</title><link>/posts/what-makes-functional-programming-systems-functional/</link><pubDate>Wed, 16 Feb 2022 01:15:15 +0530</pubDate><guid>/posts/what-makes-functional-programming-systems-functional/</guid><description>&lt;p>In which we ponder the Functional Nature of Life, The Universe, and Everything.
Please feel free to follow through the weeds, or jump straight to the bottom
for my 2 nano BTC on the matter. (Or my current state of mind, at any rate.)&lt;/p>
&lt;p>Disclaimer: I live in the Land of Lisp, meditate in the Church of Alonzo, and
am ever-wary of The State. Only converts &lt;em>might&lt;/em> find some entertainment value.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;For the love of State is the root of all evil: which while some coveted after,&lt;/em>
&lt;em>they have erred from Lambda the Ultimate, and pierced themselves through with&lt;/em>
&lt;em>many sorrows.&amp;quot;&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#is-it-already-suffusing-your-very-being">Is it already suffusing your very being?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-mathematics">Is it Mathematics?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-being-declarative">Is it being &amp;ldquo;declarative&amp;rdquo;?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-being-data-oriented">Is it being &amp;ldquo;data-oriented&amp;rdquo;?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-about-statelessness">Is it about &amp;ldquo;Statelessness&amp;rdquo;?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-about-managed-environments">Is it about &amp;ldquo;managed&amp;rdquo; environments?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-about-following-some-discipline-and-maybe-automating-it">Is it about following some discipline, and maybe automating it?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#my-2-nano-btc-on-the-matter">My 2 nano BTC on the matter&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted --></description><content>&lt;p>In which we ponder the Functional Nature of Life, The Universe, and Everything.
Please feel free to follow through the weeds, or jump straight to the bottom
for my 2 nano BTC on the matter. (Or my current state of mind, at any rate.)&lt;/p>
&lt;p>Disclaimer: I live in the Land of Lisp, meditate in the Church of Alonzo, and
am ever-wary of The State. Only converts &lt;em>might&lt;/em> find some entertainment value.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;For the love of State is the root of all evil: which while some coveted after,&lt;/em>
&lt;em>they have erred from Lambda the Ultimate, and pierced themselves through with&lt;/em>
&lt;em>many sorrows.&amp;quot;&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#is-it-already-suffusing-your-very-being">Is it already suffusing your very being?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-mathematics">Is it Mathematics?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-being-declarative">Is it being &amp;ldquo;declarative&amp;rdquo;?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-being-data-oriented">Is it being &amp;ldquo;data-oriented&amp;rdquo;?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-about-statelessness">Is it about &amp;ldquo;Statelessness&amp;rdquo;?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-about-managed-environments">Is it about &amp;ldquo;managed&amp;rdquo; environments?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-about-following-some-discipline-and-maybe-automating-it">Is it about following some discipline, and maybe automating it?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#my-2-nano-btc-on-the-matter">My 2 nano BTC on the matter&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="is-it-already-suffusing-your-very-being">Is it already suffusing your very being?&lt;/h2>
&lt;p>Because so-called &amp;ldquo;Functional Programming&amp;rdquo; started becoming pretty sexy over
the 2010s. By the 2020s, it started infiltrating all the things, small and big
and hyperscaled.&lt;/p>
&lt;p>Now you can&amp;rsquo;t get people to shut up about their declarative infrastructure-as-code
as-YAML microservices-first infinitely elastic shared-nothing event-sourced
map-reducing lambda architecture marvels.&lt;/p>
&lt;p>Now your VCs and your board nod sagely when these words flash past in your slick
OKR plan vision strategy slide decks. Now they further &lt;em>&amp;ldquo;Hey, quick question&amp;rdquo;&lt;/em>
you to same-page on your strategy for blockchain and smart contracts. And
general web3 readiness. So does every novice hire it seems, no matter their role.&lt;/p>
&lt;p>Now&amp;mdash;and be honest, OK?&amp;mdash;don&amp;rsquo;t you feel like everybody should just mentally
lie down for a few minutes in their metaverse, pass around the meta-ayahuasca,
and after the purge just ask simple meta-questions about FP and life for a
change? Because, for the love of lambda, we haven&amp;rsquo;t even gotten a breather
from the fast-nearing AI supremacy?&lt;/p>
&lt;p>No? OK, consider the following incomplete list of traits commonly attributed
to the &amp;ldquo;Functional&amp;rdquo; paradigm of programming languages and of systems. Alongside,
consider:&lt;/p>
&lt;ul>
&lt;li>Which traits does your pet programming language (or system) provide by default?&lt;/li>
&lt;li>Which traits do you create yourself in your programs (and systems)?&lt;/li>
&lt;li>Which traits draw the hard line between &amp;ldquo;Functional&amp;rdquo; and other kinds of
programs (and systems)?&lt;/li>
&lt;li>Which traits &lt;em>really&lt;/em> matter?&lt;/li>
&lt;li>Why would you even want any of it in the first place?&lt;/li>
&lt;/ul>
&lt;p>And will we really achieve world domination with FP? (Yes, we will.)&lt;/p>
&lt;h2 id="is-it-mathematics">Is it Mathematics?&lt;/h2>
&lt;p>Is it about writing &amp;ldquo;pure&amp;rdquo; functions?&lt;/p>
&lt;p>This is a bit of a tautology. A function is &amp;ldquo;pure&amp;rdquo; by definition. It specifies
a fixed mapping of an input domain to an output domain. When invoked, it
changes nothing about the state of the world. Which begs the question, how can
a thing that &lt;em>does&lt;/em> nothing be computationally useful? (Spoiler: it isn&amp;rsquo;t in
isolation, unless of course, you figure out a way to use the computational
uselessness to turn staggeringly larger amounts of electricity into progressively
smaller fragments of your imagination, on a blockchain somewhere). But I digress&amp;hellip;&lt;/p>
&lt;p>Must we further also have &amp;ldquo;first-class&amp;rdquo; functions?&lt;/p>
&lt;p>Ones that we can pass around as values? This lets us describe all manner of
deferred computations, including un-computable absurdities like infinite sequences,
and partial applications that will sit around forever if we don&amp;rsquo;t complete them.&lt;/p>
&lt;p>And do we absolutely &lt;em>need&lt;/em> the solid ground of Lambda Calculus or Category
Theory to &lt;em>pre-exist&lt;/em>?&lt;/p>
&lt;p>That&amp;rsquo;s an easy one to refute, but these things have become rather holy grail-y
now. If you don&amp;rsquo;t know your monad laws, I&amp;rsquo;m sorry you&amp;rsquo;re not permitted near
functions any more. Oh, and what about proofs? These are in the process of
holy-grailing too&amp;hellip;&lt;/p>
&lt;h2 id="is-it-being-declarative">Is it being &amp;ldquo;declarative&amp;rdquo;?&lt;/h2>
&lt;p>Reduce/ravel/plan/derive/goal-seek?&lt;/p>
&lt;p>To be &amp;ldquo;declarative&amp;rdquo; is to want to write down a set of constraints or rules
or input-output relationships, and leave it to the system to figure out not
only &lt;em>what operations&lt;/em> to perform, but also &lt;em>how&lt;/em> and &lt;em>when&lt;/em> to perform them.&lt;/p>
&lt;p>The declarative world is thrice-removed from the &amp;ldquo;procedural&amp;rdquo; world, where we
have to tell the computer the what, how, and when in excruciating detail.&lt;/p>
&lt;p>SQL, Prolog, APL are seen as &amp;ldquo;highly declarative&amp;rdquo; languages. CSS is also a
highly declarative language (which, I feel, is why people have a really hard
time with it&amp;mdash;CSS is a &lt;em>constraint mechanism&lt;/em> but our minds are strongly
conditioned for procedural thinking).&lt;/p>
&lt;p>And maybe AI is the currently-ultimate expression of being &amp;ldquo;declarative&amp;rdquo;. We
declare that we don&amp;rsquo;t even know what to declare, and write a meta-declaration
and hope to Lambda that it will figure out the declaration that we should have
fed to the computer in the first place.&lt;/p>
&lt;h2 id="is-it-being-data-oriented">Is it being &amp;ldquo;data-oriented&amp;rdquo;?&lt;/h2>
&lt;p>viz., choosing to work in terms of inert &amp;ldquo;literal&amp;rdquo; entities like JSON or EDN
or XML or some structured binary encoding, instead of &amp;ldquo;live&amp;rdquo; objects with
internal state? Asynchronous message-passing instead of synchronous remote
procedure calls (whether through object graphs, or across computer networks)?&lt;/p>
&lt;p>Is it about adhering to the principle of referential transparency; i.e. the
equivalence of evaluated functions and literal data?&lt;/p>
&lt;h2 id="is-it-about-statelessness">Is it about &amp;ldquo;Statelessness&amp;rdquo;?&lt;/h2>
&lt;p>No machine registers? No place-oriented &amp;ldquo;mutable&amp;rdquo; state? No pointers? No
shared references? No side effects? Yes laziness? Yes append-only storage?
Yes event sourcing?&lt;/p>
&lt;h2 id="is-it-about-managed-environments">Is it about &amp;ldquo;managed&amp;rdquo; environments?&lt;/h2>
&lt;p>Language mechanisms that relieve us of the burden and perils of malloc/free?&lt;/p>
&lt;p>Garbage collection? Immutable persistent data structures? Type-directed
compile-time memory access/use control? Multi-Version Concurrency Control?&lt;/p>
&lt;p>Kubernetes?&lt;/p>
&lt;h2 id="is-it-about-following-some-discipline-and-maybe-automating-it">Is it about following some discipline, and maybe automating it?&lt;/h2>
&lt;p>viz. a &lt;em>system&lt;/em> or a design philosophy of doing things, such as:&lt;/p>
&lt;ul>
&lt;li>An accountant-like state management practice.&lt;/li>
&lt;li>Carefully manipulating state only when absolutely necessary.&lt;/li>
&lt;li>Hard-wiring FP traits into a programming language / system.&lt;/li>
&lt;li>Choosing a strict single-process, non-branching, forward-looping-only
method of flow control.&lt;/li>
&lt;li>Having standard, highly general purpose compositional interfaces oriented
around streaming data flow?&lt;/li>
&lt;li>Eiffel-like Design-By-Contract? (Which is surprisingly &amp;ldquo;functional&amp;rdquo;.)&lt;/li>
&lt;li>Continuation-passing style?&lt;/li>
&lt;li>&amp;hellip; etc?&lt;/li>
&lt;/ul>
&lt;h2 id="my-2-nano-btc-on-the-matter">My 2 nano BTC on the matter&lt;/h2>
&lt;p>I think all of our popular programming systems are object-oriented &lt;em>and&lt;/em>
imperative by default, whether explicitly or implicitly. Now they all seem
to be adding &amp;ldquo;functional&amp;rdquo; looking features too. But to me, the functional-ness
of a language (or a system) is not about the feature set, but fundamentally
about its default (automatic) relationship with The State (of the world).&lt;/p>
&lt;p>&lt;strong>The &amp;ldquo;Object-Oriented&amp;rdquo; way&lt;/strong> inexorably pushes us to clone reality.&lt;/p>
&lt;p>We ingest and manage as much state and behaviour as possible, in order to
emulate the world. This, by construction, requires us to operate based on
theories and assumptions (internal state) doomed to always lag and diverge
from reality. In other words, it&amp;rsquo;s a synchronization problem mixed with the
impossible ideal of wanting to make the actual run-time look like the apparent
run-time. Concurrency quickly reveals the difficulties of trying this.&lt;/p>
&lt;p>&lt;strong>The &amp;ldquo;Imperative&amp;rdquo; way&lt;/strong> is more like doing open heart surgery.&lt;/p>
&lt;p>We have to get in there and manually orchestrate control flow, interrupt things,
and get the whole of it to mutate in-place &lt;em>while it is running&lt;/em>. The race
condition is always imminent&amp;mdash;will we close first, or will it stop first?
We never &lt;em>really&lt;/em> know if the seemingly routine procedure will cause something
totally unrelated to blow up in our faces this time around. Meanwhile we have
very sharp instruments in hand, and have to do a lot of it by &lt;em>fingerspitzengefühl&lt;/em>
because half the time we literally can&amp;rsquo;t see where to cut or clamp or suture.
I didn&amp;rsquo;t train for this but I hope you have. For at least 10 years. You have,
right? &amp;hellip; Right?&lt;/p>
&lt;p>&lt;strong>The &amp;ldquo;Functional&amp;rdquo; way&lt;/strong> wants to completely invert these models.&lt;/p>
&lt;p>It tries to expel all system state from inside to the outside. In so doing, it
immerses itself in world-state and tries to be a new conduit for different
parts of outside reality to communicate, hoping to make it behave to our liking.
This, by construction, forces us to think explicitly in terms of events
(discrete sensing and sequencing of world updates, i.e. facts), messaging
(encoding and transmitting facts as data), and time (asynchronicity, consistency,
consensus).&lt;/p>
&lt;p>The functional way is also totally different from how we experience the world.
The world is a concurrent, recurrent, parallel, fractal distributed system of
systems. And it is also stochastic and full of discontinuities. We have evolved
to form just-about-good-enough models of reality in our heads, in very bounded
contexts, to the extent necessary for survival. These internal models smooth
over all sorts of discontinuities, resist change while survival odds feel good,
and determine how we behave regardless of what might actually be out there.
We learn imperatively by poking and prodding the world around us while it hums
along. I think this is why it takes serious effort to learn the &amp;ldquo;functional&amp;rdquo;
way. We have to upend our entire mental model of how to do things in the world.&lt;/p>
&lt;p>&lt;strong>Maybe pure data at rest&lt;/strong> is the only truly &amp;ldquo;functional&amp;rdquo; thing?&lt;/p>
&lt;p>Maybe not. Like a pure function, pure data at rest does nothing and so is
useless to us when dormant. Besides, it is &amp;ldquo;pure&amp;rdquo; &lt;em>only&lt;/em> for the duration
entropy permits its complete un-corrupted recovery. Ultimately, the laws of
Physics will always win. To muddy the waters a bit more, even the purest of
pure functional systems contain state; signals in flight or some in-progress
computation.&lt;/p>
&lt;p>The only saving grace is that in a highly functional system, any run-time
state is entirely recoverable, reproducible, discrete, and isolated.&lt;/p>
&lt;p>&lt;strong>All said, everything mutates sooner or later.&lt;/strong>&lt;/p>
&lt;p>I don&amp;rsquo;t know how to navigate this, except to remind myself about The Thing
That Actually Matters&amp;hellip; to always remember that The State is the frenemy.&lt;/p>
&lt;p>So while it pleases me that so many wish to eagerly embrace the Functional Way,
it is good to be soberly mindful of scopes, lifetimes, margins, error budgets,
and bounds of reality (state) and of data (information about reality). Good
situational awareness will lead us to build highly functional systems that
keep The State where it belongs, and still do useful things with it.&lt;/p>
&lt;p>And all &lt;em>that&lt;/em> said, I leave you with this prayer:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">O Lambda the Ultimate,
bless the reader of these words.
That their core be functional,
and their functions be pure.
That their data be immutable,
so they may know the value of values.
That their systems be composable,
so they may grow and scale with grace.
That their States only mutate
in pleasantly surprising ways.
For otherwise nothing lives.
Nothing evolves.
In the name of the alpha,
the beta, and the eta...
(λx.x x) (λx.x x)
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Baby don't hurry, don't stop (feat. Melancholy)</title><link>/posts/dont-hurry-dont-stop-sad-version/</link><pubDate>Mon, 14 Feb 2022 10:24:39 +0530</pubDate><guid>/posts/dont-hurry-dont-stop-sad-version/</guid><description>&lt;p>This is how I struggle from time to time. It is not pretty. These days it&amp;rsquo;s
been a lot more. Thankfully, it is not a constant. Instead of reading this,
you should want to listen to Alain de Botton.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=Aw1oLtuJOXQ">on Pessimism&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=jJ6K%5Ff7oSdg">on Love&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=W9X7u-MeJz0">on an Emotional Education&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>For here lies melancholy that I put to paper from a particularly deep hole,
not too long ago. It may ruin your day, or it may make you feel a little bit
understood about your dark moments. And it&amp;mdash;unlike Alain&amp;rsquo;s teachings&amp;mdash;will
certainly not help you find a way through.&lt;/p>
&lt;p>Your mileage &lt;em>will&lt;/em> vary.&lt;/p></description><content>&lt;p>This is how I struggle from time to time. It is not pretty. These days it&amp;rsquo;s
been a lot more. Thankfully, it is not a constant. Instead of reading this,
you should want to listen to Alain de Botton.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=Aw1oLtuJOXQ">on Pessimism&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=jJ6K%5Ff7oSdg">on Love&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=W9X7u-MeJz0">on an Emotional Education&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>For here lies melancholy that I put to paper from a particularly deep hole,
not too long ago. It may ruin your day, or it may make you feel a little bit
understood about your dark moments. And it&amp;mdash;unlike Alain&amp;rsquo;s teachings&amp;mdash;will
certainly not help you find a way through.&lt;/p>
&lt;p>Your mileage &lt;em>will&lt;/em> vary.&lt;/p>
&lt;hr>
&lt;p>Today was one of those days.&lt;/p>
&lt;p>When the feeling hit like a slap in the face. Again. Just how much of my
youth burned in self-doubt, fear, self-shame, akrasia.&lt;/p>
&lt;p>Twenty years of young adulthood incinerated by mine own hand, before my own
eyes, and I did nothing to save it.&lt;/p>
&lt;p>Sigh.&lt;/p>
&lt;p>This life is singular. It is not ours to have. It is not ours to end. It is
ours to embrace as a gift to give away.&lt;/p>
&lt;p>The gift is a chance to become all that we can become. We cannot become, if we
keep staring down at ourselves from imagined imaginations of others. What if
I can&amp;rsquo;t do it? What if I fail? What if nobody likes me? I am not &lt;em>this&lt;/em>. I am
not &lt;em>that&lt;/em>. I&amp;rsquo;ll never get &lt;em>there&lt;/em>. &lt;em>I&lt;/em> am not even someone. That is the root
of all self-doubt and fear and shame. A never-being in the here and now. A
never-learning about oneself. A never-knowing of feeling alive. The kind of
poverty that material things cannot end.&lt;/p>
&lt;p>Looking from the outside makes us pressure and twist ourselves into the imagined
mould. But the mould changes before we&amp;rsquo;re done. And we start again. The cycle is
endless, relentless. We go faster, but it changes faster. And we forget ourselves.&lt;/p>
&lt;p>If there is one gift we can give to another, especially a young one, it would
be to show them how to live this: &amp;ldquo;Don&amp;rsquo;t hurry, don&amp;rsquo;t stop.&amp;rdquo;. To learn to &lt;em>do&lt;/em>,
without fearing the unknown, knowing failure without shame, with kindness, with
oneself, without hurry.&lt;/p>
&lt;p>Hurry forces pause. Not pausing breaks us. So many break forever. Never becoming.&lt;/p>
&lt;p>So many learn too late, that they only know to hurry, that they can&amp;rsquo;t slow down.
Once perhaps, long ago, they peered inside their mould and saw nothing. It&amp;rsquo;s
not that nothing exists, it&amp;rsquo;s that they never learned to see. And so all that
remained was to dwell in the future; remoulding faster and faster until the
breakdown. Or worse, to delve into the past, in endless revisions of discarded
moulds to reach an imagined now that never will come to pass. If there is a
metaverse, it is this.&lt;/p>
&lt;p>This prisoners' game of imagined imaginations.&lt;/p>
&lt;p>Fantasies rooted in fantasy.&lt;/p>
&lt;p>Maybe it&amp;rsquo;s not too late for you. Maybe it&amp;rsquo;s not too late for me.&lt;/p>
&lt;p>I hope it isn&amp;rsquo;t.&lt;/p>
&lt;p>But if it is too late, then I hope we come back, you and I.&lt;/p>
&lt;p>For a rebirth requires a death.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>“It is better to do something continuously, perpetually and untiringly than to hustle and fail.”&lt;/em>&lt;/p>
&lt;p>&lt;em>“If you hurry, you must rest. If you want to keep going without resting, then you mustn’t hurry.”&lt;/em>&lt;/p>
&lt;p>&lt;em>“Don’t hurry, don’t stop”&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Kintar%C5%8D%5FHattori">Kintarō Hattori&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></content></item><item><title>people > culture > values > strategy > technology</title><link>/posts/people-culture-values-strategy-technology/</link><pubDate>Fri, 11 Feb 2022 15:32:21 +0530</pubDate><guid>/posts/people-culture-values-strategy-technology/</guid><description>&lt;p>The premise:&lt;/p>
&lt;p>-&amp;gt; People create culture.&lt;/p>
&lt;p>-&amp;gt; Culture shapes values.&lt;/p>
&lt;p>-&amp;gt; Values inform strategy.&lt;/p>
&lt;p>-&amp;gt; Technology is Strategy actualised.&lt;/p></description><content>&lt;p>The premise:&lt;/p>
&lt;p>-&amp;gt; People create culture.&lt;/p>
&lt;p>-&amp;gt; Culture shapes values.&lt;/p>
&lt;p>-&amp;gt; Values inform strategy.&lt;/p>
&lt;p>-&amp;gt; Technology is Strategy actualised.&lt;/p>
&lt;hr>
&lt;p>The implication:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Worst case&lt;/th>
&lt;th>Best case&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;gt; Destructive technology results&lt;/td>
&lt;td>&amp;gt; Constructive technology results&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt; from violent strategy&lt;/td>
&lt;td>&amp;gt; from enlightened strategy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt; borne of pathological values&lt;/td>
&lt;td>&amp;gt; borne of generative values&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt; normalized by vile culture&lt;/td>
&lt;td>&amp;gt; normalized by alive culture&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt; catalysed by fear-based &lt;em>leadership&lt;/em> (verb-form)&lt;/td>
&lt;td>&amp;gt; catalysed by trust-based &lt;em>leadership&lt;/em> (verb-form)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt; enabled by hapless bystanders&lt;/td>
&lt;td>&amp;gt; co-created by highly engaged participants&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unfortunately widespread, easily achieved.&lt;/td>
&lt;td>Fortunately achievable, though high-effort.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Hallmark of negative performance.&lt;/td>
&lt;td>Hallmark of elite performance.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Wouldn&amp;rsquo;t it be nice if the &amp;ldquo;Best case&amp;rdquo; happened most of the time?&lt;/p>
&lt;p>Wouldn&amp;rsquo;t you like to be the sort of leader who makes it happen? A person of
whom people genuinely say &amp;ldquo;&lt;em>I did some of the best work of my life because of
their leadership.&lt;/em>&amp;rdquo;? I&amp;rsquo;ve had one or two of those in my life so far. Enough to
&lt;em>believe&lt;/em>.&lt;/p>
&lt;p>Here&amp;rsquo;s the thing, though.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>It requires a lot of self-work, but you can&amp;rsquo;t go it alone.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There are no roads, but there are landmarks, GPSes, and gyroscopes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There are no formulas, but there are stories, clues, and feedback loops.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There are few such leaders, but there are many followers, and leadership is
teachable. Anyone going on this quest will discover the surprising array of
people who want to rally around to help them succeed. I know I would!&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>There are many places to look. Here&amp;rsquo;s just one such bag full of some pretty
good clues.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;em>Westrum&amp;rsquo;s typology of organizational culture&lt;/em> (table below), as &lt;a href="https://cloud.google.com/architecture/devops/devops-culture-westrum-organizational-culture">presented here&lt;/a>
in context of Google&amp;rsquo;s DORA research, but which is generally applicable to any
team within any organisation, as well as to any org of any size in any industry.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dr. Ron Westrum in conversation with Gene Kim at the &lt;em>Idealcast&lt;/em>, for aural
accompaniment during the day&amp;rsquo;s perambulations:&lt;/p>
&lt;ul>
&lt;li>Part 1: &lt;a href="https://itrevolution.podbean.com/e/the-sociology-and-typologies-of-organizations-and-technical-maestros-with-dr-ron-westrum/">The Sociology and Typologies of Organizations, and Technical Maestros&lt;/a>&lt;/li>
&lt;li>Part 2: &lt;a href="https://itrevolution.podbean.com/e/patterns-of-generative-cultures-how-they-can-be-destroyed-and-the-importance-of-trust-with-dr-ron-westrum/">Patterns of Generative Cultures: How They Can Be Destroyed and the Importance of Trust&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Pathological&lt;/th>
&lt;th>Bureaucratic&lt;/th>
&lt;th>Generative&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Power oriented&lt;/td>
&lt;td>Rule oriented&lt;/td>
&lt;td>Performance oriented&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Low cooperation&lt;/td>
&lt;td>Modest cooperation&lt;/td>
&lt;td>High cooperation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Messengers &amp;ldquo;shot&amp;rdquo;&lt;/td>
&lt;td>Messengers neglected&lt;/td>
&lt;td>Messengers trained&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Responsibilities shirked&lt;/td>
&lt;td>Narrow responsibilities&lt;/td>
&lt;td>Risks are shared&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bridging discouraged&lt;/td>
&lt;td>Bridging tolerated&lt;/td>
&lt;td>Bridging encouraged&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Failure leads to scapegoating&lt;/td>
&lt;td>Failure leads to justice&lt;/td>
&lt;td>Failure leads to inquiry&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Novelty crushed&lt;/td>
&lt;td>Novelty leads to problems&lt;/td>
&lt;td>Novelty implemented&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Table: &lt;em>&lt;strong>The Westrum organizational typology model: How organizations process
information&lt;/strong> (Source: Ron Westrum, &amp;ldquo;&lt;a href="https://qualitysafety.bmj.com/content/13/suppl%5F2/ii22.short">A typology of organisation culture&lt;/a>),&amp;quot;&lt;/em>
&lt;em>BMJ Quality &amp;amp; Safety 13, no. 2 (2004), &amp;lt;10.1136/qshc.2003.009522&amp;gt;.)&lt;/em>&lt;/p>
&lt;p>Happy generative acculturing! _\\//&lt;/p>
&lt;p>(And if you&amp;rsquo;re on quest to build a generative software organization, and you
wish for some &lt;em>eval/apply&lt;/em> assistance, hit me up&amp;hellip; &lt;em>adi&lt;/em> at this domain!)&lt;/p></content></item><item><title>Poor man's Reader App with Pandoc and Bash</title><link>/posts/reader-app-pandoc-bash/</link><pubDate>Thu, 10 Feb 2022 22:10:43 +0530</pubDate><guid>/posts/reader-app-pandoc-bash/</guid><description>&lt;p>Throwback, June 27, 2020.&lt;/p>
&lt;p>Every so often, I want to avoid opening a website in a browser, for &amp;hellip; reasons.&lt;/p>
&lt;p>Curl alone presents too much html. I want to try and read stuff.&lt;/p>
&lt;p>Today, I was playing with Igor Chubin&amp;rsquo;s &lt;strong>awesome&lt;/strong> terminal services (wttr.in,
cht.sh etc.), and it hit me:&lt;/p>
&lt;p>&amp;ldquo;WAIT, there&amp;rsquo;s pandoc, what if I just &amp;hellip; &amp;quot;&lt;/p></description><content>&lt;p>Throwback, June 27, 2020.&lt;/p>
&lt;p>Every so often, I want to avoid opening a website in a browser, for &amp;hellip; reasons.&lt;/p>
&lt;p>Curl alone presents too much html. I want to try and read stuff.&lt;/p>
&lt;p>Today, I was playing with Igor Chubin&amp;rsquo;s &lt;strong>awesome&lt;/strong> terminal services (wttr.in,
cht.sh etc.), and it hit me:&lt;/p>
&lt;p>&amp;ldquo;WAIT, there&amp;rsquo;s pandoc, what if I just &amp;hellip; &amp;quot;&lt;/p>
&lt;hr>
&lt;p>&amp;hellip;
&amp;hellip;
&amp;hellip; and an hour later&amp;hellip; a terrible idea manifested itself.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">www_to_md&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
pandoc --wrap&lt;span style="color:#f92672">=&lt;/span>none -f html -t markdown &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
drop_noise&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e"># remove pesky divs&lt;/span>
grep -v -E &lt;span style="color:#e6db74">&amp;#34;(&amp;lt;div|&amp;lt;/div).*[&amp;gt;]?|*.&amp;gt;&amp;#34;&lt;/span> |
&lt;span style="color:#75715e"># squeeze multiple blank lines into one&lt;/span>
cat -s
&lt;span style="color:#f92672">}&lt;/span>
cache_site&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local sitecache&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1:?&lt;span style="color:#e6db74">&amp;#39;Fail. Path to create cache.&amp;#39;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local mdfilename&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>2&lt;span style="color:#66d9ef">:-&lt;/span>&lt;span style="color:#e6db74">&amp;#39;this.md&amp;#39;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local evict_cache_qmark&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>3&lt;span style="color:#66d9ef">:-&lt;/span>no&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
mkdir -p &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sitecache&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> -f &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sitecache&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mdfilename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>evict_cache_qmark&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;no&amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span>
&lt;span style="color:#66d9ef">then&lt;/span> tee
&lt;span style="color:#66d9ef">else&lt;/span> tee &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sitecache&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mdfilename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
panwww&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
local siteurl&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>1&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local evict_cache_qmark&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>2&lt;span style="color:#66d9ef">:-&lt;/span>no&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local sitename&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>siteurl/http*:&lt;span style="color:#ae81ff">\/\/&lt;/span>/www.&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local sitecache&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/tmp/panwwwcache/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sitename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
local mdfilename&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;this.md&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[[&lt;/span> -f &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sitecache&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mdfilename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>evict_cache_qmark&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;no&amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span>
&lt;span style="color:#66d9ef">then&lt;/span> local cmd&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cat &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sitecache&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mdfilename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span> local cmd&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;www_to_md &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>siteurl&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
$cmd | drop_noise | cache_site &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>sitecache&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>mdfilename&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>evict_cache_qmark&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>so that &amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">panwww &lt;span style="color:#e6db74">&amp;#34;https://www.recurse.com/&amp;#34;&lt;/span> | less &lt;span style="color:#75715e"># fetches site the first time&lt;/span>
panwww &lt;span style="color:#e6db74">&amp;#34;https://www.recurse.com/&amp;#34;&lt;/span> | less &lt;span style="color:#75715e"># looks up &amp;#34;cache&amp;#34;&lt;/span>
panwww &lt;span style="color:#e6db74">&amp;#34;https://www.recurse.com/&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;refetch&amp;#34;&lt;/span> | less
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>How To Not Die By A Thousand Cuts. Or, How To Think About Software Quality.</title><link>/posts/how-to-not-die-by-a-thousand-cuts/</link><pubDate>Thu, 03 Feb 2022 15:20:41 +0530</pubDate><guid>/posts/how-to-not-die-by-a-thousand-cuts/</guid><description>&lt;p>First off, what even is Quality?&lt;/p>
&lt;p>All things emerge, change, and die. I think &lt;em>Quality&lt;/em> is the experience of the
process. The idea of &lt;em>Good Quality&lt;/em> essentially boils down to performing the
process with grace, and leaving the place better than we found it.&lt;/p>
&lt;p>Further, the process of emergence and change&amp;mdash;i.e. living&amp;mdash;is also the process
of dying. It follows that to think clearly about the Quality of the former one
must think clearly about the Quality of the latter. The saddest way it can unfold
is a slow painful degradation without healing succour meaning or hope. The
proverbial death by a thousand cuts. I hope you never witness such a passing,
even from afar.&lt;/p>
&lt;p>Ok, that got dark fast, and if we&amp;rsquo;re not careful, we will produce a 300 page
Zen dialogue on Motorcycle Maintenance. So we will distract ourselves with the
much smaller, lighter&amp;mdash;and I&amp;rsquo;d argue, even pleasant&amp;mdash;task of contemplating
Quality of software products.&lt;/p>
&lt;p>None of what follows is novel, but I feel the message &lt;em>and&lt;/em> its surrounding
context bears repeating, because if it is not obvious already, software fails
us all the time. Far too often with terrible consequences.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#what-is-the-nature-of-software-products">What is the nature of software products?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#whom-to-hold-responsible-for-software-quality-assurance">Whom to hold responsible for Software Quality Assurance?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#why">Why?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-different-for-different-kinds-of-products">Is it different for different kinds of products?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#how-to-destroy-quality">How to destroy Quality?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#how-to-create-quality">How to create Quality?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-first-skill-is-to-learn-to-suffer-constructively-dot">The first skill is to learn to suffer constructively.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#caveats-mea-culpa-etc-dot">Caveats, mea culpa, etc.&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted --></description><content>&lt;p>First off, what even is Quality?&lt;/p>
&lt;p>All things emerge, change, and die. I think &lt;em>Quality&lt;/em> is the experience of the
process. The idea of &lt;em>Good Quality&lt;/em> essentially boils down to performing the
process with grace, and leaving the place better than we found it.&lt;/p>
&lt;p>Further, the process of emergence and change&amp;mdash;i.e. living&amp;mdash;is also the process
of dying. It follows that to think clearly about the Quality of the former one
must think clearly about the Quality of the latter. The saddest way it can unfold
is a slow painful degradation without healing succour meaning or hope. The
proverbial death by a thousand cuts. I hope you never witness such a passing,
even from afar.&lt;/p>
&lt;p>Ok, that got dark fast, and if we&amp;rsquo;re not careful, we will produce a 300 page
Zen dialogue on Motorcycle Maintenance. So we will distract ourselves with the
much smaller, lighter&amp;mdash;and I&amp;rsquo;d argue, even pleasant&amp;mdash;task of contemplating
Quality of software products.&lt;/p>
&lt;p>None of what follows is novel, but I feel the message &lt;em>and&lt;/em> its surrounding
context bears repeating, because if it is not obvious already, software fails
us all the time. Far too often with terrible consequences.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#what-is-the-nature-of-software-products">What is the nature of software products?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#whom-to-hold-responsible-for-software-quality-assurance">Whom to hold responsible for Software Quality Assurance?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#why">Why?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#is-it-different-for-different-kinds-of-products">Is it different for different kinds of products?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#how-to-destroy-quality">How to destroy Quality?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#how-to-create-quality">How to create Quality?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-first-skill-is-to-learn-to-suffer-constructively-dot">The first skill is to learn to suffer constructively.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#caveats-mea-culpa-etc-dot">Caveats, mea culpa, etc.&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="what-is-the-nature-of-software-products">What is the nature of software products?&lt;/h2>
&lt;p>See? This is already easier than asking &amp;ldquo;What is the nature of life?&amp;rdquo;.&lt;/p>
&lt;p>Like any other machine, a software product is wrought of the labour of many
minds and hands, and it requires maintenance and upkeep throughout its life.&lt;/p>
&lt;p>Unlike &lt;em>all&lt;/em> other machines, it is pure concept, and as such it is infinitely
malleable and mutable. And mutate it does, all the time.&lt;/p>
&lt;p>Sometimes, &amp;ldquo;finished&amp;rdquo; software emerges, only needing minor fixes and patches,
but remaining the same in purpose, interface, and behaviour. Many Unix tools
fall in this category. Some projects like ZeroMQ make it their explicit goal.
Many Clojure programmers value such &amp;ldquo;finished-ness&amp;rdquo;. Such scattered examples
exist.&lt;/p>
&lt;p>Most software does not have this luxury. Most software must change indefinitely
because the world it must serve changes indefinitely. The Emacs editor is a
software product that has evolved non-stop for &lt;em>nearly half a century&lt;/em> since
it emerged in 1976, and it continues to thrive. This post was written in Emacs.&lt;/p>
&lt;p>There is a strong reinforcing feedback loop too. Software changes the world
fast, forcing software to change faster. The current reincarnation of Machine
Learning and AI can be viewed as an expression of this process. We&amp;rsquo;re basically
saying it&amp;rsquo;s all accelerating so much that it is getting humanly &lt;em>impossible&lt;/em>
to write and revise software fast enough, to out-OODA the pace of change.
So we must instead find algorithms that sense the world and then dynamically
generate or revise other algorithms to achieve system objectives (viz. alter
the world further in our favour).&lt;/p>
&lt;p>We have to wonder, how do we make sure our product continues to thrive and
succeed under such unrelenting pressure of constant and sometimes violent change?
And who&amp;rsquo;s neck should be on the line for it?&lt;/p>
&lt;h2 id="whom-to-hold-responsible-for-software-quality-assurance">Whom to hold responsible for Software Quality Assurance?&lt;/h2>
&lt;p>The Usual Suspects?&lt;/p>
&lt;ul>
&lt;li>Those &amp;ldquo;Quality Assurance&amp;rdquo; boffins? Developers? UX people? DevOps?&lt;/li>
&lt;/ul>
&lt;p>The Less Usual Suspects?&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Product managers? Analysts? Customer success? Sales? Marketing?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The CEO?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The AI?&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Consider the scenarios below. All of them directly impact customers, making
them think &amp;ldquo;bad quality&amp;rdquo;. Consider who is responsible for the underlying
problem (or more likely, problems)?&lt;/p>
&lt;ul>
&lt;li>Your app framework is extremely performant and glitch-free. Your app bombs.&lt;/li>
&lt;li>A feature does exactly what it promises, but people fail to use it right.&lt;/li>
&lt;li>Your company committed half of itself to ship a second product in record time,
but customers never really wanted it.&lt;/li>
&lt;li>A huge update was pushed out on a do-or-die basis. Naturally it misbehaves,
can&amp;rsquo;t be rolled back, costs 5x as much to get right as it took to ship, and
the rework effectively adds months to your plan of world domination.&lt;/li>
&lt;li>Your service fails to scale. You discover there were no benchmarks.&lt;/li>
&lt;li>A deployment breaks production. You discover a bad configuration.&lt;/li>
&lt;li>A feature leaks data to unintended users and breaks SLAs / regulations. Your
CEO releases a statement blaming a DevOps engineer.&lt;/li>
&lt;li>A several-hour glitch goes un-monitored, causing serious widespread data
corruption.&lt;/li>
&lt;li>Your production noticeably degrades often. A large sea mammal is your mascot.&lt;/li>
&lt;li>Your production seldom degrades, but when it does, it takes down half the
known Internet along with it.&lt;/li>
&lt;li>and on and on&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>In a quiet moment of honest self-reflection, you may confess to the mirror that
the thousand cuts metaphor applies. That any of the above scenarios were likely
the product of corner-cuts, often near-invisible to the naked eye in the moment.
Corner-cuts that added up&amp;mdash;nay, &lt;em>compounded&lt;/em>&amp;mdash;over time; slowly as band-aids,
then as stitches and casts, and then suddenly as gangrene. And maybe the whole
thing died of those cuts, or continued as a barely alive entity until someone
had the heart to pull the plug (or offer a bail out).&lt;/p>
&lt;p>You may even confess that maybe, just &lt;em>maybe&lt;/em>, the job of assuring the goodness
of a product belongs to &lt;em>every function involved in the product&amp;rsquo;s life&lt;/em>.&lt;/p>
&lt;h2 id="why">Why?&lt;/h2>
&lt;p>Suppose we model a traditional software production workflow, i.e. Analysis -&amp;gt;
Product requirements -&amp;gt; UX/Design -&amp;gt; Development -&amp;gt; &amp;ldquo;QA&amp;rdquo; -&amp;gt; Production.&lt;/p>
&lt;p>Such a strictly linear model is common in the software industry at large.
This is what it translates to in terms of time, complexity, costs, and risks.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"> ^ Feedback
Analysis -&amp;gt; Product -&amp;gt; UX/Design -&amp;gt; Dev -&amp;gt; &amp;#34;QA&amp;#34; -&amp;gt; Prod --./--&amp;gt; arrives
/ too late
/-
/-
/- ^
/-- | Price of fixing
/-- | errors and
/--- ^ | corner cuts.
/--- | |
/---- ^ | | ~ AND/OR ~
/---- | | | Compounding of
/------ ^ | | | software debt.
/-------- | | | |
---------- ^ | | | | ~ AND/OR ~
^ | | | | | Increasing odds
| | | | | | of being wrong.
---+--------------+------------+----------+-------+-----+----------------&amp;gt;
Time, Complexity, Sunk costs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Visualising a linear workflow this way suggests some things:&lt;/p>
&lt;ul>
&lt;li>All the risk is actually front-loaded at the Analysis stage. If that is
wrong, then everything is wrong.&lt;/li>
&lt;li>The workflow looks linear, but has a compounding growth debt/risk profile.&lt;/li>
&lt;li>By tasking a single group with &amp;ldquo;assuring&amp;rdquo; product quality, we maximize our
odds of being too wrong too late, as well as of entirely failing to spot
bad news.&lt;/li>
&lt;/ul>
&lt;p>What&amp;rsquo;s not obvious from the picture is that the risk is rooted in &lt;em>feedback
delays&lt;/em>. Weak signals die when the deliver pressure is high.&lt;/p>
&lt;p>Our death-by-cuts risk profile will look the same, if the workflow is strictly
linear as depicted above. It doesn&amp;rsquo;t matter if we do it slowly in big batches
over months, or faster as smaller batches over days. Small linearised batches
may even worsen the aggregate risk profile, such as when market feedback loops
are delayed or discontinuous. The smaller the batch, the more likely it is
that feedback about several batches ago gets to us now. Such delayed feedback
tends to severely disrupt strictly linear flows.&lt;/p>
&lt;p>The above picture is also incomplete. For the full story, we need to talk
deeply about systems (a longer conversation, for another day). We can make a
small start by doing scenarios. Consider points on a product spectrum, ways
to destroy/create quality, and what might help us go from worse to better?&lt;/p>
&lt;h2 id="is-it-different-for-different-kinds-of-products">Is it different for different kinds of products?&lt;/h2>
&lt;p>Suppose we contrast two typical ends of the product spectrum defined by
primary customer. Which one risks death by a thousand cuts?&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Trait&lt;/th>
&lt;th>Enterprise Product&lt;/th>
&lt;th>Consumer Product&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Key growth metric&lt;/td>
&lt;td>Revenue Growth&lt;/td>
&lt;td>User Growth&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Key sales driver&lt;/td>
&lt;td>Referrals + executive credibility&lt;/td>
&lt;td>Referrals + Friends-and-family experiences&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Customer risk&lt;/td>
&lt;td>High risk/reward per account&lt;/td>
&lt;td>Tiny unit economics per account&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Contract risk&lt;/td>
&lt;td>SLAs with crippling penalties&lt;/td>
&lt;td>1 EULA / ToS that users don&amp;rsquo;t read&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>etc &amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Well, here&amp;rsquo;s the thing. Not only does all software mutate, we &lt;em>also&lt;/em> end up
performing all kinds of deep surgery on the &lt;em>organisation&lt;/em> that produces it.
The whole thing&amp;mdash;product and org&amp;mdash;is &lt;em>simultaneously&lt;/em> flexed, reconfigured,
and even totally redesigned in-place with rapidity that is very uncommon in
other industries. Why? Because software fundamentally is peoples' thoughts
being played on repeat.&lt;/p>
&lt;p>So however we break it down, the common theme is this. Every hotfix is a cut.
Every complaint is a cut. Every app crash is a cut. Every service outage is
a cut. And so on. Each cut heals slowly and destroys Quality and value(ation).&lt;/p>
&lt;h2 id="how-to-destroy-quality">How to destroy Quality?&lt;/h2>
&lt;p>It&amp;rsquo;s useful to come up with ways to destroy quality, so that we may contrast
those with ways to generate quality. I&amp;rsquo;ve seen and heard all of the following
in work life so far (hopefully without actively perpetrating them, but memory
is a fickle beast).&lt;/p>
&lt;ul>
&lt;li>Misconstrue and mislabel Software Testing as Quality Assurance. Testing is
&lt;em>not&lt;/em> &amp;ldquo;Quality Assurance&amp;rdquo;.&lt;/li>
&lt;li>Ostensibly make all teams responsible for their &amp;ldquo;QA&amp;rdquo;, which really means
make the least experienced people do it day-to-day.&lt;/li>
&lt;li>Create a culture where it&amp;rsquo;s normal to say things like this):
&lt;ul>
&lt;li>&amp;ldquo;Hey I&amp;rsquo;m adding this to the sprint. It&amp;rsquo;s a small thing, so let&amp;rsquo;s not slip
our deadline.&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;Testing is boring.&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;We&amp;rsquo;ll fix it if customers complain.&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;Who the f*#$ wrote this code?&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;Ah yes, those are known flaky tests. Just re-trigger the build.&amp;rdquo;&lt;/li>
&lt;li>&amp;ldquo;You don&amp;rsquo;t know your job. Ship this.&amp;rdquo; (This one stung. I&amp;rsquo;ll tell you over
beer/coffee :).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ensure designers, developers, and testers work on tasks and priorities set by others.&lt;/li>
&lt;li>Ensure someone catches the blame for mistakes.&lt;/li>
&lt;li>Set up incentives to make departments compete with each other.&lt;/li>
&lt;li>Hire a Vogon or a Darth Vader CEO.&lt;/li>
&lt;li>Further &lt;a href="https://danluu.com/wat/">normalise all kinds of deviance&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>This was just a shortlist of things I recalled while writing this post. Think
up as many ways as you can. #protip for inspiration: read CIA&amp;rsquo;s now-declassified
&lt;a href="https://www.gutenberg.org/files/26184/page-images/26184-images.pdf">Simple Sabotage Field Manual&lt;/a>.
Pay special attention to part 11: &lt;em>General Interference with Organisations
and Production&lt;/em>.&lt;/p>
&lt;h2 id="how-to-create-quality">How to create Quality?&lt;/h2>
&lt;p>One clue is to &lt;em>not&lt;/em> do quality-destroying things. Another is to do the &lt;em>inverse&lt;/em>
of quality-destroying things (e.g. share know-how instead of hoarding it.)
A third is to notice whether high-quality product producing organisations have
any common traits (they do). Most important, perhaps, is to understand that
there is no formula for how to acquire those traits.&lt;/p>
&lt;p>To design and build high quality software products, it is imperative to design
and build high quality organisation-wide systems and culture. We have many
tools, frameworks, fundamental ideas at our disposal. But no &amp;ldquo;best practices&amp;rdquo;
process or methodology or &amp;ldquo;one weird trick&amp;rdquo; style intervention can fix broken
systems and broken people.&lt;/p>
&lt;p>The &amp;ldquo;way&amp;rdquo; has to be co-evolved:&lt;/p>
&lt;ul>
&lt;li>by collaborative stakeholders,&lt;/li>
&lt;li>spread across the org,&lt;/li>
&lt;li>appropriate to the org&amp;rsquo;s unique context,&lt;/li>
&lt;li>along with customers, partners, and the immediate ecosystem.&lt;/li>
&lt;/ul>
&lt;p>This is universally a very difficult process, with challenges surprisingly
similar to what it takes to recover fitness after a year of slacking off. It
requires mindset, leadership, and persistent holistic intelligent &lt;em>eval/apply&lt;/em>
behaviour. And all of that derives from &lt;em>perspective&lt;/em>.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;&lt;em>Perspective is worth 80 IQ points.&lt;/em>&amp;rdquo;&lt;/p>
&lt;ul>
&lt;li>Alan Kay&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>So, if we are to chart a course from Worse Quality to Better Quality, then it
must be our first duty to purposely get really uncomfortable by seeking out
new-to-us, diverse, status-quo-challenging perspective. And &amp;hellip;&lt;/p>
&lt;h2 id="the-first-skill-is-to-learn-to-suffer-constructively-dot">The first skill is to learn to suffer constructively.&lt;/h2>
&lt;p>We suffer, you and I.&lt;/p>
&lt;p>It is inevitable. Yet, it is also why life flourishes. &lt;em>&amp;ldquo;Why are we suffering?&amp;quot;&lt;/em>
is a great discussion to have, because constructive suffering yields quality
outcomes.&lt;/p>
&lt;p>OK, back to the real world&amp;hellip;&lt;/p>
&lt;p>The path to recovering a &lt;em>previous&lt;/em> fitness peak after a year of slacking off
is filled with sore muscles, cursing at the alarm clock, far too many days of
being a generally irritable snappy person, and a constant mental battle against
mainlining deliciously easy instant gratification. It gets harder before it
gets easier. Then we reach the top of the previous S-curve. And we must begin
the cycle again, to climb the next one.&lt;/p>
&lt;p>We are very fortunate.&lt;/p>
&lt;p>Fellow sufferers have been fostering quality-generative conversation and change
all around us. We have access to a growing body of top-notch industry research
&lt;em>and&lt;/em> experience reports. Without exaggerating, very many of these lessons
have been paid for in tears, blood, lives. Let&amp;rsquo;s augment our intuitions with
these power tools. Those hard-won &lt;em>80 extra IQ points&lt;/em> are ours for the taking.&lt;/p>
&lt;p>Some selected resources.&lt;/p>
&lt;p>Many inputs have shaped my thinking about Quality (well, all the things,
because everything is connected); people, events, books, lectures etc. If
you&amp;rsquo;re wondering where to go. These are not prescriptions, but a sort of
sampling platter. Triggers for your own searches. Please send me more!&lt;/p>
&lt;p>Systems:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.chelseagreen.com/product/thinking-in-systems/">Thinking in Systems&lt;/a>
is a great primer.&lt;/li>
&lt;/ul>
&lt;p>Software complexity:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://shaffner.us/cs/papers/tarpit.pdf">Out of The Tar Pit&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cgl.ucsf.edu/Outreach/pc204/NoSilverBullet.html">No Silver Bullet&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://ecoplexity.org/files/uploads/Simon.pdf">The Architecture of Complexity&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=LKtk3HCgTa8&amp;amp;list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr&amp;amp;index=18">Simple made Easy&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Failure:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.researchgate.net/publication/228797158%5FHow%5Fcomplex%5Fsystems%5Ffail">How Complex Systems Fail&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.amazon.in/Human-Error-James-Reason/dp/0521314194/">Human Error&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://safetydifferently.com/">Safety Differently&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Doing Together:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/13629.The%5FMythical%5FMan%5FMonth">The Mythical Man Month&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/6667514-the-checklist-manifesto">The Checklist Manifesto&lt;/a>&lt;/li>
&lt;li>Critical Chain Project Management
(&lt;a href="https://www.goodreads.com/book/show/113934.The%5FGoal">The Goal&lt;/a> is a fine place
to start, if you have no idea what CCPM is.)&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/1501427.Managing%5FThe%5FDesign%5FFactory">Managing the Design Factory&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/6278270-the-principles-of-product-development-flow">The Principles of Product Development Flow&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/">Mature Optimization&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.kaner.com/pdfs/GoodTest.pdf">What is a Good Test Case?&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Oneself (heavily biased, because I identify as a software programmer):&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/">On Being a Senior Engineer&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.arl.wustl.edu/projects/fpx/research/HowToBeAProgrammer.pdf">How to Be A Programmer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/213233.Better">Better: A Surgeon&amp;rsquo;s Notes on Performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=f84n5oFoZBc&amp;amp;list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr&amp;amp;index=9">Hammock Driven Development&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&amp;ldquo;Practical philosophy&amp;rdquo;, for lack of better words:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=QCwqnjxqfmY&amp;amp;list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr&amp;amp;index=19">Design, Composition, Performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/324750.High%5FOutput%5FManagement">High Output Management&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.semanticscholar.org/paper/Destruction-and-Creation-Boyd/483359fa9420efcddde5a17da597f462c2a788c2">Destruction and Creation&lt;/a>&lt;/li>
&lt;li>Stuff from &lt;em>&lt;a href="https://www.theschooloflife.com/">The School of Life&lt;/a>&lt;/em> (corny name,
yes, but give it a chance :)&lt;/li>
&lt;/ul>
&lt;p>I recently discovered Gene Kim&amp;rsquo;s podcast, &lt;a href="https://itrevolution.com/the-idealcast-podcast/">The Idealcast&lt;/a>.
Gene is gathering fantastic people and resources in one place. Definitely have
a look-see.&lt;/p>
&lt;h2 id="caveats-mea-culpa-etc-dot">Caveats, mea culpa, etc.&lt;/h2>
&lt;p>I am very much a work-in-progress, and this post is my current intuition.&lt;/p>
&lt;p>The post is heavily coloured by many witting and uwitting eval/apply loops
comprised of personal failures, ignorant mistakes, and occasional wins, over
the last about 20 years of professional life. And well, life life. It is also
informed by the good fortune of having learned by working with people who
understand the world far better than I do. And obviously a lot of reading,
thinking, talking, frequently &amp;ldquo;in anger&amp;rdquo; after having hit walls and obstacles.&lt;/p>
&lt;p>So please take what is useful, and discard the rest.&lt;/p>
&lt;p>May the source be with you _\\//&lt;/p></content></item><item><title>How To Be a Totally Natural Conference Speaker?</title><link>/posts/how-to-give-a-conference-talk/</link><pubDate>Thu, 03 Feb 2022 01:56:02 +0530</pubDate><guid>/posts/how-to-give-a-conference-talk/</guid><description>&lt;p>A friend and I were chatting recently about speaking at conferences. Now this
person is smart and I&amp;rsquo;ve learned a thing or two from his in-depth engineering
blog posts. Yet there he was, telling me I&amp;rsquo;m so super good at communicating
ideas (implying he&amp;rsquo;s &lt;em>not&lt;/em> so super good), and besides he has nothing to say
worthy of a conference talk.&lt;/p>
&lt;p>Huh?!&lt;/p>
&lt;p>Uncalled for praise is jarring, but I took it&amp;mdash;2021 was heartless, OK? Still,
the subtext of &lt;em>magic&lt;/em> bothered me. That I am somehow special. A born natural.
So I told him my secret formula. And now I&amp;rsquo;m telling you.&lt;/p>
&lt;p>Here is how to be a totes natural conference speaker&amp;hellip;&lt;/p></description><content>&lt;p>A friend and I were chatting recently about speaking at conferences. Now this
person is smart and I&amp;rsquo;ve learned a thing or two from his in-depth engineering
blog posts. Yet there he was, telling me I&amp;rsquo;m so super good at communicating
ideas (implying he&amp;rsquo;s &lt;em>not&lt;/em> so super good), and besides he has nothing to say
worthy of a conference talk.&lt;/p>
&lt;p>Huh?!&lt;/p>
&lt;p>Uncalled for praise is jarring, but I took it&amp;mdash;2021 was heartless, OK? Still,
the subtext of &lt;em>magic&lt;/em> bothered me. That I am somehow special. A born natural.
So I told him my secret formula. And now I&amp;rsquo;m telling you.&lt;/p>
&lt;p>Here is how to be a totes natural conference speaker&amp;hellip;&lt;/p>
&lt;hr>
&lt;ol>
&lt;li>
&lt;p>Mope around &lt;em>all the time&lt;/em> about how you don&amp;rsquo;t &lt;em>really&lt;/em> know [Topic X].
Sooner or later an opportune Call For Proposals will slide into your Twitter
stream or Slack or Discord. (It is very important to mope around &lt;em>all&lt;/em> the
time. Also, please cultivate several topics to mope around about. This
guarantees that every moment is an opportune moment to propose a talk.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Foolishly jump at the chance. Write a proposal to talk (or teach a class)
about said [Topic X].&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Congratulations! You have now made a public commitment, and opted into the
specter of falling flat on your face before all and sundry. Let the feeling
sink in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When it does, panic and feel obligated to start making something already,
because what if you can&amp;rsquo;t actually figure out [Topic X]? Because then you
must recuse yourself before it&amp;rsquo;s too late. Proceed to have trouble starting,
toss and turn in bed many nights in a row, and finally start typing
something&amp;mdash;anything&amp;mdash;into your computer.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Make and trash at least 3 shitty first drafts. Feel like an impostor and
&lt;em>almost&lt;/em> withdraw your proposal as many times.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If your proposal gets selected, GOTO 3 and start over. If it doesn&amp;rsquo;t, GOTO 8.
If you are back here after the do-over, GOTO 7. If you got here and you don&amp;rsquo;t
know why, well that&amp;rsquo;s because GOTOs are Considered Harmful.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Somehow arrive at a version you don&amp;rsquo;t totally hate. Then make minor edits
and tweaks for days and days until you&amp;rsquo;re fed up. (Actually you are fed up
because the talk is just a week away by now, and you haven&amp;rsquo;t rehearsed even
once.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Corral friends who are way smarter than you, and get them to hear you out.
(Actually there&amp;rsquo;s a step zero. Get very lucky in life and land up with such
friends).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Listen to them and don&amp;rsquo;t make any more edits.&lt;/em> Seriously. Try to rehearse.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Second-guess yourself 48 hours before your talk, mid-way through your first
&lt;em>actual&lt;/em> rehearsal. Proceed to commit the cardinal sin of refactoring the
whole bloody thing &amp;ldquo;before shipping to production&amp;rdquo;, because apparently it&amp;rsquo;s
all completely &lt;em>wrong&lt;/em> now. Don&amp;rsquo;t sleep much, of course.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wake up with a start on D-day. Curse at yourself in the mirror. Drink an
unconscionable quantity of coffee, while feverishly reviewing your material.
Entirely miss the &amp;ldquo;hallway track&amp;rdquo; and fail to make new friends or to have
a good time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Somehow make it to the other end of your presentation. It&amp;rsquo;s OK, everybody
forgets half the material (especially those painstakingly crafted turns of
phrase and clever asides), and still somehow runs out of time. Spend the
rest of the day in a growing fog because the adrenaline wore off, but the
caffeine didn&amp;rsquo;t, but you&amp;rsquo;re wiped-out from the excitement and sleep-deprived.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Luckily, that also means you forget everything you did on your talk day.
Now you just have to make sure you never ever watch the recording of your
talk, if they publish it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bask in the certain knowledge that you too have become a 100% Totally Natural
Conference Speaker. (As a veteran of this process, I can tell you it works.
Every. Single. Time.)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Jokes apart, it really is like that. There is no magic. Only student syndrome.&lt;/p>
&lt;p>Just remember that you always know more about something than someone, and/or
almost certainly have a &lt;em>different, unique take&lt;/em> on something that you believe
to be common knowledge. Not infrequently, I find someone&amp;rsquo;s interpretation of
something I am intimately familiar with, and the interpretation remarkably
changes how I see/feel/understand/relate with the thing. (Frequently it does
not, and it&amp;rsquo;s rubbish, but that&amp;rsquo;s fine. I&amp;rsquo;m not the one for that one.)&lt;/p>
&lt;p>Why? Well because no topic is objectively too small or too silly or too useless,
for the right audience in the right context.
Look no further than &lt;a href="https://bangbangcon.com/program.html">!!Con&lt;/a>, for example.
People have i!!ega! amounts of fun there!&lt;/p>
&lt;p>So do yourself a favour. Allow yourself chances to suggest your [Topic X] to
the world, even when it&amp;rsquo;s just your take on your favourite thing that maybe
everybody already knows. Because maybe the world will say&amp;hellip;&lt;/p>
&lt;p>&amp;ldquo;Sure, why not?&amp;rdquo;.&lt;/p></content></item><item><title>Technical Debt is really Software Debt. And it's a AAA-rated CDO.</title><link>/posts/software-debt/</link><pubDate>Thu, 20 Jan 2022 09:43:26 +0530</pubDate><guid>/posts/software-debt/</guid><description>&lt;p>I&amp;rsquo;ve long struggled with the &lt;em>Technical Debt&lt;/em> metaphor. It was immediately
useful when I first heard it. I still think it is useful, albeit as a starting
point. The more I worked with software, the more infuriatingly incomplete it
started to feel.&lt;/p>
&lt;p>Some years ago I found myself in a rabbit hole, researching the 2008 financial
crisis. It reminded me of other insane stories like Knight Capital, and further
back, about how Enron imploded (because Enron India&amp;rsquo;s meltdown was shocking,
and destructive. And because a dear friend, in his past life, was on the team
at Lehman Bros. that structured financing for Enron India. So come 2008, when
Lehman imploded, I got to hear about the hard-chargin' super-leveraged
risk-takin' days from someone who was there in the early part of the so-called
Dick Fuld era. It was all very fascinating, but I digress&amp;hellip;).&lt;/p>
&lt;p>Down in the rabbit hole, a slow realization began.&lt;/p>
&lt;p>One source of my unease is that I think discussions of Technical Debt don&amp;rsquo;t
sufficiently examine the nature of the &lt;em>Risk&lt;/em> of the underlying challenge.
The other is that the concept skews and pigeonholes the &lt;em>Responsibility&lt;/em> part
of the underlying challenge. Here&amp;rsquo;s what I&amp;rsquo;m thinking.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#framing-pigeonholes-responsibility-dot">Framing pigeonholes Responsibility.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-packages-risk-dot-we-need-better-mental-models-of-that-risk-dot">Software debt packages risk. We need better mental models of that risk.&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#software-debt-risk-perception-is-muddied-by-personal-bias-dot">Software debt risk perception is muddied by personal bias.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-rooted-in-complexity-dot-we-abhor-complexity-dot">Software debt is rooted in complexity. We abhor complexity.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-inevitable-dot">Software debt is &lt;em>inevitable&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-always-compounds-dot">Software debt always &lt;em>compounds&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-layered-dot">Software debt is &lt;em>layered&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-networked-dot">Software debt is &lt;em>networked&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-like-a-complex-opaque-financial-derivative-dot">Software debt is like a complex opaque financial derivative.&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#1-000-words-in-1-picture-xkcd-summarizes-it-best-dot">1,000 words in 1 picture: xkcd summarizes it best.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#stories-of-debt-and-destruction">Stories of Debt and Destruction&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>Note: In this post, I have software organisations in mind, viz. ones that exist
mainly because of the software they make and ship (whether priced or gratis).&lt;/p></description><content>&lt;p>I&amp;rsquo;ve long struggled with the &lt;em>Technical Debt&lt;/em> metaphor. It was immediately
useful when I first heard it. I still think it is useful, albeit as a starting
point. The more I worked with software, the more infuriatingly incomplete it
started to feel.&lt;/p>
&lt;p>Some years ago I found myself in a rabbit hole, researching the 2008 financial
crisis. It reminded me of other insane stories like Knight Capital, and further
back, about how Enron imploded (because Enron India&amp;rsquo;s meltdown was shocking,
and destructive. And because a dear friend, in his past life, was on the team
at Lehman Bros. that structured financing for Enron India. So come 2008, when
Lehman imploded, I got to hear about the hard-chargin' super-leveraged
risk-takin' days from someone who was there in the early part of the so-called
Dick Fuld era. It was all very fascinating, but I digress&amp;hellip;).&lt;/p>
&lt;p>Down in the rabbit hole, a slow realization began.&lt;/p>
&lt;p>One source of my unease is that I think discussions of Technical Debt don&amp;rsquo;t
sufficiently examine the nature of the &lt;em>Risk&lt;/em> of the underlying challenge.
The other is that the concept skews and pigeonholes the &lt;em>Responsibility&lt;/em> part
of the underlying challenge. Here&amp;rsquo;s what I&amp;rsquo;m thinking.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#framing-pigeonholes-responsibility-dot">Framing pigeonholes Responsibility.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-packages-risk-dot-we-need-better-mental-models-of-that-risk-dot">Software debt packages risk. We need better mental models of that risk.&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#software-debt-risk-perception-is-muddied-by-personal-bias-dot">Software debt risk perception is muddied by personal bias.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-rooted-in-complexity-dot-we-abhor-complexity-dot">Software debt is rooted in complexity. We abhor complexity.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-inevitable-dot">Software debt is &lt;em>inevitable&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-always-compounds-dot">Software debt always &lt;em>compounds&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-layered-dot">Software debt is &lt;em>layered&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-networked-dot">Software debt is &lt;em>networked&lt;/em>.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#software-debt-is-like-a-complex-opaque-financial-derivative-dot">Software debt is like a complex opaque financial derivative.&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#1-000-words-in-1-picture-xkcd-summarizes-it-best-dot">1,000 words in 1 picture: xkcd summarizes it best.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#stories-of-debt-and-destruction">Stories of Debt and Destruction&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>Note: In this post, I have software organisations in mind, viz. ones that exist
mainly because of the software they make and ship (whether priced or gratis).&lt;/p>
&lt;hr>
&lt;h2 id="framing-pigeonholes-responsibility-dot">Framing pigeonholes Responsibility.&lt;/h2>
&lt;p>I find the &lt;em>Technical&lt;/em> part problematic because it is too narrow a context,
and that narrow framing leads to real trouble in software orgs.&lt;/p>
&lt;p>It inadvertently paints a small set of people as the &amp;ldquo;owners&amp;rdquo; of the &amp;ldquo;debt&amp;rdquo;,
which is not untrue, but it is incomplete, and the framing by its construction
inadvertently places the rest of the organisation in the role of creditor.
The framing further pigeonholes our thinking about risk, and causes us to set
up adversarial objectives and communication structures among the organisation&amp;rsquo;s
many functions and layers.&lt;/p>
&lt;p>Narrow framing is bad because software orgs&amp;ndash;especially fast growing ones&amp;ndash;are
always in a state of churn, conflict internally and with the outside world,
and a state of partial failure. Because a running, live software system is
as much a fermenting vat full of culture, opinion, future-thinky bets with
people constantly dipping in for a taste, as it is bit-flippin' transistors
mindlessly following truth tables.&lt;/p>
&lt;p>We have since invented other terms like &amp;ldquo;organisational&amp;rdquo; debt to prod people
to think more holistically. I prefer to say &amp;ldquo;software debt&amp;rdquo;, and mean it to
apply to the whole of any given software organisation, because of how I have
come to think of the &lt;em>debt&lt;/em> bit of software things (and org things in general).&lt;/p>
&lt;p>Sadly, narrow framing abounds, and we end up producing malfunctioning software
organisations far too frequently.&lt;/p>
&lt;p>And so, far too many learn what it feels like to try and get the big bank to
refinance that home loan when the world suddenly became hostile to them, and
they were too little, too alone, and too powerless to engineer a central
government bail out. The best they (we) can do is to vote for a government
that hopefully reforms policy and simplifies tax regimes and does generally
smart stuff such that more people come out of poverty, fewer sink back into
it, and more people achieve prosperity. Become a &amp;ldquo;Generative&amp;rdquo; type of org,
in terms of Westrum&amp;rsquo;s typology of organisational cultures.&lt;/p>
&lt;p>At the same time, personal responsibility is not waived away. The least we
(they) can do is to not be foolish in the first place. Resist those easy
temptations. Not bite chunks we can&amp;rsquo;t chew. Not eat what we can&amp;rsquo;t digest.&lt;/p>
&lt;p>Say No To (Software) Debts.&lt;/p>
&lt;h2 id="software-debt-packages-risk-dot-we-need-better-mental-models-of-that-risk-dot">Software debt packages risk. We need better mental models of that risk.&lt;/h2>
&lt;p>Within the frame of &amp;ldquo;technical&amp;rdquo; debt, we frequently discuss the &amp;ldquo;debt&amp;rdquo; in terms
of code quality (cleanliness, understandability, efficiency, maintainability),
and architectural quality (the goodness of domain models, core abstractions,
application boundaries and interfaces etc.).&lt;/p>
&lt;p>This is a sort of human indebtedness, as in, are we being kind to each other,
and helping each other be productive? Because if we are productive, then we
will get more done with less effort (leverage), be able to ship more, faster
(throughput), and respond to market needs more creatively (innovate).&lt;/p>
&lt;p>These are undeniably important considerations. But&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>they are certainly not firewalled off from the rest of the organisation.
For example, to a good first-order approximation, we tend to &amp;ldquo;ship our
organisational structure&amp;rdquo;.&lt;/li>
&lt;li>they are second-order outcomes of a more fundamental kind of thinking, viz.
one about risks and associated trade-offs.&lt;/li>
&lt;/ul>
&lt;p>So I think it&amp;rsquo;s worth framing a notion of &lt;em>Software&lt;/em> Debt, to re-scope the
discussion at an organisational level, and to find a better mental model of
the risk packaged by the debt.&lt;/p>
&lt;h3 id="software-debt-risk-perception-is-muddied-by-personal-bias-dot">Software debt risk perception is muddied by personal bias.&lt;/h3>
&lt;p>Part of my unease, and I suspect yours, stems from how the idea of debt is
anchored in our heads.&lt;/p>
&lt;p>We struggle with this bias when pricing things. We sell to our wallet. If we
are used to buying most things for 10 tokens, we balk at the idea that someone
else is fine charging 100 tokens for basically the same things, and that others
are fine&amp;mdash;delighted, even&amp;mdash;to fork over the requested quantity of tokens.&lt;/p>
&lt;p>Likewise, the word &amp;ldquo;debt&amp;rdquo; is strongly anchored to a &lt;!-- raw HTML omitted -->personal&lt;!-- raw HTML omitted --> sense of financial
debt; our &lt;del>credit&lt;/del> loan cards, home loans, equated monthly installments. Small,
familiar ideas. Safe-sounding numbers. A warm feeling absorbed and internalised
through delightfully tempting messages of better lives, buttressed by the
approval of friends and family when we get that car or house or desirable object.&lt;/p>
&lt;p>Given the sheer amount of personal financial debt, our frequency of involvement
with it, and the normalisation of it being &lt;em>fine&lt;/em> to always be indebted to one
or more financiers, I suspect this anchoring bias is widespread. And it clouds
our risk perception when thinking about software debt.&lt;/p>
&lt;h3 id="software-debt-is-rooted-in-complexity-dot-we-abhor-complexity-dot">Software debt is rooted in complexity. We abhor complexity.&lt;/h3>
&lt;p>Complexity is to software what mass is to a rocket; the hard limiting factor of
growth in any dimension you choose to measure (shipping velocity, headcount,
revenue, cash flow, account expansion; anything). This is the sort of thing that
demands tree-recursive, networked thinking we are not good at doing explicitly
and deliberately. Something that our education actively disables by drilling
us to think in simplistic linear terms in which correlation amounts to causation.&lt;/p>
&lt;p>So much so that we have a visceral negative reaction to the self-control and
effort needed to think hard, think deep, and think persistently with focus,
constantly refining, testing, challenging, updating our mental models of reality.
You just had a visceral negative reaction simply by reading this description,
didn&amp;rsquo;t you?&lt;/p>
&lt;h3 id="software-debt-is-inevitable-dot">Software debt is &lt;em>inevitable&lt;/em>.&lt;/h3>
&lt;p>Complexity is inevitable. Thus risk is inevitable. Thus debt is inevitable.&lt;/p>
&lt;p>Like rocket mass, the more we scale it, the more we pack in, and the more we
make it do, the more complexity we accrue. But also like rocket mass, we &lt;em>want&lt;/em>
some kinds of complexity; the kind that is at the heart of wherever it is that
we aim to go. That is, we want to take on essential risks, but ruthlessly
reject non-essential risks.&lt;/p>
&lt;p>This is not easy at all, but it is a critical function of people making software,
especially because it is &lt;em>so easy&lt;/em> to create complexity. Put a network between
two single-core computers, and boom, you just made a distributed system fraught
with undecidable problems. Add mutable state to your program, and boom, now
you have to &lt;em>also&lt;/em> remember the past to make sense of the present. Add an extra
CPU thread to your two computers and you have a stateful concurrent/parallel
networked system on you hands. And now you have to think in non-sequential
time about distributed problems with multiple pasts and multiple futures.&lt;/p>
&lt;p>Most of us don&amp;rsquo;t &lt;em>have&lt;/em> to, because we benefit&amp;ndash;often unwittingly&amp;ndash;from &lt;em>very&lt;/em>
generous error budgets and low-impact risks. But make no mistake, &lt;em>someone&lt;/em>
had to, and someone &lt;em>did&lt;/em>, which is why you and I can ride the coattails of
risk curves all our lives and be paid handsomely for their troubles.&lt;/p>
&lt;h3 id="software-debt-always-compounds-dot">Software debt always &lt;em>compounds&lt;/em>.&lt;/h3>
&lt;p>In simple terms, all debt reduces down to three key components: A principal
amount, a rate of interest, and terms of payment (including repayment period,
cadence etc.). The combination of interest and terms price the risk for both
parties.&lt;/p>
&lt;p>In software terms, we may think of each piece of tech in the stack as raw mass,
adding to the principal amount. The more we add, the more we risk, even if
the rate of interest remains constant. But really, each decision to add or
remove items from &lt;!-- raw HTML omitted -->any&lt;!-- raw HTML omitted --> part of the system changes the principal &lt;em>and&lt;/em> the
rate of interest &lt;em>and&lt;/em> the repayment terms.&lt;/p>
&lt;p>This alone should cause sleepless nights. Compounding debt grows and grows.
Slowly, creepingly at first, and then very fast. And suddenly you lose everything.&lt;/p>
&lt;h3 id="software-debt-is-layered-dot">Software debt is &lt;em>layered&lt;/em>.&lt;/h3>
&lt;p>Because software parts compose into software &amp;ldquo;stacks&amp;rdquo; and hierarchies, and
each part mutates/evolves up and down the towers.&lt;/p>
&lt;p>Say we only ever have a fixed set of software parts&amp;ndash;say one kind of server-side
application, backed by one kind of database, serving one kind of client,
via one kind of server, on one kind of operating system. Sooner or later,
each part is guaranteed to update in-place, and/or do more work, thus forcing
a change in their operating environment.&lt;/p>
&lt;p>The database gets more data. The application handles more edge cases. The
server balances more concurrent load. The OS gets security patches. The
clients want to do more so everything accrues more features. On and on,
mutating forever, exhibiting accretion, sedimentation, erosion, and tectonic
upheavals. Not to mention the parallel layers of brains of the people making
decisions about these things; the Top Dog, the Fresh Recruit, and the squishy
organisational cake between those two.&lt;/p>
&lt;figure class="left" >
&lt;img src="clojure-codebase-introduction-retention-code.png" />
&lt;figcaption class="center" >Figure 1: Clojure codebase--Introduction and retention of code. Rich Hickey. 2020. A History of Clojure.&lt;/figcaption>
&lt;/figure>
&lt;p>See also: &lt;a href="https://erikbern.com/2016/12/05/the-half-life-of-code.html">The half-life of code &amp;amp; the Ship of Theseus&lt;/a>&lt;/p>
&lt;h3 id="software-debt-is-networked-dot">Software debt is &lt;em>networked&lt;/em>.&lt;/h3>
&lt;p>Because software itself is networked, even inside applications. There are call
graphs, object hierarchies, and effects-at-a-distance. These often interact
in ways that surprise us. Small &lt;em>local&lt;/em> changes can turn into literal chain
reactions of events that have stunningly large impacts on the state of the
physical world we walk in. The meltdown of Knight Capital stands out starkly
as an example of unmitigated, un-hedged software debt.&lt;/p>
&lt;p>It goes way beyond in-app networks, of course, because we have come to depend
on global software supply chains. These are quite unlike logistical supply
chains, as:&lt;/p>
&lt;ul>
&lt;li>they demand almost no capital to participate as creator and/or as consumer,&lt;/li>
&lt;li>they place no barrier on becoming a critical node (aheam, left-pad), and&lt;/li>
&lt;li>they afford no reaction time when things go bad. Failures and compromises
affect the world near-instantaneously, at the speed information travels.&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s insane that we have become habituated to the idea that adding a single
library to one&amp;rsquo;s project can pull in tens or even hundreds of transitive
dependencies, and that&amp;rsquo;s &lt;em>fine&lt;/em>.&lt;/p>
&lt;p>I&amp;rsquo;m writing this in the wake of the aftermath of the disclosure of the log4j
zero-day vulnerability. But this is only a recent example of just one kind
of networked risk.&lt;/p>
&lt;p>With managed services we effectively add one more level to the &lt;em>Inception&lt;/em>
world of our software organisation. We outsource nice big chunks of supply
chain risk management, but we in-source a &lt;em>different&lt;/em> risk of depending
&lt;em>critically&lt;/em> on entities that we do not control and cannot fix if they fail.&lt;/p>
&lt;p>Not to mention the fact that change ripples through the parallel yet deeply
enmeshed dimensions of cyberspace and meatspace. Code running on hardware is
inexorably tied to concepts running in wetware. Of course, at this level of
abstraction, the notion applies to any field of human endeavour. Yet, it is
so much more true of software. Because software is essentially the thoughts
of people being played on repeat.&lt;/p>
&lt;figure class="left" >
&lt;img src="STELLAReportFinalFinal_Coping_With_Complexity.png" />
&lt;figcaption class="center" >Figure 2: "The System". Page 11, Report from the SNAFUcatchers Workshop on Coping With Complexity. a.k.a. the "Stella report".&lt;/figcaption>
&lt;/figure>
&lt;p>See also: the &lt;a href="https://drive.google.com/file/d/0B7kFkt5WxLeDTml5cTFsWXFCb1U/view?resourcekey=0-0s0iD6n-ctyaB6cGlw6ogw">Stella Report&lt;/a> found via
John Allspaw&amp;rsquo;s &lt;a href="//itrevolution.com/john-allspaw-how-your-systems-keep-running-day-after-day/">How Your Systems Keep Running Day After Day&lt;/a>.&lt;/p>
&lt;h3 id="software-debt-is-like-a-complex-opaque-financial-derivative-dot">Software debt is like a complex opaque financial derivative.&lt;/h3>
&lt;p>To me, unchecked creation of software debt is exactly analogous to how the
2008 financial crisis came to be. It was wrought of &amp;ldquo;simple&amp;rdquo; debt packaged
and repackage in inscrutable derivative ways, stacked into towers of debt,
where the aggregate collateral backing it looked sound, but which actually
had very shaky foundations, that the abstraction obscured. The crazy thing
is, the trouble at the bottom was apparently sitting around in plain sight,
to terrify anybody who cared to &lt;em>literally walk over&lt;/em> and &lt;em>look&lt;/em> at it. The
current state of our software supply chains look uncomfortably similar,
for example.&lt;/p>
&lt;p>But as it happens, growth forgives all sins. We fall in love with the thrill.
We fail to stay a little paranoid. Our position becomes increasingly leveraged.
The tail risks compound (demand swings, malicious actors, regulatory change,
supply chain exposure, &amp;hellip;), and so do the odds of any one of those risks
exploding in our faces.&lt;/p>
&lt;p>Our system, as in, the integrated networked whole of compute infrastructure,
managed services, libraries, product management, design, operations, sales,
marketing, org strategy start looking like piles of debt obligations. Each
represents part of a promise made to the outside world, and here&amp;rsquo;s the kicker;
our rate of growth is collateral. Small deceleration of growth rates magnify
into large percentage drops of &amp;ldquo;valuation&amp;rdquo; (however it is measured). Since
bad news travels farther and faster than good news, the negative bias tends
to be stronger. We seldom gain value as much, or as quickly, as we devalue.&lt;/p>
&lt;p>So, if we are not ruthlessly pragmatic and strategic about software debt,
you and I will keep accruing the &lt;em>bad risk&lt;/em> kind of debt. One day, at the
least convenient time, the world will come a-calling, demanding what we owe.
And if we can&amp;rsquo;t cough it up, it will take everything away. All moments are
least convenient when that happens.&lt;/p>
&lt;p>Much as I dislike all this doom-speak, I have to acknowledge it is material,
and to side with Andy Grove. Only the paranoid survive.&lt;/p>
&lt;p>The only real hedge we have is the creativity and intelligence of our people.&lt;/p>
&lt;h2 id="1-000-words-in-1-picture-xkcd-summarizes-it-best-dot">1,000 words in 1 picture: xkcd summarizes it best.&lt;/h2>
&lt;p>&lt;img src="https://imgs.xkcd.com/comics/dependency.png" alt="Someday ImageMagick will finally break for good and we&amp;rsquo;ll have a long period of scrambling as we try to reassemble civilization from the rubble.">
&lt;a href="https://xkcd.com/2347">XKCD: Dependency&lt;/a>&lt;/p>
&lt;h2 id="stories-of-debt-and-destruction">Stories of Debt and Destruction&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/danluu/post-mortems">A list of Post-mortems&lt;/a> curated by Dan Luu, Nat Welch and others.&lt;/li>
&lt;li>A list of &lt;em>&amp;ldquo;Events that have the dark debt signature&amp;rdquo;,&lt;/em> in the aforementioned
&amp;ldquo;&lt;em>&lt;a href="https://drive.google.com/file/d/0B7kFkt5WxLeDTml5cTFsWXFCb1U/view?resourcekey=0-0s0iD6n-ctyaB6cGlw6ogw">Stella report&lt;/a>&lt;/em>&amp;rdquo;.
&lt;ul>
&lt;li>Knight Capital, August 2012&lt;/li>
&lt;li>AWS, October 2012&lt;/li>
&lt;li>Medstar, April 2015&lt;/li>
&lt;li>NYSE, July 2015&lt;/li>
&lt;li>UAL, July 2015&lt;/li>
&lt;li>Facebook, September 2015&lt;/li>
&lt;li>GitHub, January 2016&lt;/li>
&lt;li>Southwest Airlines, July 2016&lt;/li>
&lt;li>Delta, August 2016&lt;/li>
&lt;li>SSP Pure broking, August 2016&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content></item><item><title>Scale, Value, Systems</title><link>/posts/systems-scale-value/</link><pubDate>Sat, 13 Nov 2021 00:00:00 +0530</pubDate><guid>/posts/systems-scale-value/</guid><description>&lt;p>Creating things is a delicate endeavour, fraught with peril. People struggle
forward through crazy marketplace and environmental complexities just to get
from one day to the other.&lt;/p>
&lt;p>Yet I can&amp;rsquo;t shake off the feeling that we make it harder for ourselves than
it should be. I&amp;rsquo;ve been trying to work out why. There&amp;rsquo;s a lot to unpack. This
post is a start at thinking about it in public. My thinking is coloured by
working in the tech startup scene for these last few years, and rooted in
a small mistake my parents made bringing me up.&lt;/p>
&lt;p>I&amp;rsquo;m going to amble along a wavy line of thought through Story, Metaphor, Model,
and Example. Please join the noodling-over and ambling-off into tangents.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#story-damaging-the-children">Story: Damaging the children&lt;/a>&lt;/li>
&lt;li>&lt;a href="#archetypes-as-metaphor-a-vogon-and-slartibartfast">Archetypes as Metaphor: A Vogon and Slartibartfast&lt;/a>&lt;/li>
&lt;li>&lt;a href="#model-a-picture-is-worth-a-1-000-points">Model: A picture is worth a 1,000 % points&lt;/a>&lt;/li>
&lt;li>&lt;a href="#example-what-s-cooler-than-10-bn-100-bn-dot">Example: What&amp;rsquo;s cooler than 10 Bn? 100 Bn.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#tying-it-together-dot-trying-it-together">Tying it together. Trying it together?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#food-for-thought">Food for thought&lt;/a>&lt;/li>
&lt;li>&lt;a href="#acknowledgments">Acknowledgments&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted --></description><content>&lt;p>Creating things is a delicate endeavour, fraught with peril. People struggle
forward through crazy marketplace and environmental complexities just to get
from one day to the other.&lt;/p>
&lt;p>Yet I can&amp;rsquo;t shake off the feeling that we make it harder for ourselves than
it should be. I&amp;rsquo;ve been trying to work out why. There&amp;rsquo;s a lot to unpack. This
post is a start at thinking about it in public. My thinking is coloured by
working in the tech startup scene for these last few years, and rooted in
a small mistake my parents made bringing me up.&lt;/p>
&lt;p>I&amp;rsquo;m going to amble along a wavy line of thought through Story, Metaphor, Model,
and Example. Please join the noodling-over and ambling-off into tangents.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;a href="#story-damaging-the-children">Story: Damaging the children&lt;/a>&lt;/li>
&lt;li>&lt;a href="#archetypes-as-metaphor-a-vogon-and-slartibartfast">Archetypes as Metaphor: A Vogon and Slartibartfast&lt;/a>&lt;/li>
&lt;li>&lt;a href="#model-a-picture-is-worth-a-1-000-points">Model: A picture is worth a 1,000 % points&lt;/a>&lt;/li>
&lt;li>&lt;a href="#example-what-s-cooler-than-10-bn-100-bn-dot">Example: What&amp;rsquo;s cooler than 10 Bn? 100 Bn.&lt;/a>&lt;/li>
&lt;li>&lt;a href="#tying-it-together-dot-trying-it-together">Tying it together. Trying it together?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#food-for-thought">Food for thought&lt;/a>&lt;/li>
&lt;li>&lt;a href="#acknowledgments">Acknowledgments&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h2 id="story-damaging-the-children">Story: Damaging the children&lt;/h2>
&lt;p>My parents are deeply systems-oriented thinkers &lt;em>and&lt;/em> doers. Biased to
thoughtful execution; whether short-or-long-range. Connoisseurs of checklists.&lt;/p>
&lt;p>They&amp;rsquo;ve done it all, and then some, with their systems-oriented minds&amp;hellip;
Buying a car, planning a wedding, building warships, running schools and R&amp;amp;D
institutes, organizing large events, helping feed stranded migrant workers,
producing textbooks, caring for their elderly and infirm, helping their
network build lives, teaching their children independence. And I gleefully
imagine, also some top-secret classified stuff my dad can&amp;rsquo;t tell me about,
because then he would have to kill me. (Kid-me read too many spy novels :)).&lt;/p>
&lt;p>At the big-picture level, in this household, keeping an up-to-date &amp;ldquo;death file&amp;rdquo;
is not morbid or fatalist, but a simple plan for &lt;em>after the inevitable&lt;/em>. An
act of care and kindness. At the microscopic level, I cannot recall a single
day growing up, going without a fresh hot meal on the table whether my mom was
home, or away, or sick. Together, they seemingly never missed a beat even against
steep odds, or even if one of them was failing, or was out of commission. And
here I am, barely keeping it together. Apples do fall far from trees.&lt;/p>
&lt;p>They never made the mistake of coddling us, but they did err by wiring us&amp;ndash;my
sibling and I&amp;ndash;with &lt;em>standards&lt;/em> for our actions and output. They failed to stop
at ethical conduct, kindness, and good manners. We had to also pay attention
to detail. Run what-if scenarios. Write things down. Be accountable to our
surroundings and the people in there. Own our successes and failures. In several
cases they had to push us (teenagers gonna teenage). In many others they led
by example.&lt;/p>
&lt;p>They also erred by letting us rifle through Daddy&amp;rsquo;s Awesome Cabinet of Books
and letting us borrow action-packed thrillers like &amp;ldquo;How Things Work&amp;rdquo; (Volumes 1
&lt;em>and&lt;/em> 2), and &amp;ldquo;Systems in Action&amp;rdquo;. Maybe my sibling was spared, I don&amp;rsquo;t know.
I certainly wasn&amp;rsquo;t. You&amp;rsquo;re a boy. And you worship your dad. And you want to be
like him. So damn straight you will devour daddy&amp;rsquo;s books. But you&amp;rsquo;re an 8th
grader, and can&amp;rsquo;t know better. To what extent that material might infiltrate
your brain. And the many ways that influence will &lt;em>mess you up&lt;/em> in adult life.&lt;/p>
&lt;p>To be clear, I adore my parents, but I don&amp;rsquo;t mean to gloat about some superior
upbringing. For millennia, traditional societies have been bringing up their
young sensitised to cause/effect, feedback loops, and the interconnectedness of
all things. My chance mental conditioning merely has different set and setting.&lt;/p>
&lt;p>Nor am I advocating the merits of my superior mammalian brain. We are all
monkeys. We absorb a tremendous amount by osmosis and proximity. I simply
was (am) around them and they are a certain kind of people. So, monkey see,
monkey do, monkey programmed for life.&lt;/p>
&lt;p>Remember this for later.&lt;/p>
&lt;h2 id="archetypes-as-metaphor-a-vogon-and-slartibartfast">Archetypes as Metaphor: A Vogon and Slartibartfast&lt;/h2>
&lt;p>Unfortunately, enterprise demise is rarely merciful.&lt;/p>
&lt;p>Even the best systems-oriented organisations can fail through mistakes or
forces outside their control. Systems-disoriented ones, though, are almost
certain to end. The best case end-state is a mercifully swift death. The
worst case is akin to eternal hell.&lt;/p>
&lt;p>It is easy to spot hellish organisations. They are ones who mistook bureaucracy
for systems. They erect tall barb-wire fences of paperwork and procedure (and
of actual barb-wire, too, come to think of it). They make Byzantine mazes of
confounding rules and approvals. Elaborate rituals with no memory of why.
Their customers puzzle through the madness. Their staff dutifully tend to these,
because that&amp;rsquo;s what procedure, fences, and mazes are for, after all; to be
tended to, ritually.&lt;/p>
&lt;p>Unfortunately, bureaucracies frequently succeed and turn pathological.&lt;/p>
&lt;p>Bureaucracies are the ones that successfully pulled off the reality-escape
magic trick of turning into axiomatic self-perpetuating ever-expanding entities.
And they are frequently pathological. They exist because they exist. They make
rules because they make rules. They don&amp;rsquo;t grow, they metastasise. Vogons.&lt;/p>
&lt;p>Unfortunately, systems people look like bureaucrats at first glance.&lt;/p>
&lt;p>It is often hard to understand, or indeed believe, what these so-called systems
people are going on about. They appear to be infuriatingly reluctant to
&lt;em>just do&lt;/em> stuff. They want us to think of this feedback loop and that delay
and the other thing&amp;mdash;reservoir something. They ask too many questions and
engage in that perversion of holism which our education weaned us off long ago.&lt;/p>
&lt;p>Unfortunately, consummate bureaucrats are camouflage experts.&lt;/p>
&lt;p>They don the colours of systems-builders (it makes for great press, and randomly
it can actually become true through no fault of said consummate bureaucrat).
But really it is all in service of the pathological bureaucracy that kowtows
the whims of some great dictator high above. The consummate &lt;em>and&lt;/em> competent
bureaucrat is an endangered animal.&lt;/p>
&lt;p>How, pray tell, is the hapless commoner to discern the master of Machiavellian
machinations, from the grappler of vexing problems of far-reaching import?
One who sees through the Eye of Sauron versus one who has vision? One who is
capable of thinking &lt;strong>and&lt;/strong> of creating?&lt;/p>
&lt;p>When suddenly confronted with an alive, organic whole wrought of systems
harmonised of systems, we can be forgiven for getting lost in a single detail
amidst infinite splendour. Like Arthur Dent trying to comprehend the copy of
Earth suspended before him, and finally finding succour in a familiar cup of
tea in his own replicated home. &amp;ldquo;Amazed and lost&amp;rdquo; is quite unlike &amp;ldquo;lost in a
maze&amp;rdquo;. The systems-builder, meanwhile, looks on with kind empathy for our
sudden loss of tongue. Silently joyous about what was realized through them.
Slartibartfast. Now you&amp;rsquo;re gagging aren&amp;rsquo;t you? Not at the name, but at the
Utopian idealism of this whole paragraph? Stay with the feeling. That&amp;rsquo;s your
prickly adult conditioning suppressing your intelligent, curious 13-year-old
inner self.&lt;/p>
&lt;p>A Vogon&amp;rsquo;s employer and A Slartibartfast&amp;rsquo;s employer both produce and perpetuate
grand structures, intricately patterned, with unfathomable puzzles and games
of life that could keep us occupied forever, and perhaps even drive us to
insanity. Yet one is a simulacrum of the other.&lt;/p>
&lt;p>With reference to &lt;em>Westrum typology&lt;/em>, the Vogon Empire would be a Pathological
Bureaucracy. So lets just say that if I were fated to go stark raving mad,
and I had to choose between these opposite archetypes, I&amp;rsquo;d rather lose my
mind working for a Slartibartfast. And if you find yourself under a Vogon&amp;hellip;&lt;/p>
&lt;p>Do Panic.&lt;/p>
&lt;h2 id="model-a-picture-is-worth-a-1-000-points">Model: A picture is worth a 1,000 % points&lt;/h2>
&lt;p>&lt;em>Scale&lt;/em> is where it&amp;rsquo;s at, these days. It so obviously &lt;em>right&lt;/em> to &lt;em>want&lt;/em> to
&lt;em>scale&lt;/em> all the things all the time.&lt;/p>
&lt;p>Try to loudly diss &amp;ldquo;scaling&amp;rdquo;. See if you don&amp;rsquo;t get funny looks and wry remarks
about &amp;ldquo;lifestyle business&amp;rdquo; or something appropriately classifying. Luckily,
that&amp;rsquo;s not what I&amp;rsquo;m going to do today. Also this is the last time fish,
reptiles, dermatology, or the insides of boilers will appear in this piece.
Business thinks of scaling as growing bigger &lt;!-- raw HTML omitted -->and&lt;!-- raw HTML omitted --> doing so faster. And we
mean business here, okay?&lt;/p>
&lt;p>But we&amp;rsquo;re in a spot of trouble, aren&amp;rsquo;t we? The word &lt;em>fucked&lt;/em> comes to mind.&lt;/p>
&lt;p>&amp;ldquo;Systems&amp;rdquo;, &amp;ldquo;complexity&amp;rdquo;, and &amp;ldquo;perspective&amp;rdquo; feel like dirty epithets in polite
(board)rooms (or indeed, most rooms). And heaven forfend if you&amp;rsquo;re an engineer
given to worrying about such stuff. (Engineers can actually verify their
Enterprise F-word Factor real quick. Use those words in your next executive
meeting, and closely watch superior eyes. If they light up, count your lucky
stars.)&lt;/p>
&lt;p>Yet people know deep down, that such things really exist, that they matter,
that we are part of the equation. But even if everyone cares, where is the
time or incentive to ferret out their presence in our organisations, much less
map out and observe their mechanics? We&amp;rsquo;re so focused and &lt;em>busy&lt;/em> pushing the
numbers that denote scaling for us.&lt;/p>
&lt;p>Fortunately, people have an intuitive feel for the aggregate effect of their
scaling efforts.&lt;/p>
&lt;p>This &amp;ldquo;effective scaling effect&amp;rdquo;, for lack of better words, is measurable in
gut-feels, and I bet, also as hard numbers in terms of &lt;strong>net resources expended&lt;/strong>
&lt;strong>to convert net inputs into net outputs&lt;/strong>. Such a &lt;em>lens of net effect&lt;/em> would
abstract over systems thinking mechanics of flows, feedback loops, buffers,
controls, and relationships.&lt;/p>
&lt;p>The following picture is not meant to capture system dynamics, but to think
about net effects of system dynamics&amp;hellip; a sort of contrast material to compare
one&amp;rsquo;s current trajectory.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"> NET INPUTS NET RESOURCES CONSUMED NET OUTPUTS
+----------------------+ +----------------------+ +----------------------+
| . | | | | . |
| . | | | | . |
| . | | | | . |
| . | | | | . |
| . | | | | . |
| . | | | | . |
| . | | /----| | . |
SCALING |. . . | |____ /--------- | | . . . |
+----------------------+ +----------------------+ +----------------------+
+----------------------+ +----------------------+ +----------------------+
| | | | | |
| /--| | /--| | /--|
| /-- | | /-- | | /-- |
| /-- | | /-- | | /-- |
| /-- | | /-- | | /-- |
| /-- | | /-- | | /-- |
| /-- | | /-- | | /-- |
STASIS | /-- | | /-- | | /-- |
+----------------------+ +----------------------+ +----------------------+
+----------------------+ +----------------------+ +----------------------+
| | | . | | |
| /--| | . | | /--|
| /-- | | . | | /-- |
| /-- | | . | | /-- |
| /-- | | . | | /-- |
| /-- | | . | | /-- |
| /-- | | . | | /-- |
DEATH | /-- | |.. . | | /-- |
+----------------------+ +----------------------+ +----------------------+
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I worry for us, you know.&lt;/p>
&lt;p>In our great civilization-scale hustle, we&amp;rsquo;ve lost the greater (systemic)
perspective. Perspective crucial to the control and management of giant grizzly
bears of self-made complexity. Everything seems to be on fire at all scales,
but we all seem to feel&amp;hellip; fine.&lt;/p>
&lt;p>Maybe I just have a morbid eye. Please tell me I&amp;rsquo;m wrong.&lt;/p>
&lt;h2 id="example-what-s-cooler-than-10-bn-100-bn-dot">Example: What&amp;rsquo;s cooler than 10 Bn? 100 Bn.&lt;/h2>
&lt;p>The way tech startups function in India drives me to despair.&lt;/p>
&lt;p>I think founders and staff lose a tremendous amount of value to avoidable chaos,
needless complexity, excessive cargo-culting of tech and business ideas, severe
under-investment in human capacity-building, and quite frankly rather poor
attention to detail. One can very well count their true burn rate not in dollar
terms, but in minds wasted, and bodies spent.&lt;/p>
&lt;p>Operating in India is ridiculously hard as it is, and founders must struggle
forward through crazy marketplace/environmental complexities. I think those
other factors I stated previously compound to make things far worse that they
need to be. It&amp;rsquo;s like death by a thousand cuts.&lt;/p>
&lt;p>For example, people look at me funny when I say I think that the poster-child
sale of Flipkart to Walmart was a tragedy. To me, that was a $100 Bn company
(or bigger!) that didn&amp;rsquo;t happen. Anecdotally, I believe many similar tragedies
are in progress as we speak. Value erosion of a colossal scale. Maybe I&amp;rsquo;m
too much of an idealist? Or worse, maybe I&amp;rsquo;m too much of an engineer? What
could I &lt;em>possibly&lt;/em> know about things way above my pay grade?&lt;/p>
&lt;p>Unfortunately for me, I can&amp;rsquo;t help thinking there must be a better way.&lt;/p>
&lt;h2 id="tying-it-together-dot-trying-it-together">Tying it together. Trying it together?&lt;/h2>
&lt;p>Software &lt;em>is&lt;/em> extreme leverage.&lt;/p>
&lt;p>Transmuting real-world idioms and processes into bits and API calls is literally
game-changing. This we know to be true to experience.&lt;/p>
&lt;p>However, any enormously high-leverage intervention routinely produces every
conceivable externality, positive or negative or just&amp;hellip; alien. So often,
we don&amp;rsquo;t even know what we&amp;rsquo;re really looking at. &lt;em>New&lt;/em>. &lt;em>NFT&lt;/em>. &lt;em>WTF&lt;/em>. &lt;em>Wow&lt;/em>.
That&amp;rsquo;s what you get when a model in a computer can thumb its nose at the laws
of Physics. Crazy variance of outcome. Power law inversions of control away
from the world of brick and mortar and atoms and societies into power-centers
capable of planet-scale rearrangement.&lt;/p>
&lt;p>People don&amp;rsquo;t scale, systems do.&lt;/p>
&lt;p>Scaling begets complexity. Systems create leverage. Systems-oriented people
create ways to thrive in complex worlds. Organisations that invest deeply in
systems-oriented people have a shot at greatness at scale. Those that don&amp;rsquo;t,
risk unchecked destruction of value for self and ecosystem. It&amp;rsquo;s a muscle to
build. It takes persistent work. You need the stomach for it.&lt;/p>
&lt;p>Unfortunately, you will likely build a bureaucracy.&lt;/p>
&lt;p>And build it fast. Actually, you don&amp;rsquo;t even need to &amp;ldquo;build&amp;rdquo; one, you just have
to do nothing and let it manifest itself. Easy-peasy.&lt;/p>
&lt;p>Suppose you suddenly learn that you are now a founder hustlin' a red-hot tech
startup, and suddenly find yourself in possession of gobs of money, and honestly
not much leadership experience, you may very quickly also find yourself in
possession of small armies of people. The pressure to &amp;ldquo;grow&amp;rdquo; will be immense.
So will be the weight of responsibility. You may feel trapped, your only recourse
being to open wide and swallow as much as you can as fast as you can. You will
make the cardinal mistake of adding more people to your already late launch.
And when it&amp;rsquo;s all threatening to go sideways, you will discover your inner
Great Dictator.&lt;/p>
&lt;p>It will be tempting. You feel the hurt, but you also feel the power. You tell
yourself it will somehow all work out in the end. That growth will forgive all
sins. It won&amp;rsquo;t. Resist the urge to command and control. Resist becoming a Vogon.
Resist the slippery slope to the hell of pathological bureaucracies. Strive
to be a Slartibartfast. A creative, generative leader.&lt;/p>
&lt;p>&lt;em>&amp;ldquo;Power over rules is real power.&amp;quot;&lt;/em>&lt;/p>
&lt;p>&lt;em>&amp;ldquo;If you want to understand the deepest malfunctions of systems, pay attention
to the rules and to who has power over them.&amp;quot;&lt;/em> - Donella Meadows, Thinking in
Systems.&lt;/p>
&lt;p>We are all monkeys, remember? You may be the top dog, but I bet you watch your
authority figures. Just as your people watch you. What are you absorbing?
What are you disseminating?&lt;/p>
&lt;p>You are also &lt;em>in&lt;/em> the system. You are bound by its laws, even if you created
it. Especially if you created it. But if you created it, you may have power
to change the rules. You may even have the greatest power; the power to
set/reset its goals.&lt;/p>
&lt;p>How will you wield your power?&lt;/p>
&lt;h2 id="food-for-thought">Food for thought&lt;/h2>
&lt;p>&lt;strong>Practice.&lt;/strong> Or, applied systems thinking.&lt;/p>
&lt;ul>
&lt;li>Forgsen, Humble, Kim: &lt;a href="https://www.goodreads.com/en/book/show/35747076-accelerate">Accelerate: Building and Scaling High-Performing Technology Organizations&lt;/a>&lt;/li>
&lt;li>Donella Meadows: &lt;a href="https://www.chelseagreen.com/product/thinking-in-systems/">Thinking in Systems&lt;/a>&lt;/li>
&lt;li>Marianne Belotti: &lt;a href="https://www.youtube.com/watch?v=XoEfV0kXXDY">We Killed These Things With Fire&lt;/a>&lt;/li>
&lt;li>John Allspaw: &lt;a href="https://www.youtube.com/watch?v=xA5U85LSk0M&amp;amp;t=0s">How Your Systems Keep Running Day After Day&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Perspective.&lt;/strong> Or, 80 IQ points.&lt;/p>
&lt;ul>
&lt;li>Joe Armstrong:
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=ed7A7r6DBsM">The How and Why of Fitting Things Together&lt;/a>, and&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=lKXe3HUG2l4">The Mess We&amp;rsquo;re In&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Alan Kay:
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=YyIQKBzIuBY">Programming and Scaling&lt;/a>, and&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=oKg1hTOQXoY">The Computer Revolution hasn&amp;rsquo;t happened yet&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Zeitgeist.&lt;/strong>: Or, stories from now.&lt;/p>
&lt;ul>
&lt;li>Dan Luu:
&lt;ul>
&lt;li>&lt;a href="https://danluu.com/people-matter/">Individuals Matter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://danluu.com/culture/">Culture Matters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://danluu.com/wat/">Normalization of Deviance&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Tiger Global: &amp;ldquo;&lt;a href="https://www.readthegeneralist.com/briefing/tiger-global">value in the software asset class [was] mispriced&lt;/a>&amp;rdquo;
(i.e. &amp;ldquo;You&amp;rsquo;re still thinking too small&amp;rdquo;)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Satire.&lt;/strong> Or, a mirror to the culture.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Yes%5FMinister">Yes Minister&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/The%5FOffice">The Office&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Blackadder">Blackadder&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/A%5FBit%5Fof%5FFry%5F%26%5FLaurie">A Bit of Fry and Laurie&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/The%5FGreat%5FDictator">The Great Dictator&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="acknowledgments">Acknowledgments&lt;/h2>
&lt;p>Thanks to Julia and Radhika for writing feedback.&lt;/p></content></item><item><title>In the beginning, was the domain name</title><link>/posts/hello-world/</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0530</pubDate><guid>/posts/hello-world/</guid><description>&lt;p>How this blog came to be is a minor miracle. Long story short, I conned myself
into believing nobody will find &lt;em>and&lt;/em> read it. But you&amp;rsquo;re here, aren&amp;rsquo;t you?
And you&amp;rsquo;re reading this. Aren&amp;rsquo;t You?&lt;/p>
&lt;p>Confucamus.&lt;/p>
&lt;p>Well, here&amp;rsquo;s how you got here.&lt;/p></description><content>&lt;p>How this blog came to be is a minor miracle. Long story short, I conned myself
into believing nobody will find &lt;em>and&lt;/em> read it. But you&amp;rsquo;re here, aren&amp;rsquo;t you?
And you&amp;rsquo;re reading this. Aren&amp;rsquo;t You?&lt;/p>
&lt;p>Confucamus.&lt;/p>
&lt;p>Well, here&amp;rsquo;s how you got here.&lt;/p>
&lt;hr>
&lt;p>You see, I&amp;rsquo;ve been&amp;hellip; was&amp;hellip; e-sober for a measurable fraction of the
Internet era.&lt;/p>
&lt;p>It&amp;rsquo;s been over ten years since I took down my last (and first) blog. Eight
since I nuked my FB with extreme prejudice, discovering in the bargain a fine
capacity for smug satisfaction, when the chagrin of aghast friends and sundry
affected me not one whit. Nary a tweet-song has erupted, five years and
counting.&lt;/p>
&lt;p>The WWW had gotten A Bit Too Much. I wanted to say nothin' to nobody on it.
I was content writing the occasional long email to friends and randoms.
I was &lt;em>fine&lt;/em>. &lt;em>Everything was.&lt;/em>&lt;/p>
&lt;p>Mother nature, though. She tests us.&lt;/p>
&lt;p>Predictably, she sprung A Rather Big Surprise at the least-convenient moment
in the least-convenient century (for me, at any rate).
That-which-shall-not-be-named imposed a period of involuntary house arrest.&lt;/p>
&lt;p>It was then, in that long dark tea time of the soul, will weakened, that I
snagged a domain on impulse.&lt;/p>
&lt;p>This very domain. Just for my email, mind you. To de-google myself. Or something.&lt;/p>
&lt;p>Oh, how little did I know. &lt;a href="http://garann.com/dev/2013/how-to-blog-about-code-and-give-zero-fucks/">Insidious&lt;/a> &lt;a href="https://sites.google.com/site/steveyegge2/you-should-write-blogs">thoughts&lt;/a> &lt;a href="https://applieddivinitystudies.com/2020/09/09/journaling/">started&lt;/a> invading my consciousness
through my soothingly red-shifted displays. The Feature Creep crept up slowly,
subtly erecting neon hoardings to subvert the fog my mind had gladly embraced.
&lt;em>&amp;ldquo;Does your domain apologetically redirect to your github?&amp;rdquo;.&lt;/em>
&lt;em>&amp;ldquo;Your site can be more. Do more. So much more.&amp;rdquo;.&lt;/em>
&lt;em>&amp;ldquo;If a reader fell upon this site and no form was around to comment in,
did they make a sound?&amp;rdquo;.&lt;/em>
Foggy the mind was, yes.&lt;/p>
&lt;p>That&amp;rsquo;s when it gripped me. The desire to write. And it started gnawing away
inside. It was all The Feature Creep&amp;rsquo;s doing, of course, but I didn&amp;rsquo;t know
it then.&lt;/p>
&lt;p>Luckily, my terror of looking like an idiot&amp;ndash;nay, an &lt;em>impostor&lt;/em>&amp;ndash;was far more
potent than The FC&amp;rsquo;s gnawing at my anemic will. I narrowly avoided working up
the nerve to just point the damn domain to Wordpress and slam publish like it
was 2005 again.&lt;/p>
&lt;p>Days turned to weeks. Weeks glommed into months. Some uncalled for hair loss
occurred and a year passed. Meanwhile, the domain redirected reliably,
unaware of the mayhem within and without.&lt;/p>
&lt;p>Still The FC gnawed on. The Feature Creep never tires, never lies down, and
never dies, you see.&lt;/p>
&lt;p>Slyly (or so I thought), I fooled it by quietly typing into my Emacs. More
days turned to weeks turned to months. Words accreted in my org-mode files.
Wee notes. Snippets. Factoids squirreled away. Mostly harmless bits and bobs.
Someone paying attention might have smelled trouble brewing and stopped right
there. But, oh how little did I know.&lt;/p>
&lt;p>Unwittingly, I started penning lofty thoughts too. I caught on soon enough,
but I kept doing it, despite now being acutely aware that I&amp;rsquo;d wake up feeling
dirty the morning after. My confidence, though. My, did it grow supreme. It
took perverse delight in jotting down opinions way above my pay grade because,
after all, nobody would find out. It was all on my computer. Even if I
didn&amp;rsquo;t &lt;em>shred&lt;/em> it all, bitrot would certainly destroy every last trace of
my misadventures. And I&amp;rsquo;d safely take my little secret life to my grave.
Yes, I&amp;rsquo;d get away with it.&lt;/p>
&lt;p>But then my partner found out and started telling me things, whispering words
of encouragement (somehow, &lt;em>&amp;ldquo;egged on&amp;rdquo;&lt;/em> seems more apt).
The fault is all mine though; why we&amp;rsquo;re here. For shortly after, in a
momentary lapse of judgment, I also told a friend.
And then, fatally, I failed to continue keeping mum before other friends.
Now they want to read it all, and not privately, but &amp;ldquo;on your bloody blog,
dummy&amp;rdquo;. That&amp;rsquo;s when I &lt;em>knew&lt;/em>. The Feature Creep had me dead to rights
from the get go.&lt;/p>
&lt;p>The obvious moral here is if you want to continue &lt;em>not&lt;/em> writing on the WWW,
don&amp;rsquo;t under &lt;em>any&lt;/em> circumstance impulse-purchase that domain, and if you do,
don&amp;rsquo;t secretly type in your computer, and if you do, for the love of your Gods,
don&amp;rsquo;t wed or befriend anyone.&lt;/p>
&lt;p>Anyhow, it was too late for me. Feeling suitably cornered and wretched,
much moping around ensued, until it hit me; &amp;ldquo;Wait a minute, I &lt;em>am&lt;/em> an idiot,
but I also &lt;em>want&lt;/em> to be &lt;a href="https://danluu.com/look-stupid/">less of one&lt;/a>.&amp;rdquo;
So this is&amp;hellip; also fine. Maybe they will even tell me HowTo Not Idiot, if
they&amp;rsquo;re still here, reading.&lt;/p>
&lt;p>So I submitted. That domain I impulse-bought stopped redirecting, pointing
to this instead. Then with infinite improbability, your browser pointed to
that and served this up. And now you know exactly how you got here. And&amp;hellip;&lt;/p>
&lt;p>You&amp;rsquo;re still reading, aren&amp;rsquo;t you?&lt;/p>
&lt;p>Your readership graces this site. To me, writing was thinking. Apparently it
can also be a process of becoming. So thank you for being here (bows deeply).
Several word collections are in progress. Please stay as long as you wish.&lt;/p>
&lt;p>I&amp;rsquo;ll pause here to doff my hat to some heroes that I draw inspiration from;
&lt;a href="https://bellmar.medium.com/">bellmar&lt;/a> &amp;amp; &lt;a href="https://danluu.com">danluu&lt;/a> &amp;amp; &lt;a href="https://jvns.ca/">b0rk&lt;/a> &amp;amp; &lt;a href="https://www.gwern.net/index">gwern&lt;/a> &amp;amp; &lt;a href="https://aphyr.com/tags/writing">aphyr&lt;/a> &amp;amp; &lt;a href="https://www.kitchensoap.com/">allspaw&lt;/a> &amp;amp; &lt;a href="https://xkcd.com/">randall&lt;/a> &amp;amp; &lt;a href="https://twitter.com/foone">foone&lt;/a>,
and a hundred more&amp;hellip; Much to learn, have I.
But we here now, an' we gon' try. We gon' try, to eval/apply.&lt;/p>
&lt;p>There will be some technical words, some code play, some HowTos, some WhyTos,
pondering-upons of some real doozies like &amp;ldquo;Systems, Scale, Value&amp;rdquo;,
&amp;ldquo;Technical Debt is a CDO&amp;rdquo;, &amp;ldquo;Envelope of control&amp;rdquo;, &amp;ldquo;Why was the misbehaving
system behaving itself?&amp;rdquo; and so forth. No pundering at all, if you&amp;rsquo;re
wondering.&lt;/p>
&lt;p>Enroute, maybe your eye catches something iffy and twitches. Perhaps a whiff
of bull causes your nostrils to flare slightly. Maybe something really gets
your goose and your brain screams &amp;ldquo;NO. Don&amp;rsquo;t. Type. You &lt;strong>promised&lt;/strong> you&amp;rsquo;re
done with these Internet randos who are SO BLOODY WRONG.&amp;rdquo;.&lt;/p>
&lt;p>That&amp;rsquo;s why I&amp;rsquo;m helping you by not having a comment form.&lt;/p>
&lt;p>But I&amp;rsquo;ll be delighted to hear from you at &lt;em>weblog (at) evalapply (dot) org&lt;/em>
if it strikes your fancy! (Or &lt;em>youresobloodywrong (at) evalapply (dot) org&lt;/em>
if it&amp;rsquo;s just &lt;em>that&lt;/em> kind of a day and you can&amp;rsquo;t stand it any more.
I know the feeling. I&amp;rsquo;m here, listening :).&lt;/p>
&lt;p>Thank you for swinging by!&lt;/p>
&lt;p>&lt;a href="https://xkcd.com/386/">&lt;img src="https://imgs.xkcd.com/comics/duty%5Fcalls.png" alt="What do you want me to do? LEAVE? Then they&amp;rsquo;ll keep being wrong!">&lt;/a>
&lt;a href="https://xkcd.com/386/">xkcd: Duty Calls&lt;/a>&lt;/p></content></item></channel></rss>